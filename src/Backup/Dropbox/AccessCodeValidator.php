<?php
 namespace App\Backup\Dropbox; use GuzzleHttp\Client as HttpClient; use App\Util\Retry; class AccessCodeValidator { const HTTP_CLIENT_TIMEOUT = 10; const ENDPOINT = "\x68\x74\x74\160\163\72\x2f\57\x64\162\157\x70\142\x6f\x78\x2d\x61\165\164\150\x2e\x63\x6c\157\x75\144\x70\x61\156\145\x6c\x2e\x69\x6f\57"; private ?HttpClient $httpClient = null; private ?string $token = null; private ?string $refreshToken = null; public function isValid(string $accessCode) : bool { goto ee8de; d73f8: if (!(true === isset($responseDataDecoded["\145\162\162\157\162\x4d\145\x73\163\141\x67\x65"]))) { goto b0880; } goto b2869; Ff594: $responseData = (string) $response->getBody(); goto Cb9be; Ba3fb: $response = $this->retry(function () use($httpClient, $formData) { $response = $httpClient->request("\x50\x4f\123\x54", self::ENDPOINT, ["\x66\x6f\x72\x6d\137\x70\141\x72\141\155\163" => $formData]); return $response; }); goto bf1b2; Be7c7: b0880: goto be336; A82ee: e0936: goto C5c18; b3e60: $this->setToken($token); goto e2dc3; bf1b2: if (!(200 == $response->getStatusCode())) { goto a642d; } goto Ff594; ae5ed: $refreshToken = $responseDataDecoded["\x72\x65\146\162\145\163\x68\x5f\x74\157\x6b\x65\156"]; goto b3e60; ef029: $token = trim($responseData); goto ae5ed; E81f5: Ed032: goto ef029; be336: goto e0936; goto E81f5; C3f1e: $httpClient = $this->getHttpClient(); goto bf265; cc02d: if (true === isset($responseDataDecoded["\141\x63\143\145\163\163\x5f\164\157\153\x65\156"]) && true === isset($responseDataDecoded["\x72\x65\146\x72\x65\163\x68\x5f\164\x6f\153\x65\156"])) { goto Ed032; } goto d73f8; B199e: return $isValid; goto c1f2a; Cb9be: $responseDataDecoded = json_decode($responseData, true); goto cc02d; e2dc3: $this->setRefreshToken($refreshToken); goto f2455; b2869: throw new \Exception($responseDataDecoded["\x65\x72\x72\157\x72\115\x65\x73\x73\x61\147\145"]); goto Be7c7; f2455: $isValid = true; goto A82ee; bf265: $formData = ["\143\x6f\x64\145" => $accessCode]; goto Ba3fb; C5c18: a642d: goto B199e; ee8de: $isValid = false; goto C3f1e; c1f2a: } public function setToken(string $token) : void { $this->token = $token; } public function getToken() : ?string { return $this->token; } public function setRefreshToken(string $refreshToken) : void { $this->refreshToken = $refreshToken; } public function getRefreshToken() : ?string { return $this->refreshToken; } private function getHttpClient() : HttpClient { goto d4e26; F6daf: $config = ["\164\x69\x6d\x65\x6f\165\164" => self::HTTP_CLIENT_TIMEOUT, "\166\x65\162\151\146\x79" => false, "\150\145\141\x64\x65\x72\x73" => ["\x43\157\x6e\164\145\156\164\x2d\124\x79\160\145" => "\x61\x70\160\154\x69\143\x61\164\x69\x6f\156\x2f\152\163\x6f\x6e"]]; goto D049c; C552f: return $this->httpClient; goto c04ee; d4e26: if (!(true === is_null($this->httpClient))) { goto a0682; } goto F6daf; D049c: $this->httpClient = new HttpClient($config); goto B9cd2; B9cd2: a0682: goto C552f; c04ee: } protected function retry(callable $fn, $retries = 1, $delay = 3) { return Retry::retry($fn, $retries, $delay); } }
