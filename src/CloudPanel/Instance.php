<?php
 namespace App\CloudPanel; use GuzzleHttp\Client as HttpClient; use App\Util\Retry; use App\System\CommandExecutor; use App\System\Command\SedCommand; use App\System\Command\MemoryInformationCommand; use App\System\Command\ProcessorCoresCommand; use App\System\Command\ServiceRestartCommand; use App\System\Command\SetTimezoneCommand; use App\Util\HumanFileSize as HumanFileSizeUtil; use App\System\Service; class Instance { const HTTP_CLIENT_TIMEOUT = 5; const ARCHITECTURE_ARM = "\x61\x61\162\143\x68\66\x34"; const ARCHITECTURE_X86 = "\170\x38\x36\x5f\x36\x34"; const OPERATING_SYSTEM_DEBIAN = "\x44\x65\142\x69\141\x6e"; const OPERATING_SYSTEM_UBUNTU = "\x55\x62\165\x6e\x74\x75"; const PHP_DIRECTORY = "\57\145\x74\143\57\160\x68\x70\57"; const PROFTPD_SERVICE_NAME = "\x70\162\157\146\x74\x70\x64"; const PROFTPD_CONFIG_FILE = "\57\145\x74\x63\57\x70\162\x6f\146\x74\160\144\57\x70\162\157\x66\x74\160\144\x2e\x63\x6f\156\x66"; protected ?string $uid = null; protected ?string $architecture = null; protected ?string $hostname = null; protected ?string $ipv4PublicIp = null; protected ?string $ipv6PublicIp = null; protected ?string $region = null; protected ?string $operatingSystemName = null; protected ?string $operatingSystemVersion = null; protected array $services = []; protected array $phpVersions = []; protected CommandExecutor $commandExecutor; protected Environment $environment; protected ?HttpClient $httpClient = null; public function __construct() { $this->commandExecutor = new CommandExecutor(); } public function getArchitecture() : ?string { goto eb1a7; E56e4: return $this->architecture; goto bb27f; eb1a7: if (!(true === is_null($this->architecture))) { goto b72b4; } goto bfcac; C635a: b72b4: goto E56e4; bfcac: $this->architecture = php_uname("\x6d"); goto C635a; bb27f: } public function isArmArchitecture() : bool { goto Fd428; Ec3a7: return $isArmArchitecture; goto ad146; b95bf: $isArmArchitecture = self::ARCHITECTURE_ARM == $architecture; goto Ec3a7; Fd428: $architecture = $this->getArchitecture(); goto b95bf; ad146: } public function getUid() : string { return $this->uid; } public function setUid(string $uid) : void { $this->uid = $uid; } public function setHostname(string $hostname) : void { $this->hostname = $hostname; } public function getHostname() : string { return $this->hostname; } public function setRegion(string $region) : void { $this->region = $region; } public function getRegion() : ?string { return $this->region; } public function setIpv4PublicIp(string $ipv4PublicIp) : void { $this->ipv4PublicIp = $ipv4PublicIp; } public function getIpv4PublicIp() : ?string { return $this->ipv4PublicIp; } public function setIpv6PublicIp(string $ipv6PublicIp) : void { $this->ipv6PublicIp = $ipv6PublicIp; } public function getIpv6PublicIp() : string { return $this->ipv6PublicIp; } public function setEnvironment(Environment $environment) : void { $this->environment = $environment; } public function getEnvironment() : Environment { return $this->environment; } public function getServices() : array { goto Ece32; F9423: $mysqlService->setName("\115\171\x53\121\x4c"); goto E1958; B934c: $redisServer->setServiceName("\162\x65\x64\x69\163\x2d\x73\145\x72\166\145\x72"); goto B9d30; d0747: $varnishCache->setServiceName("\166\x61\x72\x6e\x69\163\x68"); goto Aff19; Bd853: $nginxService->setName("\116\107\111\x4e\x58"); goto eb19c; dd96c: $mysqlService = new Service(); goto F9423; C87dd: uasort($this->services, function ($a, $b) { return $a->getName() > $b->getName(); }); goto D7bf1; f8f50: $phpVersions = $this->getPhpVersions(); goto f1891; eb19c: $nginxService->setServiceName("\156\147\x69\156\x78"); goto dd96c; Aff19: $this->services[$varnishCache->getServiceName()] = $varnishCache; goto eb11a; Ece32: if (!(true === empty($this->services))) { goto f025d; } goto E0434; D7bf1: $varnishCache = new Service(); goto accae; E7bd1: $this->services[$redisServer->getServiceName()] = $redisServer; goto f8f50; b7c93: foreach ($phpVersions as $phpVersion) { goto E0b70; Dfd37: f26e2: goto B4a37; A7380: $this->services[$phpService->getServiceName()] = $phpService; goto Dfd37; Db955: $phpService->setName(sprintf("\x50\x48\120\x2d\106\x50\115\40\x25\163", $phpVersion)); goto A0b8b; A0b8b: $phpService->setServiceName(sprintf("\160\150\160\45\x73\x2d\146\160\x6d", $phpVersion)); goto A7380; E0b70: $phpService = new Service(); goto Db955; B4a37: } goto bc2ad; f1891: if (!count($phpVersions)) { goto dba22; } goto b7c93; d20fe: $redisServer->setName("\x52\x65\x64\151\163\40\123\x65\162\x76\145\162"); goto B934c; B9d30: $this->services[$nginxService->getServiceName()] = $nginxService; goto f721a; E0434: $nginxService = new Service(); goto Bd853; Fbb7d: return $this->services; goto a5655; b4340: dba22: goto C87dd; accae: $varnishCache->setName("\x56\x61\162\156\151\x73\x68\x20\103\141\143\150\145"); goto d0747; bc2ad: cb346: goto b4340; E1958: $mysqlService->setServiceName("\x6d\x79\x73\x71\x6c"); goto f3124; f3124: $redisServer = new Service(); goto d20fe; f721a: $this->services[$mysqlService->getServiceName()] = $mysqlService; goto E7bd1; eb11a: f025d: goto Fbb7d; a5655: } public function restartService(Service $service) : void { goto Ab79a; F3848: $serviceRestartCommand->setServiceName($serviceName); goto b13cd; Eec8e: $serviceRestartCommand = new ServiceRestartCommand(); goto F3848; Ab79a: $serviceName = $service->getServiceName(); goto Eec8e; b13cd: $this->commandExecutor->execute($serviceRestartCommand); goto b0823; b0823: } public function getOperatingSystemName() : string { $this->operatingSystemName = false === file_exists("\57\145\x74\x63\x2f\154\163\x62\55\x72\x65\x6c\x65\141\x73\x65") ? self::OPERATING_SYSTEM_DEBIAN : self::OPERATING_SYSTEM_UBUNTU; return $this->operatingSystemName; } public function operatingSystemVersion() : string { goto f95ce; d8eef: switch ($operatingSystemName) { case self::OPERATING_SYSTEM_DEBIAN: $this->operatingSystemVersion = trim(file_get_contents("\x2f\x65\x74\143\57\x64\x65\142\x69\x61\x6e\137\x76\x65\x72\163\x69\x6f\156")); goto F5c01; case self::OPERATING_SYSTEM_UBUNTU: goto f2a03; B417f: $operatingSystemVersionId = $osReleaseInformation[2] ?? ''; goto b78bc; f2a03: $osReleaseInformation = explode(PHP_EOL, trim(file_get_contents("\x2f\145\x74\x63\x2f\x6f\163\x2d\162\145\154\x65\x61\163\145"))); goto B417f; D03c8: $this->operatingSystemVersion = $operatingSystemVersion; goto fb9f0; b78bc: $operatingSystemVersion = substr($operatingSystemVersionId, 12, -1); goto D03c8; fb9f0: goto F5c01; goto e6ecf; e6ecf: } goto af429; F7794: return $this->operatingSystemVersion; goto f0a93; af429: d48e9: goto dd947; f95ce: $operatingSystemName = $this->getOperatingSystemName(); goto d8eef; dd947: F5c01: goto F7794; f0a93: } public function getPhpVersions() : array { goto Db273; D8bb8: return $this->phpVersions; goto a466d; b4fe8: cfaf1: goto e5d8c; de0af: foreach (new \DirectoryIterator(self::PHP_DIRECTORY) as $fileInfo) { goto e27fd; d6cc1: $phpVersion = $fileInfo->getBasename(); goto f3e75; e868b: $this->phpVersions[] = $phpVersion; goto ab6ae; e53e1: c623f: goto B2222; ab6ae: E24fb: goto e53e1; f3e75: if (!(true === is_float($phpVersion + 0))) { goto E24fb; } goto e868b; e27fd: if (!(false === $fileInfo->isDot())) { goto c623f; } goto d6cc1; B2222: cd8a9: goto C674f; C674f: } goto b4fe8; e5d8c: rsort($this->phpVersions); goto c7699; c7699: C8b33: goto D8bb8; Db273: if (!(true === empty($this->phpVersions))) { goto C8b33; } goto de0af; a466d: } public function getProcessorCores() : int { goto F4885; dd85d: $this->commandExecutor->execute($processorCoresCommand); goto E1998; F4885: $processorCoresCommand = new ProcessorCoresCommand(); goto dd85d; E1998: $numberOfProcessorCores = $processorCoresCommand->getNumberOfProcessorCores(); goto a37ba; a37ba: return $numberOfProcessorCores; goto A932d; A932d: } public function getMemory($unit = "\107\102") : string { goto D0212; b22a0: return $memory; goto d45fe; D0212: $totalMemoryInBytes = $this->getTotalMemoryInBytes(); goto b9072; b9072: $memory = HumanFileSizeUtil::convert($totalMemoryInBytes, $unit, 0); goto b22a0; d45fe: } private function getTotalMemoryInBytes() : int { goto a00d0; b0c1d: $totalMemoryInBytes = $memoryInformationCommand->getTotalMemoryInBytes(); goto fedf9; fedf9: return $totalMemoryInBytes; goto a4b6f; a86ba: $this->commandExecutor->execute($memoryInformationCommand); goto b0c1d; a00d0: $memoryInformationCommand = new MemoryInformationCommand(); goto a86ba; a4b6f: } public function setProftpdMasqueradeAddress($masqueradeAddress) : void { goto B0b73; B0b73: $sedCommand = new SedCommand(); goto C6052; Deaeb: $sedCommand->setPattern(sprintf("\x73\x2f\x4d\x61\x73\x71\x75\145\x72\x61\x64\x65\x41\144\x64\162\x65\163\x73\x2e\52\x2f\x4d\x61\x73\x71\x75\145\162\x61\144\145\101\x64\x64\x72\145\x73\x73\40\x25\163\57\x67", $masqueradeAddress)); goto fde9b; fde9b: $serviceRestartCommand = new ServiceRestartCommand(); goto Af99b; Af99b: $serviceRestartCommand->setServiceName(self::PROFTPD_SERVICE_NAME); goto bac4f; bac4f: $this->commandExecutor->execute($sedCommand); goto b197b; b197b: $this->commandExecutor->execute($serviceRestartCommand); goto cd309; C6052: $sedCommand->setFile(self::PROFTPD_CONFIG_FILE); goto Deaeb; cd309: } public function setTimezone(string $timezone) : void { goto Ede17; ff95f: $setTimezoneCommand->setTimezone($timezone); goto Ce5ce; Ce5ce: $this->commandExecutor->execute($setTimezoneCommand); goto C29c0; Ede17: $setTimezoneCommand = new SetTimezoneCommand(); goto ff95f; C29c0: } public function reboot($delay = 5) : void { shell_exec(sprintf("\x28\x2f\142\151\x6e\x2f\163\154\x65\x65\x70\x20\45\x73\40\x26\46\x20\57\x75\163\x72\x2f\142\151\x6e\57\x73\x75\144\157\x20\162\x65\x62\157\157\164\51\40\x3e\x20\x2f\x64\145\x76\57\x6e\x75\154\154\x20\x26", $delay)); } protected function getHttpClient() : HttpClient { goto Dfbd0; Dfbd0: if (!(true === is_null($this->httpClient))) { goto Afa0d; } goto f0857; f0857: $config = ["\164\151\x6d\145\x6f\165\x74" => self::HTTP_CLIENT_TIMEOUT, "\166\x65\162\x69\146\x79" => false]; goto Ac265; Ac265: $this->httpClient = new HttpClient($config); goto b0924; b0924: Afa0d: goto e6d06; e6d06: return $this->httpClient; goto Efdcf; Efdcf: } protected function retry(callable $fn, $retries = 2, $delay = 3) { return Retry::retry($fn, $retries, $delay); } }
