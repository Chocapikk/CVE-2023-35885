<?php
 namespace App\Form; use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormEvent; use Symfony\Component\HttpFoundation\RequestStack; use Symfony\Component\Form\Extension\Core\Type\TextType; use Symfony\Component\Form\Extension\Core\Type\ChoiceType; use App\Entity\FirewallRule; use App\CloudPanel as CloudPanel; class AdminFirewallRuleEditType extends AbstractType { private RequestStack $requestStack; public function __construct(RequestStack $requestStack) { $this->requestStack = $requestStack; } public function buildForm(FormBuilderInterface $builder, array $options) : void { goto A3f75; C9b21: $builder->addEventListener(FormEvents::PRE_SUBMIT, function (FormEvent $event) { goto fce29; E8fcc: $event->setData($data); goto Df0c3; fce29: $data = $event->getData(); goto f91bb; F8118: Ff215: goto E8fcc; a51a2: $data["\x70\x6f\162\x74\122\141\156\x67\145"] = implode("\55", array_map("\x74\x72\x69\155", explode("\x2d", $data["\160\157\162\x74\x52\x61\x6e\x67\145"]))); goto F8118; f91bb: if (!(true === isset($data["\160\x6f\x72\164\x52\x61\156\147\145"]))) { goto Ff215; } goto a51a2; Df0c3: }); goto c6603; bf7a5: $builder->add("\164\171\x70\x65", ChoiceType::class, ["\162\145\161\x75\x69\x72\x65\144" => true, "\x6d\141\x70\160\145\144" => false, "\141\x74\x74\x72" => ["\143\x6c\x61\x73\163" => "\x66\157\162\155\55\x73\145\x6c\x65\143\164\x20\x66\157\162\x6d\55\163\145\154\x65\143\164\x2d\x6c\x67"], "\154\x61\142\x65\x6c" => "\124\171\x70\x65", "\x63\x68\157\x69\x63\145\163" => $typeChoices, "\x64\x61\164\x61" => $firewallRule->getPortRange()]); goto b3808; fe94b: foreach ($firewallRuleTypes as $portRange => $name) { $typeChoices[$name] = $portRange; A5432: } goto B4d00; d5781: $firewallRuleTypes = FirewallRule::TYPES; goto fe94b; bc332: $builder->add("\x73\157\x75\162\x63\x65\x43\150\x6f\151\x63\145", ChoiceType::class, ["\x72\x65\x71\x75\151\162\145\144" => false, "\x6d\141\160\x70\x65\144" => false, "\x61\164\164\x72" => ["\143\x6c\141\x73\163" => "\x66\157\162\155\x2d\163\x65\x6c\145\143\164\x20\146\x6f\x72\x6d\x2d\x73\145\x6c\x65\x63\x74\55\x6c\147"], "\154\x61\x62\x65\154" => "\x53\157\165\162\x63\x65", "\x63\150\157\151\143\145\163" => $sourceChoices, "\144\141\164\x61" => $firewallRule->getSource()]); goto b4170; A3f75: $firewallRule = $options["\144\x61\164\141"]; goto B8f24; c40f5: $myIp = $request->getClientIp(); goto bf7b1; B90c2: $request = $this->requestStack->getCurrentRequest(); goto c40f5; C1fcb: $builder->add("\144\145\x73\x63\162\151\160\x74\x69\x6f\x6e", TextType::class, ["\162\145\161\x75\151\x72\x65\144" => false, "\x61\164\164\162" => ["\x63\154\x61\x73\x73" => "\x66\157\162\x6d\x2d\x63\157\x6e\164\162\x6f\x6c", "\x70\154\141\x63\x65\x68\x6f\154\144\145\x72" => "\112\157\150\x6e\x20\x44\157\145"], "\x6c\x61\x62\x65\x6c" => "\104\x65\x73\143\162\151\x70\164\x69\x6f\x6e"]); goto C9b21; b3808: $builder->add("\x70\x6f\x72\x74\x52\x61\x6e\147\x65", TextType::class, ["\162\x65\161\x75\x69\162\145\x64" => true, "\141\164\x74\x72" => ["\143\154\141\x73\x73" => "\x66\157\162\x6d\x2d\143\157\x6e\x74\162\157\x6c\40\x66\x6f\x72\x6d\x2d\143\157\156\x74\162\157\x6c\55\x6c\x67"], "\x6c\141\142\x65\x6c" => "\x50\x6f\x72\x74\x20\122\x61\156\x67\x65"]); goto B90c2; B4d00: Db181: goto bf7a5; B8f24: $typeChoices = []; goto d5781; b4170: $builder->add("\x73\157\165\162\143\145", TextType::class, ["\x72\x65\x71\x75\x69\162\145\144" => true, "\x61\164\x74\x72" => ["\x63\154\x61\x73\163" => "\x66\157\x72\x6d\x2d\x63\157\156\164\162\x6f\x6c\40\146\x6f\162\155\55\x63\157\x6e\164\162\x6f\x6c\x2d\154\147", "\160\154\141\x63\x65\x68\157\154\x64\x65\162" => "\111\x50\x20\157\x72\40\103\x49\104\x52"], "\154\x61\x62\x65\154" => "\x53\157\x75\162\x63\145"]); goto C1fcb; bf7b1: $sourceChoices = ["\103\165\163\164\157\x6d" => '', "\x41\156\x79\167\x68\x65\162\145\55\111\x50\x76\64" => "\x30\x2e\60\x2e\x30\56\60\57\x30", "\101\156\171\x77\150\145\x72\145\x2d\x49\120\166\x36" => "\x3a\x3a\57\60", "\x4d\171\40\x49\x50" => $myIp]; goto bc332; c6603: } public function setDefaultOptions(OptionsResolverInterface $resolver) : void { $resolver->setDefaults(["\x64\x61\x74\x61\x5f\x63\154\x61\163\x73" => "\101\160\160\x5c\105\156\x74\x69\x74\x79\134\x46\x69\162\145\x77\x61\154\x6c\x52\165\154\x65"]); } public function getName() : string { return "\143\x6c\160\x5f\x61\x64\155\151\156\x5f\146\151\x72\145\x77\141\154\154\x5f\162\x75\x6c\x65"; } }
