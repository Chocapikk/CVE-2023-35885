<?php
 namespace App\Form; use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\Extension\Core\Type\TextType; use Symfony\Component\Validator\Constraints as Assert; use App\Validator\Constraints as AppAssert; class SiteNewStaticType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) : void { goto eba18; F9a7e: $builder->add("\x73\x69\164\145\x55\163\145\162", TextType::class, ["\162\x65\x71\x75\x69\162\x65\144" => true, "\141\164\164\162" => ["\x63\x6c\x61\163\x73" => "\146\157\x72\155\55\x63\157\x6e\x74\162\x6f\x6c\x20\146\157\x72\x6d\x2d\143\157\x6e\x74\162\157\x6c\x2d\x6c\x67", "\160\154\141\143\145\x68\x6f\154\x64\x65\x72" => "\x73\x69\164\x65\55\x75\x73\x65\162"], "\x6c\x61\x62\x65\x6c" => "\x53\x69\164\145\x20\125\163\x65\162", "\143\157\x6e\163\x74\162\x61\x69\x6e\164\x73" => [new Assert\NotBlank(), new Assert\Regex("\x2f\x5e\x5b\x61\55\172\x5d\x5b\x2d\x61\x2d\x7a\60\55\71\x5f\135\53\x24\57\x69\165"), new Assert\Length(["\x6d\x69\x6e" => 3, "\155\x61\170" => 32]), new AppAssert\UniqueSystemUser()]]); goto Ba2d3; Ba2d3: $builder->add("\x73\x69\x74\145\125\x73\x65\162\120\141\x73\x73\x77\157\x72\x64", TextType::class, ["\x72\x65\x71\165\x69\x72\145\x64" => true, "\x61\164\164\162" => ["\143\154\x61\x73\x73" => "\x66\x6f\162\x6d\55\x63\157\156\x74\x72\157\154\x20\146\x6f\162\x6d\55\x63\157\x6e\164\x72\157\154\x2d\154\147"], "\154\x61\142\x65\154" => "\x53\151\164\145\40\x55\x73\145\x72\40\x50\x61\163\x73\167\157\x72\x64", "\x63\157\x6e\163\x74\x72\x61\x69\x6e\x74\x73" => [new Assert\NotBlank(), new Assert\Length(["\x6d\151\x6e" => 8, "\x6d\x61\170" => 200])]]); goto d916b; eba18: $builder->add("\x64\157\155\x61\x69\x6e\116\x61\155\x65", TextType::class, ["\162\145\x71\165\151\x72\x65\144" => true, "\141\x74\164\162" => ["\143\x6c\141\163\x73" => "\x66\x6f\162\155\55\x63\157\156\x74\162\157\x6c\x20\x66\157\x72\x6d\55\x63\x6f\156\164\x72\x6f\x6c\x2d\x6c\x67", "\x70\x6c\141\x63\145\x68\157\154\144\145\x72" => "\167\167\x77\x2e\144\x6f\x6d\x61\x69\156\x2e\x63\x6f\x6d"], "\x6c\x61\142\x65\154" => "\x44\x6f\155\141\151\x6e\x20\116\x61\x6d\145", "\143\157\x6e\163\x74\x72\x61\x69\x6e\x74\x73" => [new Assert\NotBlank(), new AppAssert\DomainName(), new AppAssert\UniqueDomainName()]]); goto F9a7e; d916b: $builder->addEventListener(FormEvents::PRE_SUBMIT, function (FormEvent $event) { goto D35e8; Fa1d6: $data["\x73\x69\x74\145\125\163\x65\x72"] = true === isset($data["\163\x69\x74\x65\125\x73\145\162"]) ? strtolower($data["\x73\x69\164\x65\x55\x73\x65\x72"]) : ''; goto f8f33; f8f33: $event->setData($data); goto F5d48; D35e8: $data = $event->getData(); goto C883d; C883d: $data["\144\x6f\x6d\x61\x69\x6e\x4e\141\155\x65"] = true === isset($data["\x64\x6f\x6d\x61\x69\x6e\x4e\141\155\145"]) ? strtolower($data["\x64\157\x6d\x61\x69\156\x4e\141\155\x65"]) : ''; goto Fa1d6; F5d48: }); goto C83d4; C83d4: } public function getName() : string { return "\143\154\x70\x5f\x73\x69\164\145\137\156\145\x77\137\163\164\x61\x74\151\143"; } }
