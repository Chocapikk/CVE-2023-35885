<?php
 namespace App\Form; use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormEvent; use Symfony\Component\HttpFoundation\RequestStack; use Symfony\Component\Form\Extension\Core\Type\TextType; use Symfony\Component\Form\Extension\Core\Type\ChoiceType; use App\Entity\FirewallRule; class AdminFirewallRuleAddType extends AbstractType { private RequestStack $requestStack; public function __construct(RequestStack $requestStack) { $this->requestStack = $requestStack; } public function buildForm(FormBuilderInterface $builder, array $options) : void { goto Aba5b; e41b2: $sourceChoices = ["\x43\165\163\x74\157\155" => '', "\x41\156\171\167\x68\x65\162\x65\x2d\x49\120\x76\x34" => "\x30\56\x30\x2e\60\x2e\x30\57\60", "\101\156\x79\x77\150\145\x72\x65\55\x49\120\x76\x36" => "\x3a\72\57\60", "\x4d\171\x20\111\x50" => $myIp]; goto df922; fd52b: $builder->addEventListener(FormEvents::PRE_SUBMIT, function (FormEvent $event) { goto b44e2; E4238: ecfcb: goto dc679; dc679: $event->setData($data); goto B1788; bda7c: $data["\160\x6f\x72\164\122\141\156\147\x65"] = implode("\x2d", array_map("\164\162\x69\155", explode("\x2d", $data["\x70\x6f\x72\x74\122\141\x6e\147\145"]))); goto E4238; C8aba: if (!(true === isset($data["\160\x6f\x72\164\122\x61\156\x67\x65"]))) { goto ecfcb; } goto bda7c; b44e2: $data = $event->getData(); goto C8aba; B1788: }); goto cfb2f; cf1b6: $myIp = $request->getClientIp(); goto e41b2; B962f: $request = $this->requestStack->getCurrentRequest(); goto cf1b6; Ff9bc: $builder->add("\164\x79\x70\145", ChoiceType::class, ["\162\145\x71\165\151\x72\145\144" => true, "\x6d\x61\160\160\x65\x64" => false, "\x61\164\x74\162" => ["\x63\x6c\x61\163\163" => "\146\x6f\x72\x6d\55\x73\x65\154\x65\x63\x74\40\x66\x6f\162\x6d\55\x73\145\x6c\145\x63\x74\55\x6c\x67"], "\154\x61\x62\145\154" => "\124\171\x70\145", "\143\150\157\x69\143\145\163" => $typeChoices, "\x64\141\x74\x61" => 22]); goto c212c; df922: $builder->add("\163\157\x75\x72\143\145\x43\x68\x6f\x69\x63\x65", ChoiceType::class, ["\162\145\161\165\x69\162\145\x64" => false, "\155\141\160\x70\x65\144" => false, "\141\164\164\162" => ["\x63\x6c\x61\x73\163" => "\146\157\162\x6d\55\x73\145\x6c\x65\x63\164\40\x66\157\x72\155\x2d\163\145\x6c\145\143\164\x2d\154\x67"], "\154\x61\142\145\154" => "\x53\157\165\x72\x63\145", "\143\150\157\151\x63\145\163" => $sourceChoices]); goto ca5fe; c212c: $builder->add("\160\x6f\162\x74\x52\141\x6e\147\145", TextType::class, ["\x72\145\x71\165\x69\162\145\144" => true, "\141\164\164\x72" => ["\x63\154\x61\163\x73" => "\146\157\x72\x6d\55\x63\x6f\156\x74\x72\157\x6c\x20\x66\x6f\x72\x6d\x2d\x63\157\x6e\x74\162\157\x6c\55\x6c\147"], "\x6c\141\x62\145\x6c" => "\x50\x6f\x72\164\40\122\141\156\147\x65", "\x64\141\x74\141" => 22]); goto B962f; ca5fe: $builder->add("\x73\x6f\165\x72\x63\145", TextType::class, ["\x72\145\x71\x75\151\x72\145\x64" => true, "\141\164\164\x72" => ["\x63\x6c\x61\x73\x73" => "\x66\x6f\162\155\x2d\143\x6f\156\x74\162\157\x6c\40\146\x6f\x72\x6d\55\143\157\156\x74\162\157\154\55\x6c\x67", "\x70\x6c\x61\x63\x65\150\x6f\x6c\144\x65\162" => "\x49\x50\x20\x6f\162\x20\103\111\104\122"], "\x6c\141\x62\x65\x6c" => "\123\157\x75\x72\143\145"]); goto afa91; Fdaf0: $firewallRuleTypes = FirewallRule::TYPES; goto F5684; F5684: foreach ($firewallRuleTypes as $portRange => $name) { $typeChoices[$name] = $portRange; A9055: } goto d8cf2; d8cf2: B8c16: goto Ff9bc; Aba5b: $typeChoices = []; goto Fdaf0; afa91: $builder->add("\x64\x65\x73\143\x72\x69\x70\x74\151\x6f\x6e", TextType::class, ["\x72\145\161\x75\151\162\x65\144" => false, "\x61\x74\164\162" => ["\143\x6c\141\163\163" => "\x66\157\x72\155\x2d\x63\x6f\x6e\x74\x72\157\x6c", "\160\154\141\x63\145\x68\x6f\154\x64\x65\162" => "\112\157\x68\156\40\104\157\x65"], "\154\141\142\145\x6c" => "\104\145\163\x63\x72\x69\x70\x74\x69\x6f\x6e"]); goto fd52b; cfb2f: } public function setDefaultOptions(OptionsResolverInterface $resolver) : void { $resolver->setDefaults(["\x64\x61\x74\141\x5f\x63\x6c\x61\x73\163" => "\101\x70\x70\x5c\105\156\164\x69\x74\x79\x5c\106\x69\x72\x65\167\141\x6c\154\122\x75\154\145"]); } public function getName() : string { return "\x63\x6c\160\x5f\x61\144\x6d\x69\x6e\x5f\146\151\x72\145\x77\x61\154\154\x5f\x72\165\154\x65"; } }
