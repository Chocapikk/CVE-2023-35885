<?php
 namespace App\Form; use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\Extension\Core\Type\TextType; use Symfony\Component\Validator\Constraints as Assert; use App\Validator\Constraints as AppAssert; class SiteNewReverseProxyType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) : void { goto b9e28; b9e28: $builder->add("\144\157\x6d\141\x69\156\116\141\155\x65", TextType::class, ["\x72\x65\161\x75\x69\x72\x65\144" => true, "\x6d\141\x70\160\x65\x64" => false, "\141\x74\x74\x72" => ["\x63\x6c\x61\x73\163" => "\x66\x6f\x72\x6d\55\143\x6f\156\x74\x72\157\154\40\x66\x6f\162\x6d\55\143\157\x6e\164\x72\157\154\55\154\147", "\x70\154\x61\143\145\x68\157\154\144\x65\x72" => "\x77\x77\x77\x2e\144\x6f\x6d\x61\x69\x6e\x2e\143\x6f\155"], "\154\x61\x62\x65\154" => "\104\157\x6d\x61\151\156\x20\116\141\x6d\145", "\143\x6f\x6e\x73\164\162\141\x69\x6e\x74\x73" => [new Assert\NotBlank(), new AppAssert\DomainName(), new AppAssert\UniqueDomainName()]]); goto c92ca; c92ca: $builder->add("\x72\x65\x76\145\162\163\145\x50\x72\157\170\x79\125\162\x6c", TextType::class, ["\162\145\161\165\151\x72\145\144" => true, "\144\x61\164\x61" => "\x68\x74\x74\x70\72\57\x2f\x31\x32\67\x2e\x30\56\60\x2e\x31\72\x38\60\60\x30", "\141\164\164\162" => ["\x63\154\x61\x73\163" => "\146\157\x72\155\55\x63\x6f\156\164\x72\157\x6c\x20\x66\x6f\162\155\x2d\143\157\156\x74\162\157\x6c\55\154\x67", "\160\x6c\x61\143\145\x68\157\x6c\144\145\x72" => "\150\x74\164\160\x3a\57\x2f\61\x32\x37\x2e\x30\x2e\x30\56\x31\72\70\x30\60\x30"], "\154\141\x62\145\154" => "\122\145\166\145\x72\163\145\x20\x50\162\157\170\x79\40\125\x72\x6c"]); goto A1d42; Dec30: $builder->add("\x73\151\164\145\x55\163\145\162\x50\x61\163\x73\167\x6f\162\144", TextType::class, ["\162\x65\161\165\151\x72\x65\144" => true, "\x61\x74\164\162" => ["\143\x6c\x61\x73\x73" => "\x66\x6f\x72\x6d\55\x63\157\156\164\x72\157\x6c\x20\x66\157\162\x6d\55\x63\157\156\x74\162\x6f\x6c\x2d\x6c\x67"], "\154\141\x62\x65\154" => "\x53\151\164\x65\x20\125\163\x65\162\x20\120\141\x73\163\167\x6f\x72\144", "\143\x6f\156\163\x74\x72\141\x69\x6e\x74\x73" => [new Assert\NotBlank(), new Assert\Length(["\155\x69\156" => 8, "\155\x61\x78" => 200])]]); goto fa629; fa629: $builder->addEventListener(FormEvents::PRE_SUBMIT, function (FormEvent $event) { goto C03f7; C03f7: $data = $event->getData(); goto Cc333; e266e: $data["\163\x69\164\145\x55\163\145\162"] = true === isset($data["\x73\x69\x74\x65\125\163\x65\x72"]) ? strtolower($data["\163\151\164\x65\x55\163\145\x72"]) : ''; goto C446c; C446c: $event->setData($data); goto a6e11; Cc333: $data["\144\x6f\x6d\x61\x69\x6e\x4e\141\x6d\145"] = true === isset($data["\144\x6f\155\141\151\x6e\116\141\155\x65"]) ? strtolower($data["\x64\x6f\155\141\x69\x6e\x4e\x61\x6d\x65"]) : ''; goto e266e; a6e11: }); goto F333b; A1d42: $builder->add("\163\x69\164\x65\x55\163\x65\x72", TextType::class, ["\x72\145\161\x75\x69\x72\x65\x64" => true, "\x61\x74\164\x72" => ["\143\x6c\x61\x73\163" => "\x66\x6f\162\155\55\143\x6f\x6e\x74\162\x6f\154\x20\x66\x6f\162\x6d\55\143\157\156\x74\162\x6f\154\x2d\x6c\147", "\x70\154\x61\143\145\150\x6f\x6c\x64\x65\162" => "\163\151\x74\x65\55\165\163\145\x72"], "\x6c\141\x62\x65\154" => "\123\x69\x74\x65\x20\125\163\145\x72", "\x63\x6f\x6e\163\164\162\x61\x69\156\x74\163" => [new Assert\NotBlank(), new Assert\Regex("\57\136\x5b\x61\55\172\x5d\x5b\x2d\x61\55\x7a\60\55\x39\x5f\135\53\44\57\x69\x75"), new Assert\Length(["\x6d\151\x6e" => 3, "\x6d\x61\170" => 32]), new AppAssert\UniqueSystemUser()]]); goto Dec30; F333b: } public function getName() : string { return "\143\x6c\160\137\x73\151\164\145\x5f\156\x65\167\137\x72\145\166\145\x72\x73\x65\x5f\160\x72\157\x78\x79"; } }
