<?php
 namespace App\Form; use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\Extension\Core\Type\TextType; use Symfony\Component\Form\Extension\Core\Type\EmailType; use Symfony\Component\Form\Extension\Core\Type\PasswordType; use Symfony\Component\Form\Extension\Core\Type\CheckboxType; use Symfony\Bridge\Doctrine\Form\Type\EntityType; use Symfony\Component\Validator\Constraints as Assert; use Doctrine\ORM\EntityManagerInterface; use App\Repository\TimezoneRepository; use App\Entity\User; use App\Entity\Timezone; class UserAdminUserCreationType extends AbstractType { private TimezoneRepository $timezoneRepository; public function __construct(EntityManagerInterface $entityManager) { $this->timezoneRepository = $entityManager->getRepository(Timezone::class); } public function buildForm(FormBuilderInterface $builder, array $options) : void { goto D0ca9; D754d: $builder->addEventListener(FormEvents::PRE_SUBMIT, function (FormEvent $event) { goto Ee32e; Daa18: $data["\154\x61\x73\x74\116\x61\155\x65"] = true === isset($data["\x6c\141\163\164\116\x61\155\145"]) ? ucfirst($data["\154\x61\163\x74\116\141\155\145"]) : ''; goto e8d3c; Bf967: $data["\x66\151\162\163\x74\x4e\x61\155\145"] = true === isset($data["\146\151\x72\163\164\x4e\x61\155\145"]) ? ucfirst($data["\146\x69\162\163\164\116\x61\x6d\x65"]) : ''; goto Daa18; Ee32e: $data = $event->getData(); goto Bf967; e8d3c: $event->setData($data); goto C406b; C406b: }); goto A2684; D0ca9: $user = $options["\x64\x61\x74\141"]; goto C506e; A2684: $builder->add("\x75\163\145\162\x4e\x61\x6d\x65", TextType::class, ["\x72\145\161\x75\151\162\x65\x64" => true, "\x61\x74\x74\162" => ["\x63\x6c\141\163\x73" => "\x66\x6f\162\x6d\x2d\143\157\x6e\x74\x72\x6f\x6c\x20\146\157\x72\x6d\55\x63\157\156\x74\162\157\154\55\154\x67", "\160\154\141\x63\x65\150\x6f\x6c\144\145\162" => "\152\157\x68\156\56\144\157\x65"], "\x6c\x61\142\145\154" => "\125\x73\145\162\x20\116\x61\155\x65"]); goto e00a5; C506e: $user->setPassword(''); goto D754d; a74a4: $builder->add("\160\x6c\141\x69\156\x50\141\x73\x73\x77\157\162\144", PasswordType::class, ["\x72\145\x71\165\x69\162\145\x64" => true, "\141\164\164\x72" => ["\x63\x6c\x61\x73\163" => "\x66\x6f\x72\x6d\55\x63\x6f\x6e\164\x72\x6f\154\40\x66\x6f\162\x6d\x2d\143\x6f\x6e\x74\162\x6f\154\55\154\147", "\x70\154\141\143\145\150\x6f\154\x64\145\x72" => "\52\52\x2a\52\52\52\x2a\52\x2a\x2a\x2a\52\x2a\52\52\52\52\52\52\52", "\141\x75\x74\157\143\x6f\x6d\x70\154\x65\164\145" => "\x6e\145\167\x2d\160\141\x73\x73\x77\157\x72\x64"], "\x6c\141\142\145\154" => "\120\x61\163\163\167\x6f\162\144", "\x65\x6d\160\164\x79\x5f\144\x61\164\141" => '', "\143\157\156\x73\164\x72\141\x69\x6e\x74\x73" => [new Assert\Length(["\155\151\x6e" => User::PASSWORD_MIN_LENGTH, "\x6d\141\170" => User::PASSWORD_MAX_LENGTH])]]); goto C5c56; b33f6: $builder->add("\141\x63\x63\x65\x70\x74\114\151\x63\145\156\x73\x65\124\x65\162\x6d\163\x50\162\x69\166\141\143\x79\x50\x6f\x6c\151\x63\171", CheckboxType::class, ["\x72\x65\161\x75\x69\162\x65\144" => true, "\155\x61\x70\160\x65\144" => false, "\141\x74\164\162" => ["\x63\154\x61\163\x73" => "\x66\157\162\x6d\x2d\143\150\145\143\153\x2d\151\156\160\165\164"], "\x6c\x61\x62\145\x6c" => "\x41\x63\x63\145\x70\x74\x20\x4c\151\143\x65\x6e\163\145\40\124\x65\162\155\x73\40\141\x6e\144\x20\x50\x72\x69\x76\x61\x63\x79\x20\x50\157\x6c\x69\x63\x79"]); goto E192d; E192d: $builder->addEventListener(FormEvents::PRE_SUBMIT, function (FormEvent $event) { goto aab63; ce095: $data["\165\163\x65\162\x4e\141\x6d\x65"] = true === isset($data["\x75\x73\145\162\x4e\x61\155\145"]) ? strtolower($data["\x75\163\x65\162\116\x61\155\145"]) : ''; goto E0ab3; aab63: $data = $event->getData(); goto ce095; E0ab3: $event->setData($data); goto C7cb2; C7cb2: }); goto da7c4; A8f77: $builder->add("\x74\151\x6d\145\x7a\157\156\145", EntityType::class, ["\x72\x65\x71\x75\x69\x72\x65\x64" => true, "\141\x74\x74\162" => ["\143\154\141\x73\x73" => "\146\x6f\162\155\x2d\163\x65\x6c\145\x63\164\40\x66\157\162\155\55\163\145\x6c\145\x63\164\x2d\154\147"], "\x6c\x61\x62\x65\154" => "\x54\x69\x6d\x65\x7a\157\156\145", "\x63\x6c\x61\163\163" => Timezone::class, "\x71\165\x65\162\x79\137\142\165\151\154\144\145\162" => function ($timezoneRepository) { return $timezoneRepository->createQueryBuilder("\x74")->orderBy("\x74\56\151\x64", "\101\123\103"); }, "\x63\150\157\x69\x63\x65\x5f\x6c\141\142\x65\x6c" => "\x6e\141\155\145"]); goto b33f6; C5c56: $timezoneRepository = $this->timezoneRepository; goto A8f77; cbad3: $builder->add("\x66\x69\x72\x73\164\116\141\x6d\145", TextType::class, ["\162\x65\x71\165\x69\162\145\x64" => true, "\141\x74\x74\x72" => ["\x63\x6c\x61\x73\x73" => "\x66\x6f\x72\x6d\x2d\143\157\x6e\x74\x72\157\x6c\40\x66\157\x72\x6d\55\143\157\x6e\x74\x72\157\154\55\x6c\x67", "\160\x6c\x61\x63\x65\x68\x6f\x6c\x64\145\x72" => "\x4a\157\150\156"], "\154\141\x62\x65\x6c" => "\x46\151\x72\163\x74\x20\116\141\155\145"]); goto E86b7; e00a5: $builder->add("\145\x6d\x61\x69\x6c", EmailType::class, ["\162\145\161\165\x69\x72\145\x64" => true, "\x61\x74\164\162" => ["\x63\x6c\x61\163\x73" => "\146\157\x72\155\x2d\143\x6f\156\164\162\x6f\154\40\146\157\162\x6d\55\143\157\x6e\x74\162\157\154\x2d\154\x67", "\160\154\x61\x63\x65\x68\157\x6c\144\x65\x72" => "\152\157\x68\x6e\100\x64\157\145\56\143\157\x6d"], "\154\141\142\x65\x6c" => "\x45\55\x4d\x61\x69\154"]); goto cbad3; E86b7: $builder->add("\154\141\163\x74\x4e\x61\155\145", TextType::class, ["\162\145\x71\x75\x69\x72\x65\x64" => true, "\x61\164\164\x72" => ["\143\154\141\x73\x73" => "\146\157\162\155\x2d\x63\157\x6e\x74\162\157\x6c\40\146\x6f\162\x6d\55\143\157\156\x74\162\x6f\154\x2d\154\x67", "\x70\154\x61\143\145\x68\x6f\x6c\x64\x65\x72" => "\104\157\x65"], "\154\x61\142\145\154" => "\114\x61\x73\x74\40\116\x61\x6d\145"]); goto a74a4; da7c4: } public function setDefaultOptions(OptionsResolverInterface $resolver) : void { $resolver->setDefaults(["\144\141\x74\x61\137\143\154\x61\x73\163" => "\x41\160\x70\x5c\105\x6e\x74\x69\164\171\134\x55\163\x65\162"]); } public function getName() : string { return "\143\x6c\160\x5f\141\144\x6d\x69\x6e\137\x75\163\145\162"; } }
