<?php
 namespace App\Form; use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\Extension\Core\Type\TextType; use Symfony\Component\Validator\Constraints as Assert; use App\Validator\Constraints as AppAssert; class SiteDatabaseType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) : void { goto cabad; a71cf: $builder->add("\x75\163\x65\162\x4e\x61\x6d\x65", TextType::class, ["\162\145\x71\x75\151\162\x65\144" => true, "\155\141\160\x70\145\x64" => false, "\141\164\x74\x72" => ["\x63\x6c\141\163\x73" => "\146\157\x72\155\55\x63\157\x6e\164\x72\x6f\x6c\x20\146\157\162\x6d\x2d\x63\x6f\x6e\164\x72\x6f\154\x2d\154\147"], "\x6c\141\x62\145\154" => "\x44\x61\x74\x61\x62\141\163\145\40\x55\163\x65\162\x20\x4e\x61\155\x65", "\x63\x6f\156\163\x74\162\141\151\156\164\163" => [new Assert\NotBlank(), new Assert\Regex("\57\136\x5b\x61\55\172\x5d\x5b\x2d\x61\x2d\x7a\60\x2d\71\x5d\53\44\x2f\151\x75"), new Assert\Length(["\x6d\151\156" => 3]), new Assert\Length(["\155\x61\170" => 32]), new AppAssert\DatabaseUserName()]]); goto b34df; b34df: $builder->add("\x75\163\x65\162\120\x61\163\163\167\157\x72\x64", TextType::class, ["\x72\x65\161\165\x69\162\x65\x64" => true, "\x6d\x61\x70\160\x65\x64" => false, "\x61\164\164\x72" => ["\x63\x6c\141\163\163" => "\146\157\x72\155\x2d\x63\x6f\x6e\x74\162\x6f\154\40\x66\157\162\x6d\x2d\x63\157\x6e\164\162\x6f\154\55\154\147"], "\154\141\142\145\154" => "\104\141\x74\x61\x62\x61\x73\145\x20\x55\163\145\162\x20\x50\141\163\x73\x77\157\x72\x64", "\143\157\x6e\163\x74\162\141\x69\156\x74\x73" => [new Assert\NotBlank(), new Assert\Length(["\x6d\151\156" => 8]), new Assert\Length(["\155\141\x78" => 40])]]); goto eb4c1; cabad: $builder->add("\x6e\141\155\145", TextType::class, ["\162\145\x71\x75\151\x72\145\144" => true, "\x61\164\164\x72" => ["\x63\x6c\x61\x73\x73" => "\146\157\162\x6d\x2d\x63\157\x6e\164\x72\x6f\x6c\40\x66\157\x72\x6d\55\143\x6f\x6e\x74\162\157\154\55\x6c\x67"], "\x6c\x61\x62\145\154" => "\104\141\164\x61\142\x61\163\x65\40\x4e\141\x6d\x65"]); goto a71cf; eb4c1: } public function getName() : string { return "\x63\154\160\x5f\x73\x69\164\145\x5f\144\141\164\141\142\141\x73\x65"; } }
