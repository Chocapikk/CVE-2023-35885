<?php
 namespace App\Form; use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormInterface; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\Extension\Core\Type\ChoiceType; use Symfony\Component\Form\Extension\Core\Type\TextType; use Symfony\Component\Form\Extension\Core\Type\EmailType; use Symfony\Component\Validator\Constraints as Assert; use App\Validator\Constraints as AppAssert; class SiteNewWordPressType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) : void { goto d8a6b; d8a6b: $builder->add("\144\157\155\x61\x69\156\116\x61\x6d\145", TextType::class, ["\x72\x65\161\165\x69\162\145\144" => true, "\141\x74\x74\162" => ["\x63\154\x61\x73\x73" => "\146\x6f\x72\x6d\x2d\x63\x6f\x6e\x74\162\x6f\154\x20\146\x6f\x72\x6d\x2d\x63\157\x6e\164\162\x6f\154\x2d\154\x67", "\160\154\x61\x63\145\150\157\154\144\x65\162" => "\167\x77\167\56\x64\157\x6d\x61\151\156\56\143\x6f\155"], "\x6c\x61\x62\x65\x6c" => "\104\157\155\x61\x69\156\40\x4e\141\155\x65", "\x63\157\x6e\x73\x74\162\x61\151\x6e\x74\x73" => [new Assert\NotBlank(), new AppAssert\DomainName(), new AppAssert\UniqueDomainName()]]); goto C5237; ef5d3: $multiSiteChoices = ["\116\x6f" => false, "\x59\145\x73" => true]; goto fbfc0; D3513: $builder->addEventListener(FormEvents::PRE_SUBMIT, function (FormEvent $event) { goto fa3b7; A6a7c: $event->setData($data); goto B3a64; fa3b7: $data = $event->getData(); goto d1b59; d1b59: $data["\144\x6f\155\x61\151\x6e\x4e\x61\155\145"] = true === isset($data["\144\x6f\x6d\141\151\x6e\116\x61\x6d\x65"]) ? strtolower($data["\x64\x6f\155\141\x69\156\x4e\141\155\x65"]) : ''; goto e9423; e9423: $data["\144\157\x6d\x61\151\x6e\x4e\x61\155\145"] = str_replace(["\150\x74\164\160\x73\72\57\57", "\150\164\164\160\72\57\57"], ['', ''], $data["\144\x6f\155\x61\151\x6e\116\x61\155\x65"]); goto A6a7c; B3a64: }); goto c4b32; a2ee6: $builder->add("\141\x64\x6d\151\156\105\155\141\151\154", EmailType::class, ["\x72\x65\161\165\151\162\x65\x64" => true, "\x61\x74\x74\x72" => ["\143\x6c\141\x73\x73" => "\146\x6f\162\155\x2d\143\157\156\164\162\157\x6c\x20\146\x6f\162\x6d\55\143\x6f\x6e\164\162\157\154\55\154\x67", "\x70\x6c\141\x63\145\x68\x6f\154\x64\x65\162" => "\152\x6f\x68\x6e\x2e\144\157\x65\100\x64\157\155\x61\151\x6e\56\x63\x6f\155"], "\x6c\x61\x62\145\154" => "\101\144\x6d\151\x6e\x20\x45\x2d\115\x61\x69\154", "\143\157\156\x73\x74\x72\x61\x69\156\164\163" => [new Assert\NotBlank(), new Assert\Email()]]); goto ef5d3; C5237: $builder->add("\163\151\x74\x65\124\151\164\154\145", TextType::class, ["\x72\x65\161\165\x69\162\x65\144" => true, "\x61\164\x74\x72" => ["\x63\x6c\x61\163\x73" => "\x66\157\x72\155\x2d\x63\x6f\x6e\x74\x72\157\154\40\146\157\162\x6d\x2d\143\157\156\x74\x72\157\x6c\55\x6c\x67", "\x70\154\x61\x63\145\150\157\x6c\x64\x65\x72" => "\x53\x69\x74\145\x20\124\x69\164\x6c\145"], "\154\141\x62\x65\154" => "\123\151\x74\145\x20\x54\151\x74\x6c\145", "\x64\141\164\141" => "\x53\151\x74\x65\40\124\x69\164\x6c\x65", "\x63\x6f\x6e\163\164\162\x61\x69\x6e\x74\163" => [new Assert\NotBlank()]]); goto edf5e; bc0d7: $builder->add("\141\144\x6d\x69\x6e\x50\x61\x73\163\167\x6f\x72\144", TextType::class, ["\x72\145\161\165\151\x72\145\144" => true, "\x61\164\164\162" => ["\x63\154\141\x73\163" => "\x66\x6f\162\x6d\55\x63\157\156\x74\x72\x6f\x6c\x20\146\157\x72\155\55\143\157\x6e\x74\162\x6f\154\x2d\154\x67"], "\x6c\141\142\x65\154" => "\101\144\155\x69\x6e\40\x50\141\163\163\167\x6f\x72\144", "\143\x6f\156\163\164\x72\141\x69\x6e\x74\x73" => [new Assert\NotBlank()]]); goto a2ee6; fbfc0: $builder->add("\x6d\x75\x6c\x74\x69\x53\x69\x74\x65", ChoiceType::class, ["\x72\145\161\165\x69\162\x65\144" => true, "\x61\x74\x74\162" => ["\143\154\141\x73\163" => "\x66\157\162\x6d\55\163\x65\x6c\145\x63\164\x20\146\x6f\162\155\x2d\163\145\154\x65\143\x74\x2d\x6c\x67"], "\x6c\141\x62\x65\154" => "\115\165\154\x74\x69\163\151\164\x65", "\x63\150\x6f\x69\x63\145\x73" => $multiSiteChoices, "\144\x61\164\x61" => false]); goto D3513; edf5e: $builder->add("\x61\144\155\151\x6e\x55\163\x65\x72\116\x61\x6d\145", TextType::class, ["\162\145\x71\x75\151\162\145\x64" => true, "\141\x74\x74\x72" => ["\x63\154\x61\163\163" => "\x66\157\x72\155\55\x63\157\x6e\x74\x72\x6f\154\x20\x66\157\162\155\55\143\157\156\x74\162\x6f\x6c\55\x6c\x67"], "\154\141\142\145\154" => "\x41\144\155\x69\156\x20\125\x73\145\x72\40\116\x61\155\x65", "\144\141\164\x61" => "\x61\x64\x6d\151\x6e", "\143\x6f\156\163\x74\x72\x61\151\x6e\164\163" => [new Assert\NotBlank(), new Assert\Length(["\155\x69\x6e" => 3])]]); goto bc0d7; c4b32: } public function getName() : string { return "\x63\154\160\x5f\163\151\164\145\137\156\x65\167\137\167\157\x72\x64\x70\162\x65\x73\163"; } }
