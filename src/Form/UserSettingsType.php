<?php
 namespace App\Form; use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Form\Extension\Core\Type\TextType; use Symfony\Component\Form\Extension\Core\Type\EmailType; use Symfony\Component\Form\Extension\Core\Type\PasswordType; use Symfony\Bridge\Doctrine\Form\Type\EntityType; use Symfony\Component\Validator\Constraints as Assert; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormEvent; use Doctrine\ORM\EntityManagerInterface; use App\Repository\TimezoneRepository; use App\Entity\User; use App\Entity\Timezone; class UserSettingsType extends AbstractType { private TimezoneRepository $timezoneRepository; public function __construct(EntityManagerInterface $entityManager) { $this->timezoneRepository = $entityManager->getRepository(Timezone::class); } public function buildForm(FormBuilderInterface $builder, array $options) : void { goto a0345; a0345: $user = $options["\x64\x61\164\x61"]; goto F28ba; F28ba: $builder->add("\x75\163\145\162\x4e\x61\155\145", TextType::class, ["\x72\x65\x71\x75\151\x72\145\x64" => true, "\141\x74\x74\162" => ["\143\154\x61\x73\163" => "\146\x6f\162\x6d\55\143\157\156\164\x72\157\154\x20\146\x6f\162\155\55\143\x6f\x6e\x74\x72\x6f\x6c\x2d\154\x67", "\144\x69\x73\x61\x62\154\145\144" => "\144\151\163\x61\x62\x6c\145\144"], "\154\x61\x62\x65\154" => "\125\163\x65\x72\40\x4e\141\x6d\145"]); goto F42f4; F42f4: $builder->add("\x65\x6d\x61\151\154", EmailType::class, ["\x72\145\x71\165\151\x72\145\x64" => true, "\141\x74\164\162" => ["\x63\x6c\141\x73\x73" => "\146\157\162\x6d\55\143\157\x6e\164\x72\157\154\x20\146\157\162\155\55\x63\157\x6e\164\x72\x6f\x6c\55\154\147"], "\x6c\x61\142\145\x6c" => "\105\55\x4d\x61\x69\154"]); goto b7b46; E2673: $builder->add("\160\x6c\141\151\x6e\120\x61\x73\163\x77\x6f\162\x64", PasswordType::class, ["\x72\x65\161\x75\x69\162\x65\x64" => false, "\x61\164\x74\x72" => ["\x63\x6c\141\x73\x73" => "\146\157\162\155\x2d\x63\x6f\x6e\x74\x72\157\154\x20\x66\157\162\x6d\x2d\x63\x6f\156\x74\162\157\154\55\x6c\x67", "\160\x6c\141\143\145\150\157\x6c\x64\x65\x72" => "\x2a\x2a\x2a\x2a\52\x2a\x2a\x2a\52\52\x2a\52\x2a\x2a\x2a\x2a\52\x2a\x2a\52", "\141\165\164\x6f\143\x6f\x6d\160\x6c\x65\164\145" => "\x6e\145\x77\55\160\x61\x73\163\167\157\x72\x64"], "\154\x61\142\x65\x6c" => "\120\141\163\163\x77\x6f\x72\x64", "\145\x6d\x70\164\171\x5f\144\141\x74\x61" => null, "\x63\x6f\156\x73\164\162\x61\x69\156\164\x73" => [new Assert\Length(["\x6d\x69\x6e" => User::PASSWORD_MIN_LENGTH, "\x6d\x61\x78" => User::PASSWORD_MAX_LENGTH])]]); goto Aad8b; c535d: $builder->add("\x74\151\x6d\145\172\x6f\x6e\145", EntityType::class, ["\162\145\161\165\151\x72\x65\144" => true, "\x61\x74\164\x72" => ["\143\154\x61\x73\163" => "\146\x6f\x72\x6d\x2d\163\145\x6c\145\x63\164\40\x66\157\162\155\55\x73\x65\154\x65\x63\164\x2d\154\x67"], "\x6c\141\142\x65\154" => "\124\151\155\x65\x7a\x6f\156\145", "\143\154\141\x73\x73" => Timezone::class, "\161\x75\x65\162\171\x5f\x62\x75\x69\x6c\144\145\162" => function ($timezoneRepository) { return $timezoneRepository->createQueryBuilder("\164")->orderBy("\x74\56\151\x64", "\101\x53\x43"); }, "\143\150\x6f\151\x63\x65\x5f\154\x61\x62\145\154" => "\156\141\155\145"]); goto B0e14; B0e14: $builder->addEventListener(FormEvents::PRE_SUBMIT, function (FormEvent $event) use($user) { goto D64b6; d7510: $data["\x66\151\x72\163\x74\116\x61\155\x65"] = true === isset($data["\x66\x69\x72\x73\164\x4e\x61\x6d\x65"]) ? ucfirst($data["\x66\151\x72\163\x74\x4e\x61\155\x65"]) : ''; goto B54b8; A3ff4: $data["\x75\163\145\162\x4e\141\155\145"] = $user->getUserName(); goto d7510; fc311: $event->setData($data); goto Abc63; B54b8: $data["\154\141\x73\x74\116\141\x6d\145"] = true === isset($data["\x6c\141\x73\164\116\141\155\x65"]) ? ucfirst($data["\154\x61\163\164\x4e\141\x6d\x65"]) : ''; goto fc311; D64b6: $data = $event->getData(); goto A3ff4; Abc63: }); goto f40b0; b7b46: $builder->add("\146\151\162\x73\164\116\x61\x6d\145", TextType::class, ["\162\x65\161\x75\151\162\145\144" => true, "\141\x74\x74\162" => ["\143\154\141\163\163" => "\x66\157\162\155\55\x63\x6f\156\164\162\157\154\40\146\x6f\x72\x6d\x2d\x63\x6f\x6e\x74\x72\x6f\x6c\x2d\154\x67"], "\154\x61\142\145\x6c" => "\x46\x69\162\x73\x74\40\x4e\141\155\x65"]); goto b168c; b168c: $builder->add("\154\x61\163\164\116\x61\x6d\145", TextType::class, ["\162\145\x71\x75\x69\x72\145\144" => true, "\141\x74\164\162" => ["\x63\x6c\141\163\x73" => "\x66\157\162\x6d\55\143\157\156\164\162\x6f\154\40\146\157\x72\155\55\143\x6f\x6e\x74\162\157\x6c\x2d\154\x67"], "\x6c\x61\142\145\x6c" => "\x4c\x61\163\164\40\x4e\x61\x6d\x65"]); goto E2673; Aad8b: $timezoneRepository = $this->timezoneRepository; goto c535d; f40b0: } public function setDefaultOptions(OptionsResolverInterface $resolver) : void { $resolver->setDefaults(["\x64\141\164\141\137\x63\154\141\x73\x73" => "\101\160\160\134\105\156\x74\151\x74\x79\x5c\125\163\145\162"]); } public function getName() : string { return "\x63\154\x70\x5f\x75\163\145\x72\137\163\x65\164\x74\151\156\147\x73"; } }
