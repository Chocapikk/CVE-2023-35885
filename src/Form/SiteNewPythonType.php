<?php
 namespace App\Form; use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\Extension\Core\Type\ChoiceType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\Extension\Core\Type\TextType; use Symfony\Component\Validator\Constraints as Assert; use Symfony\Component\Finder\Finder; use App\Validator\Constraints as AppAssert; class SiteNewPythonType extends AbstractType { private const USR_BIN_DIRECTORY = "\x2f\x75\x73\x72\57\142\x69\x6e\x2f"; public function buildForm(FormBuilderInterface $builder, array $options) : void { goto e86a6; d6fee: $builder->addEventListener(FormEvents::PRE_SUBMIT, function (FormEvent $event) { goto b9e0b; Beea0: $data["\x64\157\x6d\141\151\x6e\116\141\155\145"] = true === isset($data["\x64\x6f\155\x61\x69\x6e\116\141\x6d\x65"]) ? strtolower($data["\x64\157\155\141\x69\x6e\x4e\x61\155\145"]) : ''; goto Dab5e; E1a00: $event->setData($data); goto b5d9a; Dab5e: $data["\x73\x69\x74\x65\x55\x73\x65\162"] = true === isset($data["\163\151\x74\145\x55\163\x65\162"]) ? strtolower($data["\x73\151\x74\x65\125\x73\x65\x72"]) : ''; goto E1a00; b9e0b: $data = $event->getData(); goto Beea0; b5d9a: }); goto ccd95; De857: $builder->add("\160\171\164\x68\157\156\x56\145\162\x73\x69\157\x6e", ChoiceType::class, ["\162\x65\161\165\x69\x72\145\x64" => true, "\141\x74\x74\x72" => ["\x63\154\x61\x73\x73" => "\x66\x6f\x72\x6d\x2d\163\x65\x6c\145\143\164\40\x66\x6f\162\155\x2d\163\x65\x6c\145\143\x74\55\x6c\147"], "\x6c\x61\142\x65\x6c" => "\120\x79\x74\x68\157\156\40\126\x65\x72\163\x69\x6f\156", "\x63\x68\157\151\x63\x65\x73" => $pythonVersionChoices]); goto e3dc1; Dd3e1: $builder->add("\163\x69\x74\145\125\x73\x65\x72", TextType::class, ["\x72\x65\161\165\x69\x72\x65\x64" => true, "\155\141\x70\x70\x65\x64" => false, "\x61\x74\164\162" => ["\x63\x6c\141\x73\163" => "\x66\157\162\155\x2d\x63\157\156\x74\162\157\154\40\x66\157\x72\155\x2d\x63\x6f\x6e\164\x72\157\x6c\55\154\147", "\x70\x6c\x61\x63\x65\x68\157\x6c\144\145\x72" => "\x73\x69\164\145\55\x75\163\145\162"], "\x6c\141\142\x65\x6c" => "\123\151\164\x65\x20\125\x73\145\x72", "\143\157\156\163\x74\162\x61\151\x6e\164\x73" => [new Assert\NotBlank(), new Assert\Regex("\57\136\133\141\55\x7a\x5d\133\55\141\x2d\172\60\x2d\71\137\135\53\x24\x2f\x69\x75"), new Assert\Length(["\155\x69\156" => 3, "\155\141\170" => 32]), new AppAssert\UniqueSystemUser()]]); goto fd13c; e676e: $pythonVersionChoices = $this->getPythonVersionChoices(); goto De857; e86a6: $builder->add("\144\157\155\x61\x69\x6e\116\x61\x6d\x65", TextType::class, ["\x72\145\161\x75\151\x72\x65\144" => true, "\x6d\141\x70\160\x65\x64" => false, "\141\x74\x74\162" => ["\143\154\141\163\x73" => "\x66\x6f\162\x6d\55\143\x6f\156\164\x72\x6f\x6c\40\x66\157\x72\x6d\55\143\x6f\x6e\164\162\157\x6c\x2d\x6c\x67", "\x70\154\x61\143\145\150\157\154\x64\145\x72" => "\167\x77\167\56\144\157\x6d\141\151\156\56\143\157\x6d"], "\154\x61\x62\x65\x6c" => "\x44\x6f\x6d\x61\151\156\x20\x4e\x61\155\145", "\143\157\x6e\163\164\x72\x61\x69\156\164\x73" => [new Assert\NotBlank(), new AppAssert\DomainName(), new AppAssert\UniqueDomainName()]]); goto e676e; fd13c: $builder->add("\x73\151\164\x65\x55\163\145\x72\x50\x61\x73\x73\167\x6f\x72\144", TextType::class, ["\162\145\161\x75\151\x72\x65\x64" => true, "\x6d\141\x70\x70\x65\x64" => false, "\x61\x74\164\x72" => ["\143\x6c\x61\x73\163" => "\146\x6f\162\155\x2d\143\157\156\164\x72\157\154\x20\146\157\x72\155\x2d\143\x6f\x6e\x74\162\157\x6c\x2d\x6c\147"], "\x6c\x61\x62\x65\x6c" => "\x53\x69\164\x65\x20\125\163\145\162\x20\x50\x61\x73\163\x77\x6f\162\144", "\x63\157\156\163\x74\x72\141\151\x6e\x74\x73" => [new Assert\NotBlank(), new Assert\Length(["\155\151\x6e" => 8, "\x6d\141\x78" => 200])]]); goto d6fee; e3dc1: $builder->add("\160\x6f\162\164", TextType::class, ["\162\x65\x71\x75\151\x72\145\x64" => true, "\141\164\164\162" => ["\143\x6c\x61\163\x73" => "\146\x6f\162\x6d\55\x63\x6f\x6e\164\162\157\154\40\x66\x6f\162\x6d\x2d\143\x6f\156\164\x72\157\154\x2d\x6c\x67"], "\154\x61\142\145\x6c" => "\x41\160\x70\40\x50\157\162\164"]); goto Dd3e1; ccd95: } private function getPythonVersionChoices() : array { goto add5d; A109e: foreach ($finder as $file) { goto f00d2; e07de: ab7aa: goto dd199; e7d01: if (!(false == empty($pythonVersion) && true === is_numeric($pythonVersion) && false !== strpos($pythonVersion, "\56"))) { goto a655c; } goto dbfa4; Bcc81: a655c: goto e07de; dbfa4: $pythonVersionChoices[sprintf("\x50\x79\164\x68\157\156\x20\45\x73", $pythonVersion)] = $pythonVersion; goto Bcc81; f00d2: $pythonVersion = trim(str_replace("\160\x79\164\x68\x6f\x6e", '', $file->getFilename())); goto e7d01; dd199: } goto b3ef7; b7f9d: arsort($pythonVersionChoices, SORT_NATURAL); goto D6dc7; B97ca: cb45d: goto b7f9d; B9678: if (!$finder->hasResults()) { goto cb45d; } goto A109e; F74ad: $finder = new Finder(); goto Aaabf; Aaabf: $finder->files(); goto aa9c3; add5d: $pythonVersionChoices = []; goto F74ad; b3ef7: f4a99: goto B97ca; D6dc7: return $pythonVersionChoices; goto Abe23; aa9c3: $finder->name(["\x70\171\164\x68\x6f\x6e\52"]); goto B243d; B243d: $finder->in(self::USR_BIN_DIRECTORY); goto B9678; Abe23: } public function getName() : string { return "\143\x6c\x70\x5f\163\151\x74\x65\137\156\145\167\x5f\160\x79\x74\x68\157\156"; } }
