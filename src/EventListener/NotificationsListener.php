<?php
 namespace App\EventListener; use Symfony\Component\EventDispatcher\EventSubscriberInterface; use Symfony\Component\Console\ConsoleEvents; use Symfony\Component\HttpKernel\KernelEvents; use App\Entity\Manager\NotificationManager; use App\Notification\NotificationQueue; use App\Service\Logger; class NotificationsListener implements EventSubscriberInterface { private NotificationManager $notificationManager; private Logger $logger; public function __construct(NotificationManager $notificationManager, Logger $logger) { $this->notificationManager = $notificationManager; $this->logger = $logger; } public function onTerminate() : void { goto fd60a; fd60a: $queuedNotifications = NotificationQueue::getQueuedNotifications(); goto cc204; acc2f: try { foreach ($queuedNotifications as $notification) { $this->notificationManager->updateNotification($notification); B72f1: } F31dc: } catch (\Exception $e) { $this->logger->exception($e); } goto B86d6; cc204: if (!count($queuedNotifications)) { goto a57f0; } goto acc2f; B86d6: a57f0: goto Ff836; Ff836: } public static function getSubscribedEvents() : array { return [KernelEvents::TERMINATE => [["\x6f\x6e\124\x65\x72\x6d\151\x6e\x61\x74\x65", 50]], ConsoleEvents::TERMINATE => [["\x6f\x6e\124\x65\x72\x6d\151\x6e\x61\164\145", 50]]]; } }
