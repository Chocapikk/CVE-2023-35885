<?php
 namespace App\Controller; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\HttpFoundation\RedirectResponse; use Symfony\Component\HttpFoundation\Response; use Symfony\Contracts\Translation\TranslatorInterface; use Symfony\Bundle\FrameworkBundle\Controller\AbstractController as BaseController; use Symfony\Component\Form\Form; use App\Service\Logger; use App\Util\Retry; class Controller extends BaseController { protected array $formErrors = []; protected Logger $logger; protected TranslatorInterface $translator; public function __construct(TranslatorInterface $translator, Logger $logger) { $this->translator = $translator; $this->logger = $logger; } protected function getErrorMessages(Form $form) : array { goto F1303; F0336: foreach ($formChildren as $child) { goto E2967; A1202: de8bc: goto Cd6fd; f1e6d: $childErrors = $child->getErrors(true); goto D4a5b; E2967: if (!(false === $child->isValid())) { goto dec6e; } goto f1e6d; d8895: c9192: goto c4648; Cd6fd: dec6e: goto d8895; D4a5b: foreach ($childErrors as $childError) { goto Ffecb; af4f1: $message = $childError->getMessage(); goto ebf6f; Ffecb: $label = $this->translator->trans($child->getConfig()->getOption("\154\x61\142\145\154")); goto d8845; D59f5: $message = sprintf("\x25\x73\x3a\40\45\163", $label, $childError->getMessage()); goto e0e07; a76d4: C7d60: goto D59f5; ebf6f: goto B6b2b; goto a76d4; e0e07: B6b2b: goto e780f; e780f: $errors[] = $message; goto Cdabb; Cdabb: Afb5a: goto Ef377; d8845: if ($label) { goto C7d60; } goto af4f1; Ef377: } goto A1202; c4648: } goto Bd497; e4bd7: return $errors; goto D9992; F5a4a: $formErrors = $form->getErrors(); goto b4c04; b4c04: if (!count($formErrors)) { goto c1ef4; } goto c8e73; F1303: $errors = []; goto Ea6f5; Ea6f5: $formChildren = $form->all(); goto F5a4a; c8e73: foreach ($formErrors as $formError) { $errors[] = $formError->getMessage(); b7623: } goto f35cd; A91b0: c1ef4: goto F0336; f35cd: e0e65: goto A91b0; Bd497: eb7fc: goto e4bd7; D9992: } protected function redirectToReferer(Request $request) : Response { $referer = $request->headers->get("\x72\145\146\145\162\x65\162"); return new RedirectResponse($referer); } protected function retry(callable $fn, $retries = 2, $delay = 3) { return Retry::retry($fn, $retries, $delay); } }
