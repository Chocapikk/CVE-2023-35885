<?php
 namespace App\Controller; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\Validator\Constraints as Assert; use Symfony\Component\Validator\Validation; use Symfony\Component\Validator\ConstraintViolationList; use App\Entity\Manager\UserManager; use App\Entity\Manager\TimezoneManager; use App\Api\Error as ApiError; use App\Entity\User; class ApiController extends Controller { public function test(Request $request) : Response { return $this->json([]); } public function createUser(Request $request, UserManager $userManager, TimezoneManager $timezoneManager) : Response { try { goto F004f; bb74d: if (!(false === is_null($timezoneEntity))) { goto f94a1; } goto cb98c; F004f: $payload = $request->toArray(); goto bd564; e02ec: goto E0b1e; goto A9767; A6a36: $user->setUserName($userName); goto C6f6f; aa085: $validator = $this->get("\166\141\154\x69\144\141\x74\157\162"); goto e4256; bd564: $role = $payload["\162\x6f\x6c\x65"] ?? null; goto Ab4b3; e4256: $metadata = $validator->getMetadataFor($user); goto e666e; aa57d: $user->setPassword($password); goto ec7cf; f4e1e: $email = $payload["\145\155\141\151\x6c"] ?? null; goto c41ba; Ab4b3: $userName = $payload["\x75\163\x65\x72\116\x61\155\145"] ?? null; goto b06fa; E04bf: $lastName = $payload["\154\141\x73\164\x4e\x61\x6d\145"] ?? null; goto f4e1e; c41ba: $password = $payload["\x70\x61\x73\163\167\x6f\162\144"] ?? null; goto ebe96; Da845: $user = $userManager->createEntity(); goto e967f; ebe96: $status = isset($payload["\x73\x74\x61\x74\x75\163"]) && 1 == $payload["\x73\x74\x61\x74\x75\x73"] ? User::STATUS_ACTIVE : User::STATUS_NOT_ACTIVE; goto B87c3; ec7cf: $user->setPlainPassword($password); goto Ffd88; e666e: $metadata->addPropertyConstraint("\160\x61\163\163\167\157\162\144", new Assert\Length(["\155\x69\x6e" => User::PASSWORD_MIN_LENGTH, "\155\x61\x78" => User::PASSWORD_MAX_LENGTH])); goto dc5e3; B74c6: return $this->renderViolations($violations); goto f33d5; dc5e3: $violations = $validator->validate($user); goto F8396; e967f: $user->setRole($role); goto A6a36; A9767: C760a: goto B74c6; b06fa: $firstName = $payload["\x66\x69\162\x73\x74\116\x61\155\145"] ?? null; goto E04bf; F8396: if (count($violations) > 0) { goto C760a; } goto Fa73b; e0d78: $timezoneEntity = $timezoneManager->findOneByName($timezone); goto bb74d; C6f6f: $user->setFirstName($firstName); goto ed80c; f24af: return $this->json($data); goto e02ec; Fa73b: $userManager->updateUser($user); goto ef791; ef791: $data = ["\x75\163\x65\x72" => ["\x69\x64" => $user->getId(), "\x75\163\145\162\116\x61\155\x65" => $user->getUserName(), "\146\151\x72\x73\x74\x4e\141\155\145" => $user->getFirstName(), "\x6c\x61\163\164\116\141\155\x65" => $user->getLastName(), "\x65\155\141\151\154" => $user->getEmail(), "\163\x74\x61\x74\x75\x73" => (int) $user->getStatus(), "\x74\x69\155\x65\172\157\156\x65" => (string) $user->getTimezone()]]; goto f24af; Ffd88: $user->setStatus($status); goto e0d78; ed80c: $user->setLastName($lastName); goto f17cd; cb98c: $user->setTimezone($timezoneEntity); goto fd9a2; f33d5: E0b1e: goto bf061; B87c3: $timezone = $payload["\164\151\x6d\x65\172\157\156\145"] ?? null; goto Da845; fd9a2: f94a1: goto aa085; f17cd: $user->setEmail($email); goto aa57d; bf061: } catch (\Exception $exception) { goto Ccbb6; Fded0: return $this->returnErrors([$apiError]); goto F5ca2; Bb24f: $apiError->setMessage($exception->getMessage()); goto Fded0; Ccbb6: $apiError = new ApiError(); goto Bb24f; F5ca2: } } private function returnErrors(array $apiErrors, $status = Response::HTTP_BAD_REQUEST) : Response { goto D954e; Acb32: foreach ($apiErrors as $apiError) { goto bb575; ba20c: c3d25: goto cec40; bb575: $error = ["\155\145\163\163\141\x67\145" => $apiError->getMessage()]; goto B014c; f150b: foreach ($data as $key => $value) { $error[$key] = $value; b239e: } goto c3dd9; B014c: $data = $apiError->getData(); goto f150b; c3dd9: B1b7c: goto Aca0d; Aca0d: $errors[] = $error; goto ba20c; cec40: } goto Fa1be; Fa1be: Ecd73: goto d84d0; D954e: $errors = []; goto Acb32; d84d0: return $this->json(["\x65\162\162\157\x72\x73" => $errors], $status); goto c956e; c956e: } private function renderViolations(ConstraintViolationList $violations) : Response { goto B6e0c; D5e79: foreach ($violations as $violation) { goto dc80f; b5af0: $apiError->setMessage($violation->getMessage()); goto E8cfd; Cb961: $apiErrors[] = $apiError; goto Eda70; Eda70: Eea41: goto Ebcc7; E8cfd: $apiError->setData("\x70\162\x6f\160\x65\x72\x74\x79", $violation->getPropertyPath()); goto Cb961; dc80f: $apiError = new ApiError(); goto b5af0; Ebcc7: } goto Efe90; E1625: return $this->returnErrors($apiErrors); goto bb84d; B6e0c: $apiErrors = []; goto D5e79; Efe90: b1d4d: goto E1625; bb84d: } }
