<?php
 namespace App\Vultr; use GuzzleHttp\Client as HttpClient; use GuzzleHttp\Psr7\Request; use GuzzleHttp\Psr7\Response; use App\CloudPanel\Vultr\Instance; use App\Vultr\Instance as VultrInstance; use App\Util\HumanFileSize as HumanFileSizeUtil; use App\Util\Retry; class Client { const HTTP_CLIENT_TIMEOUT = 30; const API_ENDPOINT = "\x68\x74\164\160\x73\x3a\x2f\x2f\x61\x70\151\56\x76\x75\x6c\164\x72\x2e\x63\157\155\x2f\x76\x32\x2f"; const META_DATA_ENDPOINT = "\x68\164\x74\160\72\x2f\x2f\61\x36\71\x2e\62\65\64\x2e\61\x36\x39\56\62\65\x34\57"; private ?HttpClient $httpClient = null; private ?HttpClient $metaDataHttpClient = null; private ?string $apiKey = null; private ?Instance $vultrInstance = null; private ?VultrInstance $instance = null; private array $instanceData = []; private array $snapshots = []; public function setVultrInstance(Instance $vultrInstance) : void { $this->vultrInstance = $vultrInstance; } public function getVultrInstance() : ?Instance { return $this->vultrInstance; } public function setApiKey(string $apiKey) : void { $this->apiKey = $apiKey; } public function getApiKey() : ?string { return $this->apiKey; } public function createSnapshot(string $description) : void { goto A1fd6; F672b: E9e74: goto A0d27; A1fd6: $instance = $this->getInstance(); goto F7de4; Effe4: if (!(201 != $response->getStatusCode())) { goto E9e74; } goto F6ed5; F7de4: $instanceId = $instance->getId(); goto E5c4b; E5c4b: $requestUrl = sprintf("\45\x73\x2f\163\x6e\141\x70\163\150\x6f\164\x73", rtrim(self::API_ENDPOINT, "\57")); goto dde24; E8d5e: $response = $httpClient->post($requestUrl, ["\x62\x6f\x64\171" => json_encode($data)]); goto Effe4; F6ed5: throw new \Exception(sprintf("\x53\156\141\160\163\x68\x6f\164\x20\x63\162\145\x61\x74\x69\157\x6e\x20\x66\x61\151\154\145\144\x2c\x20\163\x74\x61\164\x75\163\x20\x63\x6f\144\x65\72\x20\45\x73\x20\x2e", $response->getStatusCode())); goto F672b; dde24: $httpClient = $this->getHttpClient(); goto d0a30; d0a30: $data = ["\151\156\x73\164\x61\156\143\145\137\151\144" => $instanceId, "\x64\145\163\x63\x72\151\160\x74\151\x6f\x6e" => $description]; goto E8d5e; A0d27: } public function getInstanceId() : ?string { goto e858a; B245a: return $instanceId; goto B879f; e858a: $instance = $this->getInstance(); goto a8d21; a8d21: $instanceId = $instance->getId(); goto B245a; B879f: } public function getInstance() : ?VultrInstance { goto f185f; c89a8: $mainIp = $instanceData["\155\x61\151\x6e\x5f\151\x70"] ?? ''; goto C6470; E3d6d: $this->instance->setInternalIp($internalIp); goto b386c; Bd08d: $id = $instanceData["\151\x64"] ?? ''; goto fb51b; fc932: $status = $instanceData["\163\164\141\164\165\x73"] ?? ''; goto C829c; b386c: ef25f: goto A33b1; D8876: $this->instance->setId($id); goto Ac9e0; f73b9: $disk = $instanceData["\144\151\163\x6b"] ?? ''; goto c89a8; fb51b: $os = $instanceData["\x6f\x73"] ?? ''; goto d6ed9; C95b8: $this->instance->setMainIp($mainIp); goto f9bec; b5481: $this->instance = new VultrInstance(); goto D8876; Ac9e0: $this->instance->setOs($os); goto abc43; dc517: $internalIp = $instanceData["\x69\156\x74\x65\x72\x6e\x61\154\137\151\160"] ?? ''; goto b5481; C829c: $label = $instanceData["\154\x61\x62\x65\x6c"] ?? ''; goto dc517; d6ed9: $ram = $instanceData["\x72\141\155"] ?? ''; goto f73b9; a99c2: if (!(false === empty($instanceData))) { goto ef25f; } goto Bd08d; abc43: $this->instance->setRam($ram); goto f45c1; dd25d: $this->instance->setLabel($label); goto E3d6d; A280d: $this->instance->setStatus($status); goto dd25d; f185f: $instanceData = $this->getInstanceData(); goto a99c2; C6470: $region = $instanceData["\x72\x65\147\151\x6f\x6e"] ?? ''; goto fc932; f45c1: $this->instance->setDisk($disk); goto C95b8; A33b1: return $this->instance; goto Aafcf; f9bec: $this->instance->setRegion($region); goto A280d; Aafcf: } public function getInstanceData() : array { goto a45a3; A0531: if (!(200 == $responseStatusCode)) { goto f69f2; } goto cf735; Ee441: Ba2cf: goto D7578; afef3: return $this->instanceData; goto b1db0; C5324: C1da3: goto afef3; D7578: f69f2: goto C5324; Ab575: $requestUrl = sprintf("\45\163\x2f\151\x6e\x73\164\141\156\x63\x65\x73\77\x6d\141\151\156\x5f\x69\x70\75\45\x73", rtrim(self::API_ENDPOINT, "\x2f"), $ipv4PublicIp); goto f9791; E3d7e: if (!(true === isset($responseData["\151\156\x73\164\x61\x6e\143\145\x73"][0]) && true === is_array($responseData["\151\156\163\x74\x61\156\x63\145\x73"][0]))) { goto Ba2cf; } goto b2e5f; F51c1: $httpClient = $this->getHttpClient(); goto A267c; a45a3: if (!(true === empty($this->instanceData))) { goto C1da3; } goto f298d; Ae301: $responseStatusCode = $response->getStatusCode(); goto A0531; cf735: $responseData = json_decode((string) $response->getBody(), true); goto E3d7e; b2e5f: $this->instanceData = $responseData["\x69\156\163\164\x61\156\143\x65\163"][0]; goto Ee441; f9791: $request = new Request("\x47\105\x54", $requestUrl); goto F51c1; f298d: $ipv4PublicIp = $this->vultrInstance->getIpv4PublicIp(); goto Ab575; A267c: $response = $this->retry(function () use($httpClient, $request) { $response = $httpClient->send($request); return $response; }); goto Ae301; b1db0: } public function getSnapshots() : array { goto e6721; F90bd: $request = new Request("\x47\x45\x54", $requestUrl); goto Cbfcd; d4562: $response = $this->retry(function () use($httpClient, $request) { $response = $httpClient->send($request); return $response; }); goto c274f; e6721: if (!(true === empty($this->snapshots))) { goto B7554; } goto A758e; df595: return $this->snapshots; goto e8644; C2e93: usort($this->snapshots, function ($a, $b) { return $a->getCreatedAt() < $b->getCreatedAt(); }); goto be963; C079f: d69a2: goto a9f21; f7dfa: if (!(true === isset($responseData["\163\156\141\x70\x73\150\157\164\x73"]) && true === is_array($responseData["\163\156\x61\160\x73\150\x6f\x74\163"]))) { goto D62eb; } goto c5424; E1499: Dd98d: goto C2e93; a9f21: B7554: goto df595; c5424: $instanceId = $this->getInstanceId(); goto f945c; Dbb14: $responseData = json_decode((string) $response->getBody(), true); goto f7dfa; A758e: $requestUrl = sprintf("\x25\163\57\163\156\x61\160\x73\x68\x6f\164\x73\x3f\160\x65\162\x5f\x70\141\147\x65\75\65\x30\60", rtrim(self::API_ENDPOINT, "\57")); goto F90bd; C464a: if (!(200 == $responseStatusCode)) { goto d69a2; } goto Dbb14; c274f: $responseStatusCode = $response->getStatusCode(); goto C464a; f945c: foreach ($responseData["\x73\x6e\141\x70\x73\x68\x6f\164\x73"] as $snapshotData) { goto c8584; ccaad: $this->snapshots[] = $snapshot; goto Fefa7; d15d8: $description = $snapshotData["\144\x65\163\x63\x72\x69\x70\164\x69\x6f\156"] ?? ''; goto Ac43e; b9c2a: $snapshot->setDescription($description); goto db39b; a20d3: $snapshot->setStatus($status); goto ccaad; Ee1a3: if (!(true == str_contains($description, $instanceId))) { goto F3847; } goto ff3b9; C8da1: $compressedSize = $snapshotData["\143\157\x6d\x70\162\145\163\x73\x65\x64\137\163\x69\172\145"] ?? 0; goto C6914; d21c6: Cd4ad: goto e6e6c; Ccf74: $snapshot->setCompressedSize($compressedSize); goto a20d3; ff3b9: $snapshot = new Snapshot(); goto B4dad; db39b: if (!(Snapshot::STATUS_COMPLETE == $status)) { goto B32f0; } goto eee72; D75e8: $snapshot->setCreatedAt($createdAt); goto b9c2a; Fefa7: F3847: goto d21c6; eee72: $compressedSize = HumanFileSizeUtil::convert($compressedSize, "\x47\102", 0); goto eb962; c8584: $id = $snapshotData["\151\144"] ?? ''; goto f7c94; B4dad: $snapshot->setId($id); goto D75e8; C6914: $status = $snapshotData["\163\x74\x61\164\x75\x73"] ?? ''; goto Ee1a3; Bca60: $snapshot->setSize($size); goto Ccf74; Ac43e: $size = $snapshotData["\x73\151\x7a\x65"] ?? 0; goto C8da1; eb962: B32f0: goto Bca60; f7c94: $createdAt = true === isset($snapshotData["\144\x61\x74\145\137\x63\162\145\141\164\145\144"]) ? new \DateTime($snapshotData["\144\141\164\x65\x5f\143\x72\145\141\x74\x65\x64"]) : ''; goto d15d8; e6e6c: } goto E1499; Cbfcd: $httpClient = $this->getHttpClient(); goto d4562; be963: D62eb: goto C079f; e8644: } public function getSnapshot($id) : ?Snapshot { goto A9c18; A9c18: $requestUrl = sprintf("\45\163\x2f\163\156\141\160\x73\x68\157\164\163\x2f\45\x73", rtrim(self::API_ENDPOINT, "\x2f"), $id); goto eeb52; b3354: $description = $snapshotData["\144\x65\x73\x63\162\x69\160\164\151\x6f\x6e"] ?? ''; goto C9c4c; B5df4: $snapshot->setSize($size); goto e9286; B3fde: $responseStatusCode = $response->getStatusCode(); goto b536b; d5021: $httpClient = $this->getHttpClient(); goto d8b28; ffc4a: $status = $snapshotData["\x73\164\x61\x74\x75\163"] ?? ''; goto Bfd82; cec8e: $compressedSize = $snapshotData["\x63\x6f\x6d\x70\x72\145\x73\163\x65\x64\137\163\x69\x7a\145"] ?? 0; goto ffc4a; C9c4c: $size = $snapshotData["\x73\151\172\145"] ?? 0; goto cec8e; e9235: $snapshot->setId($id); goto A5890; be267: $snapshot->setStatus($status); goto B3294; A5890: $snapshot->setCreatedAt($createdAt); goto A2939; d170c: $createdAt = true === isset($snapshotData["\x64\141\x74\x65\137\x63\162\145\x61\x74\145\x64"]) ? new \DateTime($snapshotData["\144\141\x74\145\137\x63\x72\x65\x61\x74\x65\x64"]) : ''; goto b3354; Af4a7: if (!(Snapshot::STATUS_COMPLETE == $status)) { goto F0aed; } goto C86d5; aac42: if (!(200 == $responseStatusCode)) { goto Dfb20; } goto f51df; Ace2b: $snapshotData = $responseData["\163\156\141\x70\163\150\x6f\x74"]; goto f2d07; f51df: $responseData = json_decode((string) $response->getBody(), true); goto e1b50; f2d07: $id = $snapshotData["\x69\144"] ?? ''; goto d170c; Bfd82: $snapshot = new Snapshot(); goto e9235; d8b28: $response = $this->retry(function () use($httpClient, $request) { $response = $httpClient->send($request); return $response; }); goto B3fde; Feda0: F0aed: goto B5df4; b536b: $snapshot = null; goto aac42; c8e0d: Dfb20: goto b9190; b9190: return $snapshot; goto f47fa; e1b50: if (!(true === isset($responseData["\163\x6e\141\160\x73\x68\x6f\x74"]) && true === is_array($responseData["\163\156\x61\x70\x73\150\x6f\x74"]))) { goto Daed1; } goto Ace2b; B3294: Daed1: goto c8e0d; A2939: $snapshot->setDescription($description); goto Af4a7; eeb52: $request = new Request("\107\105\x54", $requestUrl); goto d5021; C86d5: $compressedSize = HumanFileSizeUtil::convert($compressedSize, "\107\x42", 0); goto Feda0; e9286: $snapshot->setCompressedSize($compressedSize); goto be267; f47fa: } public function deleteSnapshot($id) : Response { goto A3a56; d04e5: $request = new Request("\104\x45\114\x45\x54\105", $requestUrl); goto A9702; A3a56: $requestUrl = sprintf("\x25\163\57\163\156\x61\160\163\150\x6f\x74\163\x2f\x25\163", rtrim(self::API_ENDPOINT, "\57"), $id); goto d04e5; E6016: return $response; goto F594e; A9702: $httpClient = $this->getHttpClient(); goto Ff156; Ff156: $response = $this->retry(function () use($httpClient, $request) { $response = $httpClient->send($request); return $response; }); goto E6016; F594e: } public function getMetaDataInstanceId() : ?string { $instanceId = $this->getMetaDataValue("\x6c\x61\x74\145\163\164\57\155\145\x74\141\55\144\141\x74\141\57\x69\x6e\x73\x74\141\156\x63\145\x2d\166\x32\55\151\144"); return $instanceId; } public function getMetaDataIpv4PublicIp() : ?string { $ipv4PublicIp = $this->getMetaDataValue("\154\141\x74\145\163\164\57\155\145\164\141\55\144\141\x74\141\57\160\x75\142\x6c\x69\x63\x2d\x69\x70\166\64"); return $ipv4PublicIp; } public function getMetaDataRegion() : ?string { $region = $this->getMetaDataValue("\x76\x31\x2f\162\x65\147\x69\157\156\57\162\x65\x67\151\x6f\x6e\x63\157\x64\145"); return $region; } private function getMetaDataValue($path) : ?string { goto Fea86; e84a6: $response = $this->retry(function () use($metaDataHttpClient, $request) { $response = $metaDataHttpClient->send($request); return $response; }); goto cf7a2; B286c: $request = new Request("\x47\x45\x54", $requestUrl); goto e7ec8; e99fe: $responseData = ''; goto C36f3; Fea86: $requestUrl = sprintf("\x25\x73\x2f\x25\x73", rtrim(self::META_DATA_ENDPOINT, "\x2f"), $path); goto B286c; e7ec8: $metaDataHttpClient = $this->getMetaDataHttpClient(); goto e84a6; C36f3: if (!(200 == $responseStatusCode)) { goto e39a7; } goto a23ec; Ff465: e39a7: goto Ab2fd; Ab2fd: return $responseData; goto bedd1; cf7a2: $responseStatusCode = $response->getStatusCode(); goto e99fe; a23ec: $responseData = trim((string) $response->getBody()); goto Ff465; bedd1: } public function unsetHttpClient() : void { $this->httpClient = null; } private function getMetaDataHttpClient() : HttpClient { goto ef4ee; B05b8: $config = ["\x74\x69\x6d\145\x6f\x75\x74" => self::HTTP_CLIENT_TIMEOUT, "\166\145\162\151\146\171" => false]; goto E8af9; E8af9: $this->metaDataHttpClient = new HttpClient($config); goto Cb1ad; ef4ee: if (!(true === is_null($this->metaDataHttpClient))) { goto e1868; } goto B05b8; D5e63: return $this->metaDataHttpClient; goto c04ec; Cb1ad: e1868: goto D5e63; c04ec: } private function getHttpClient() : HttpClient { goto abf2b; A4cde: e9bb9: goto fb248; fb248: return $this->httpClient; goto f54e6; C2ff8: $this->httpClient = new HttpClient($config); goto A4cde; abf2b: if (!(true === is_null($this->httpClient))) { goto e9bb9; } goto aba12; E4210: $config = ["\x74\x69\155\145\x6f\165\164" => self::HTTP_CLIENT_TIMEOUT, "\166\145\x72\x69\x66\171" => false, "\150\145\x61\x64\145\x72\x73" => ["\103\157\x6e\164\x65\x6e\164\55\124\x79\160\x65" => "\x61\160\160\154\x69\x63\141\164\x69\157\156\x2f\x6a\x73\x6f\156", "\x41\x75\164\150\x6f\162\x69\172\x61\164\151\x6f\156" => sprintf("\102\145\141\162\x65\162\x20\45\x73", $apiKey)]]; goto C2ff8; aba12: $apiKey = $this->getApiKey(); goto E4210; f54e6: } private function retry(callable $fn, $retries = 1, $delay = 3) { return Retry::retry($fn, $retries, $delay); } }
