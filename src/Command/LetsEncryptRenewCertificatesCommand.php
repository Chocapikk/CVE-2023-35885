<?php
 namespace App\Command; use Symfony\Component\Console\Input\InputInterface; use Symfony\Component\Console\Output\OutputInterface; use App\Command\SiteCommand as SiteCommand; use App\Site\Ssl\DistinguishedName; use App\Site\Ssl\Generator\RsaKeyGenerator; use App\Site\Ssl\Generator\CsrGenerator; use App\Site\Ssl\PrivateKey; use App\Site\Ssl\LetsEncryptClient; use App\Site\Ssl\LetsEncrypt\DomainValidationException; use App\Entity\Certificate as CertificateEntity; use App\Entity\Notification; use App\Notification\NotificationQueue; class LetsEncryptRenewCertificatesCommand extends SiteCommand { const RENEW_DAYS_BEFORE_EXPIRATION = 7; protected function configure() : void { $this->setName("\154\x65\x74\x73\x2d\145\x6e\x63\162\171\x70\x74\x3a\162\145\x6e\145\167\x3a\143\x65\162\x74\x69\x66\x69\143\141\x74\145\x73"); $this->setDescription("\x63\154\x70\x63\x74\154\x20\x6c\x65\164\x73\55\145\156\143\x72\171\160\x74\x3a\x72\145\x6e\x65\167\x3a\143\x65\x72\x74\x69\x66\x69\143\141\164\x65\163"); } protected function execute(InputInterface $input, OutputInterface $output) : int { try { goto Fe9a9; Da480: foreach ($siteEntities as $siteEntity) { goto Feebb; d4271: Fc42b: goto a2c87; Feebb: $certificateEntity = $siteEntity->getCertificate(); goto Dea45; Dea45: if (!(CertificateEntity::TYPE_LETS_ENCRYPT == $certificateEntity->getType())) { goto d42d6; } goto d11f8; E4493: d42d6: goto d4271; d11f8: $this->renewCertificate($output, $certificateEntity); goto E4493; a2c87: } goto de8c4; f99e8: if (!count($siteEntities)) { goto Aafe0; } goto Da480; F9d53: Aafe0: goto C064c; Fe9a9: $siteEntities = $this->siteEntityManager->findAll(); goto f99e8; C064c: return SiteCommand::SUCCESS; goto Ef3ae; de8c4: bee2d: goto F9d53; Ef3ae: } catch (\Exception $e) { goto c6598; A4ee0: $output->writeln(sprintf("\74\145\x72\x72\157\162\x3e\45\x73\x3c\57\x65\162\162\x6f\162\x3e", $errorMessage)); goto d004d; d004d: return SiteCommand::FAILURE; goto dc34b; c6598: $errorMessage = $e->getMessage(); goto A4ee0; dc34b: } } private function renewCertificate(OutputInterface $output, CertificateEntity $certificateEntity) { goto f90d4; cd06a: $expiresAt = $certificateEntity->getExpiresAt(); goto aeca2; d3dcf: if (!($daysToExpire <= self::RENEW_DAYS_BEFORE_EXPIRATION)) { goto e6b8e; } goto ee8ba; Cbdc5: e6b8e: goto e8cac; aeca2: $daysToExpire = round(($expiresAt->getTimestamp() - $now->getTimestamp()) / 86400, 0); goto d3dcf; f90d4: $now = new \DateTime("\x6e\157\167"); goto cd06a; ee8ba: try { goto cc572; b9cd4: $letsEncryptClient = new LetsEncryptClient($privateKey); goto a679d; df550: $siteUpdater->createLetsEncryptChallengeFiles($certificateOrder); goto F1bc9; b3535: $site = $this->getSite($domainName); goto B216a; D90d1: $letsEncryptPrivateKey = $this->getConfigValue("\154\145\137\x70\162\x69\166\x61\x74\x65\137\153\145\171"); goto A7a0c; e2d25: $rsaKeyGenerator = new RsaKeyGenerator(); goto A9cc6; ea196: cedeb: goto f7d83; B3897: $certificate = $letsEncryptClient->finalizeOrder($certificateOrder, $privateKey, $csr); goto Ce554; D1fcb: $siteUpdater->deleteLetsEncryptChallengeDirectory(); goto df550; B949e: if (true === empty($validationErrors)) { goto a060d; } goto b86af; A4624: $certificateEntity->setPrivateKey($certificate->getPrivateKey()); goto B391a; a9eea: $certificateOrder = $letsEncryptClient->requestOrder($domains); goto b2441; b3ec5: $siteUpdater->installCertificate($certificateEntity); goto e6484; B216a: $domains = $certificateEntity->getDomains(); goto D90d1; Dbff7: $this->siteEntityManager->updateEntity($siteEntity); goto e92ce; b2441: $siteUpdater = $this->getSiteUpdater($site); goto D1fcb; e92ce: $renewingSuccessMessage = sprintf("\x43\145\x72\x74\151\x66\x69\143\x61\x74\145\x20\162\x65\x6e\145\x77\151\156\147\x20\146\x6f\x72\40\x74\150\145\x20\144\157\155\x61\x69\156\40\x22\x25\163\42\40\x77\x61\163\40\163\x75\143\x63\145\x73\163\x66\165\154\56", $domainName); goto dd082; b86af: $domainValidationException = new DomainValidationException("\104\x6f\x6d\141\151\x6e\40\x76\x61\154\x69\x64\x61\164\x69\157\x6e\40\146\141\151\154\145\144"); goto A9614; dd082: $output->writeln(sprintf("\74\x69\156\x66\157\x3e\45\x73\x3c\x2f\151\156\146\157\x3e", $renewingSuccessMessage)); goto ea196; c82fe: goto cedeb; goto fe102; A93ac: $distinguishedName = new DistinguishedName($commonName, $distinguishedNameDomains); goto e2d25; C29da: $csrGenerator = new CsrGenerator($privateKey, $distinguishedName); goto e28eb; A9614: $domainValidationException->setValidationErrors($validationErrors); goto df3fd; A9cc6: $privateKey = $rsaKeyGenerator->generatePrivateKey(); goto C29da; F1bc9: $validationErrors = $letsEncryptClient->validateDomains($certificateOrder); goto B949e; e28eb: $csr = $csrGenerator->generate(); goto B3897; df3fd: throw $domainValidationException; goto c82fe; C4146: $certificateEntity->setCertificateChain($certificate->getCertificateChain()); goto b3ec5; a679d: $letsEncryptClient->registerAccount(); goto a9eea; d5a73: $domainName = $siteEntity->getDomainName(); goto b3535; e6484: $siteEntity->setCertificate($certificateEntity); goto Dbff7; A7a0c: $privateKey = new PrivateKey($letsEncryptPrivateKey); goto b9cd4; cc572: $siteEntity = $certificateEntity->getSite(); goto d5a73; fe102: a060d: goto D8d62; B391a: $certificateEntity->setCertificate($certificate->getCertificate()); goto C4146; Ce554: $certificateEntity->setCsr($certificate->getCsr()); goto A4624; Bb1c4: $commonName = array_shift($distinguishedNameDomains); goto A93ac; D8d62: $distinguishedNameDomains = $domains; goto Bb1c4; f7d83: } catch (\Exception|DomainValidationException $e) { goto bd69e; F7b18: Fb3fd: goto d7eee; d7eee: $validationErrors = []; goto a1738; bd587: Afa93: goto a48d7; D3ee5: $this->addNotification($subject, $errorMessage); goto bc9c7; De254: $errorMessage = implode("\x2c\x20", $validationErrors); goto bd587; b3373: goto Afa93; goto F7b18; a1738: foreach ($e->getValidationErrors() as $domainName => $validationError) { $validationErrors[] = sprintf("\x25\x73\72\40\45\163", $domainName, $validationError); Fb263: } goto D54d0; F5810: $errorMessage = $e->getMessage(); goto b3373; D54d0: C17da: goto De254; bd69e: if ($e instanceof DomainValidationException) { goto Fb3fd; } goto F5810; a48d7: $subject = sprintf("\x4c\x65\164\47\x73\x20\x45\156\143\x72\171\160\164\40\103\145\x72\x74\151\x66\x69\143\141\164\x65\x20\x72\145\156\x65\167\40\146\141\151\x6c\145\144\72\x20\45\x73\56", $domainName); goto D3ee5; bc9c7: } finally { if (!(true === isset($siteUpdater))) { goto A6d55; } $siteUpdater->deleteLetsEncryptChallengeDirectory(); A6d55: } goto Cbdc5; e8cac: } private function addNotification(string $subject, string $errorMessage) : void { goto e5571; Afca4: $notification->setSubject($subject); goto Ce46e; Ce46e: $notification->setMessage($errorMessage); goto B446f; B446f: $notification->setSeverity(Notification::SEVERITY_CRITICAL); goto a770c; e5571: $notification = new Notification(); goto Afca4; a770c: NotificationQueue::addNotification($notification); goto c926a; c926a: } }
