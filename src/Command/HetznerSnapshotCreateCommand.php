<?php
 namespace App\Command; use Symfony\Component\Console\Input\InputInterface; use Symfony\Component\Console\Output\OutputInterface; use Symfony\Component\Console\Input\InputOption; use App\Command\Command as BaseCommand; use App\CloudPanel\Environment as CloudPanelEnvironment; use App\Entity\Notification; use App\Hetzner\Snapshot; use App\Notification\NotificationQueue; class HetznerSnapshotCreateCommand extends BaseCommand { protected function configure() : void { goto C2b9c; D20ab: $this->addOption("\x66\x72\x65\161\x75\x65\x6e\143\x79", null, InputOption::VALUE_REQUIRED); goto fd231; C2b9c: $this->setName("\150\145\164\172\x6e\x65\x72\x3a\x73\156\x61\x70\x73\x68\157\164\x3a\143\162\145\x61\x74\145"); goto e7073; e7073: $this->setDescription("\143\x6c\160\143\x74\154\40\150\x65\x74\x7a\156\145\162\72\163\156\141\x70\x73\150\x6f\x74\x3a\143\x72\145\x61\164\x65\40\x2d\55\x66\162\x65\161\165\145\156\143\x79\75\x33"); goto D20ab; fd231: } protected function execute(InputInterface $input, OutputInterface $output) : int { try { goto bcf89; A9cfb: $apiToken = $this->getConfigValue("\x68\145\x74\x7a\156\145\x72\x5f\x61\160\151\x5f\x74\x6f\x6b\145\x6e"); goto b4fa3; bcf89: $this->validateInput($input); goto d159a; D3531: $automaticSnapshots = (bool) $this->getConfigValue("\x68\145\164\172\x6e\x65\x72\x5f\x61\x75\164\x6f\155\141\x74\x69\143\x5f\163\x6e\x61\160\x73\x68\x6f\164\163"); goto A9cfb; B87bb: return BaseCommand::SUCCESS; goto fef24; bad6c: $this->cleanSnapshots(); goto e81ad; b4fa3: $snapshotsFrequency = (int) $this->getConfigValue("\x68\145\x74\172\156\145\162\137\163\156\141\x70\163\x68\x6f\164\163\137\x66\x72\x65\x71\x75\x65\156\x63\171"); goto F8e74; e81ad: f452d: goto F2b12; dd36b: $snapshotCreated = $this->createSnapshot(); goto f1219; f1219: if (!(true === $snapshotCreated)) { goto f452d; } goto bad6c; F2b12: a8bb4: goto B87bb; d159a: $frequency = (int) $input->getOption("\146\x72\x65\161\165\x65\x6e\x63\x79"); goto cbe12; cbe12: $cloud = $this->getConfigValue("\143\154\x6f\165\144"); goto D3531; F8e74: if (!(CloudPanelEnvironment::CLOUD_PROVIDER_HETZNER == $cloud && true === $automaticSnapshots && false === empty($apiToken) && $snapshotsFrequency == $frequency)) { goto a8bb4; } goto dd36b; fef24: } catch (\Exception $e) { goto A75b2; Af758: $output->writeln(sprintf("\x3c\x65\x72\x72\x6f\x72\76\45\x73\x3c\x2f\145\162\162\157\x72\x3e", $errorMessage)); goto D660a; A75b2: $errorMessage = $e->getMessage(); goto Af758; D660a: return BaseCommand::FAILURE; goto ddd61; ddd61: } } private function createSnapshot() : bool { try { goto f5dad; Fabcb: if (!(false === empty($snapshotName))) { goto A8b88; } goto f6255; b0c5a: return true; goto b51e5; B4bfd: $hetznerClient = $instance->getHetznerClient(); goto Bfb86; D3d4d: $dateTime->setTimezone(new \DateTimeZone("\125\x54\103")); goto eb18d; Bfb86: $snapshotName = $hetznerClient->getInstanceName(); goto Fabcb; eb18d: $snapshotName = sprintf("\45\x73\x2d\x25\163", $snapshotName, $dateTime->format("\x63")); goto A906d; A906d: A8b88: goto Ed200; f6255: $dateTime = new \DateTime(); goto D3d4d; Ed200: $hetznerClient->createSnapshot($snapshotName); goto b0c5a; f5dad: $instance = $this->getInstance(); goto B4bfd; b51e5: } catch (\Exception $e) { $errorMessage = $e->getMessage(); $this->addNotification("\103\162\x65\141\164\151\x6e\147\40\x61\x20\x53\156\141\160\163\x68\157\164\40\x66\141\x69\x6c\x65\x64", $errorMessage); } return false; } private function cleanSnapshots() : bool { try { goto C0053; B2a33: foreach ($snapshots as $snapshot) { goto b6038; fe5cd: Cecf6: goto B958d; D6c83: if (!(Snapshot::STATUS_AVAILABLE == $snapshot->getStatus() && $snapshotCreatedAt < $snapshotDeleteDateTime && false === $isSnapshotDeleteProtected)) { goto Cd1e5; } goto da457; db09f: $isSnapshotDeleteProtected = $snapshot->isDeleteProtected(); goto D6c83; fc728: Cd1e5: goto fe5cd; da457: $id = $snapshot->getId(); goto edfda; b6038: $snapshotCreatedAt = $snapshot->getCreatedAt(); goto db09f; edfda: $hetznerClient->deleteSnapshot($id); goto fc728; B958d: } goto Edb91; Cd13b: return true; goto D3fae; daf26: $snapshotDeleteDateTime->modify(sprintf("\55\x25\163\x20\x64\x61\x79\163", $backupRetentionPeriod)); goto F4294; Edb91: C778a: goto bbf8b; F97ff: $backupRetentionPeriod = (int) $this->getConfigValue("\x68\145\164\x7a\156\x65\x72\137\163\156\141\160\x73\150\157\x74\163\137\162\x65\164\x65\156\x74\151\x6f\x6e\x5f\160\x65\x72\x69\157\144"); goto e1170; B313e: $hetznerClient = $instance->getHetznerClient(); goto F97ff; B6bd5: $snapshotDeleteDateTime = clone $dateTime; goto daf26; F4294: $snapshotDeleteDateTime->modify("\x2b\65\40\x6d\x69\156\x75\x74\x65\x73"); goto Db9ab; C0053: $instance = $this->getInstance(); goto B313e; c54d8: $snapshots = $hetznerClient->getSnapshots(); goto F9963; F9963: if (!count($snapshots)) { goto dbd6c; } goto B2a33; bbf8b: dbd6c: goto Cd13b; Db9ab: $snapshotDeleteDateTime->setTimezone(new \DateTimeZone("\x55\124\103")); goto c54d8; e1170: $dateTime = new \DateTime(); goto B6bd5; D3fae: } catch (\Exception $e) { $errorMessage = $e->getMessage(); $this->addNotification("\103\x6c\145\x61\x6e\x69\x6e\147\40\x53\156\141\x70\163\150\157\164\x73\x20\x66\141\151\154\x65\144", $errorMessage); } return false; } private function addNotification(string $subject, string $errorMessage) : void { goto E9891; E9891: $notification = new Notification(); goto Cf21e; Cf21e: $notification->setSubject($subject); goto cab38; d6bb0: NotificationQueue::addNotification($notification); goto aa93d; cab38: $notification->setMessage($errorMessage); goto e830b; e830b: $notification->setSeverity(Notification::SEVERITY_CRITICAL); goto d6bb0; aa93d: } }
