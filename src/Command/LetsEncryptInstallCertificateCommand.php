<?php
 namespace App\Command; use Symfony\Component\Console\Input\InputInterface; use Symfony\Component\Console\Input\InputOption; use Symfony\Component\Console\Output\OutputInterface; use App\Command\SiteCommand as SiteCommand; use App\Site\Ssl\DistinguishedName; use App\Site\Ssl\Generator\RsaKeyGenerator; use App\Site\Ssl\Generator\CsrGenerator; use App\Site\Ssl\PrivateKey; use App\Site\Ssl\LetsEncryptClient; use App\Site\Ssl\LetsEncrypt\DomainValidationException; use App\Entity\Certificate as CertificateEntity; class LetsEncryptInstallCertificateCommand extends SiteCommand { protected function configure() : void { goto bcd44; E427c: $this->addOption("\163\x75\142\152\145\x63\164\x41\x6c\164\x65\x72\x6e\141\164\x69\166\x65\116\x61\155\145", null, InputOption::VALUE_OPTIONAL, '', ''); goto dc161; B263e: $this->setDescription("\x63\x6c\x70\143\x74\154\x20\x6c\x65\x74\163\x2d\145\x6e\x63\162\x79\160\x74\x3a\151\156\x73\164\x61\154\154\72\x63\x65\x72\164\x69\146\151\x63\141\x74\x65\40\x2d\55\144\x6f\155\141\x69\156\x4e\141\x6d\x65\x3d\167\x77\167\x2e\x64\157\155\141\x69\x6e\x2e\143\157\x6d\x20\x2d\55\163\165\142\152\145\x63\x74\101\154\x74\x65\x72\156\141\x74\x69\166\145\116\x61\155\145\x3d\144\x6f\x6d\141\151\156\61\x2e\x63\157\155\54\167\167\x77\x2e\x64\x6f\x6d\141\151\x6e\61\x2e\143\x6f\x6d"); goto C268a; C268a: $this->addOption("\144\x6f\155\x61\151\156\116\141\x6d\145", null, InputOption::VALUE_REQUIRED); goto E427c; bcd44: $this->setName("\154\145\164\x73\55\145\x6e\x63\162\171\x70\x74\x3a\x69\x6e\163\x74\x61\x6c\154\72\x63\x65\162\x74\x69\x66\x69\x63\x61\x74\x65"); goto B263e; dc161: } protected function execute(InputInterface $input, OutputInterface $output) : int { try { goto d79a0; fd972: $domains = array_unique(array_merge($domains, $subjectAlternativeName)); goto B2321; f1784: $csr = $csrGenerator->generate(); goto Ee3b6; Dbc1e: $registrableDomain = $resolvedDomainName->registrableDomain()->toString(); goto D3bfb; Ee3b6: $certificate = $letsEncryptClient->finalizeOrder($certificateOrder, $privateKey, $csr); goto f6c9e; e618f: $resolvedDomainName = $this->domainNameParser->resolveDomainName($domainName); goto Dbc1e; bf0c9: $letsEncryptClient = new LetsEncryptClient($privateKey); goto e5d72; c94f4: $siteUpdater->createLetsEncryptChallengeFiles($certificateOrder); goto E2f75; E58ab: return SiteCommand::FAILURE; goto B59e6; Cc6fa: $domainValidationException->setValidationErrors($validationErrors); goto eb626; db8a1: goto D79d4; goto eec1a; edceb: if (true === empty($validationErrors)) { goto b485e; } goto A6420; d5161: $siteUpdater->installCertificate($certificateEntity); goto E2ab9; C63e5: $certificateEntity->setPrivateKey($certificate->getPrivateKey()); goto b900c; b900c: $certificateEntity->setCertificate($certificate->getCertificate()); goto Eaf52; bd4e2: D79d4: goto eb34f; E2f75: $validationErrors = $letsEncryptClient->validateDomains($certificateOrder); goto edceb; bcce8: $output->writeln(sprintf("\x3c\x69\x6e\146\x6f\76\45\x73\74\57\x69\x6e\146\157\x3e", "\x43\145\162\164\x69\x66\x69\x63\x61\x74\145\x20\151\156\163\x74\x61\154\x6c\x61\x74\151\157\156\x20\x77\141\x73\40\163\165\x63\x63\145\x73\163\x66\165\x6c\x2e")); goto F301f; e5d72: $letsEncryptClient->registerAccount(); goto a1c94; F2f9c: goto Ae6c1; goto F6ae3; a1c94: $certificateOrder = $letsEncryptClient->requestOrder($domains); goto b46f4; F6ae3: cd8c5: goto aa460; a6878: $distinguishedName = new DistinguishedName($commonName, $distinguishedNameDomains); goto Eb4d5; b46f4: $siteUpdater = $this->getSiteUpdater($site); goto fbe58; Eaf52: $certificateEntity->setCertificateChain($certificate->getCertificateChain()); goto d5161; c33f7: $privateKey = new PrivateKey($letsEncryptPrivateKey); goto bf0c9; D51bf: $privateKey = $rsaKeyGenerator->generatePrivateKey(); goto F15e7; F79b9: $distinguishedNameDomains = $domains; goto F3757; aa460: $domains = [$registrableDomain, sprintf("\167\x77\x77\x2e\x25\x73", $registrableDomain)]; goto Ddfa5; D0855: $certificateEntity->setCsr($certificate->getCsr()); goto C63e5; A6420: $domainValidationException = new DomainValidationException("\104\157\155\x61\x69\x6e\40\166\141\x6c\x69\144\141\x74\151\157\156\40\x66\x61\151\x6c\145\x64"); goto Cc6fa; Ad936: $domains = [$domainName]; goto F2f9c; F301f: return SiteCommand::SUCCESS; goto bd4e2; eb626: throw $domainValidationException; goto db8a1; D3bfb: $subdomain = $resolvedDomainName->subDomain()->toString(); goto F9bd1; c00fb: $site = $this->getSite($domainName); goto Faf1a; E2ab9: $siteEntity->setCertificate($certificateEntity); goto b0498; eec1a: b485e: goto F79b9; b0498: $siteEntity->addCertificate($certificateEntity); goto bb745; Faf1a: $siteEntity = $this->getSiteEntity($domainName); goto E951c; A1c0e: goto ad553; goto E5e10; Ddfa5: Ae6c1: goto fd972; E951c: if (false === is_null($siteEntity)) { goto a8fa2; } goto c9bec; bb745: $this->siteEntityManager->updateEntity($siteEntity); goto bcce8; F15e7: $csrGenerator = new CsrGenerator($privateKey, $distinguishedName); goto f1784; B12fc: $subjectAlternativeName = array_map("\164\162\x69\155", array_filter(explode("\x2c", trim($input->getOption("\163\165\x62\x6a\145\x63\x74\101\x6c\x74\145\162\156\x61\x74\x69\166\x65\116\x61\x6d\145"))))); goto c00fb; f6c9e: $certificateEntity = $this->certificateEntityManager->createEntity(); goto b5aa9; b5aa9: $certificateEntity->setType(CertificateEntity::TYPE_LETS_ENCRYPT); goto db6ab; fbe58: $siteUpdater->deleteLetsEncryptChallengeDirectory(); goto c94f4; B2321: $letsEncryptPrivateKey = $this->getConfigValue("\154\x65\137\x70\x72\151\x76\141\164\145\x5f\153\x65\x79"); goto c33f7; db6ab: $certificateEntity->setSite($siteEntity); goto D0855; E5e10: a8fa2: goto e618f; Ac0b0: if (true === is_null($subdomain) || "\167\x77\x77" == $subdomain) { goto cd8c5; } goto Ad936; d79a0: $domainName = trim($input->getOption("\144\157\155\x61\151\x6e\x4e\x61\x6d\x65")); goto B12fc; c9bec: throw new \Exception(sprintf("\x44\157\x6d\x61\151\x6e\x4e\141\x6d\x65\40\42\x25\x73\x22\x20\x64\x6f\145\163\x20\156\157\164\40\x65\x78\x69\x73\164\56", $domainName)); goto A1c0e; Eb4d5: $rsaKeyGenerator = new RsaKeyGenerator(); goto D51bf; F3757: $commonName = array_shift($distinguishedNameDomains); goto a6878; eb34f: ad553: goto E58ab; F9bd1: $subdomain = false === empty($subdomain) ? $subdomain : null; goto Ac0b0; B59e6: } catch (\Exception|DomainValidationException $e) { goto ae59f; baf9f: $errorMessage = implode("\54\x20", $validationErrors); goto c78c6; c78c6: d0537: goto A2443; ae59f: if ($e instanceof DomainValidationException) { goto d17d7; } goto C4b53; C4b53: $errorMessage = $e->getMessage(); goto e0a3f; aab97: foreach ($e->getValidationErrors() as $domainName => $validationError) { $validationErrors[] = sprintf("\45\x73\x3a\x20\45\x73", $domainName, $validationError); Ad7ea: } goto C160b; F4a6e: d17d7: goto Aafb6; A2443: $output->writeln(sprintf("\x3c\x65\x72\162\157\162\x3e\x25\163\x3c\x2f\145\x72\x72\x6f\162\x3e", $errorMessage)); goto F880e; F880e: return SiteCommand::FAILURE; goto f0600; Aafb6: $validationErrors = []; goto aab97; e0a3f: goto d0537; goto F4a6e; C160b: Beb85: goto baf9f; f0600: } finally { if (!(true === isset($siteUpdater))) { goto ad057; } $siteUpdater->deleteLetsEncryptChallengeDirectory(); ad057: } } }
