<?php
 namespace App\Command; use Symfony\Component\Console\Input\InputInterface; use Symfony\Component\Console\Input\InputOption; use Symfony\Component\Console\Output\OutputInterface; use GuzzleHttp\Client as HttpClient; use GuzzleHttp\Psr7\Request; use App\Command\Command as BaseCommand; use App\System\Command\WriteFileCommand; use App\System\Command\ServiceReloadCommand; use App\System\CommandExecutor; class CloudflareUpdateIpsCommand extends BaseCommand { private const CLOUDFLARE_IPV4_REQUEST_URL = "\x68\x74\164\160\x73\72\57\x2f\167\167\x77\56\143\154\x6f\x75\x64\x66\x6c\141\x72\145\56\143\x6f\x6d\57\151\x70\x73\55\166\64"; private const CLOUDFLARE_IPV6_REQUEST_URL = "\150\x74\164\160\163\x3a\x2f\57\167\167\x77\x2e\143\154\157\x75\x64\x66\154\x61\x72\145\x2e\x63\x6f\x6d\x2f\x69\160\163\55\166\66"; private const NGINX_CLOUDFLARE_FILE = "\x2f\x65\x74\143\57\x6e\147\151\156\x78\x2f\x63\x6c\x6f\x75\x64\x66\x6c\141\162\x65\x2f\x69\x70\x73"; private const HTTP_CLIENT_TIMEOUT = 10; private ?HttpClient $httpClient = null; protected function configure() : void { goto B62a4; bf1e3: $this->setDescription("\143\x6c\160\x63\164\154\x20\x63\x6c\x6f\x75\144\146\154\141\x72\145\x3a\165\x70\144\x61\164\x65\x3a\151\x70\163"); goto fa3d8; fa3d8: $this->addOption("\x64\145\154\141\171", null, InputOption::VALUE_OPTIONAL, false); goto E158f; B62a4: $this->setName("\x63\x6c\x6f\x75\144\146\154\141\x72\x65\72\165\160\144\x61\164\x65\x3a\151\160\x73"); goto bf1e3; E158f: } protected function execute(InputInterface $input, OutputInterface $output) : int { try { goto c2ec4; ea6fe: sleep(rand(15, 180)); goto d70f1; c2ec4: $delay = (bool) $input->getOption("\144\x65\x6c\x61\x79"); goto c7c7c; C8a47: $this->updateIps(); goto b8938; d70f1: Bca59: goto C8a47; Bf944: return BaseCommand::SUCCESS; goto f4f51; c7c7c: if (!(true === $delay)) { goto Bca59; } goto ea6fe; b8938: $output->writeln("\74\151\x6e\146\x6f\76\103\154\157\x75\x64\146\x6c\x61\x72\145\x20\111\x50\x73\40\x68\141\166\145\40\142\145\145\x6e\40\x75\x70\x64\x61\x74\x65\144\x2e\74\57\x69\x6e\146\x6f\76"); goto Bf944; f4f51: } catch (\Exception $e) { goto Eb995; Eb995: $logger = $this->getLogger(); goto E3779; b9eaf: return BaseCommand::FAILURE; goto d98bf; fdfb1: $errorMessage = $e->getMessage(); goto dd82d; E3779: $logger->exception($e); goto fdfb1; dd82d: $output->writeln(sprintf("\x3c\x65\x72\x72\157\162\76\45\163\74\x2f\145\x72\162\157\162\76", $errorMessage)); goto b9eaf; d98bf: } } private function updateIps() : void { goto Ec290; f2623: af39c: goto b6f7d; F2e01: if (!(false === empty($ips))) { goto af39c; } goto B9fe3; de950: $requestUrls = [self::CLOUDFLARE_IPV4_REQUEST_URL, self::CLOUDFLARE_IPV6_REQUEST_URL]; goto ffd32; B9fe3: $this->writeIpsToFile($ips); goto bfe4f; e6535: foreach ($requestUrls as $requestUrl) { goto E9ab2; daa06: if (!(false === empty($cloudflareIps) && true === is_array($cloudflareIps))) { goto E3fde; } goto f4d30; bb6d3: A3932: goto e2d34; F3f4b: $responseStatusCode = $response->getStatusCode(); goto f8e16; D913d: $responseData = trim((string) $response->getBody()); goto edfcd; f8e16: if (!(200 == $responseStatusCode)) { goto A3932; } goto D913d; e2d34: b90ad: goto Cb36f; edfcd: if (!(false === empty($responseData))) { goto b1e7e; } goto E26d3; e9c57: $ips = array_merge($ips, $cloudflareIps); goto a0dfd; E9ab2: $request = new Request("\x47\105\124", $requestUrl); goto efddb; d2d70: b1e7e: goto bb6d3; f4d30: $this->validateIps($cloudflareIps); goto e9c57; a0dfd: E3fde: goto d2d70; E26d3: $cloudflareIps = explode(PHP_EOL, $responseData); goto daa06; efddb: $response = $httpClient->send($request); goto F3f4b; Cb36f: } goto Ee204; ffd32: $ips = []; goto e6535; Ee204: de2e3: goto F2e01; Ec290: $httpClient = $this->getHttpClient(); goto de950; bfe4f: $this->reloadNginxService(); goto f2623; b6f7d: } private function writeIpsToFile(array $ips) : void { goto b47a0; a50ea: $commandExecutor->execute($writeFileCommand); goto ce859; b47a0: $commandExecutor = new CommandExecutor(); goto b2504; dfe60: $fileContent .= "\144\x65\156\x79\40\x61\154\x6c\x3b"; goto e0361; b2504: $fileContent = ''; goto C7f4f; C7f4f: foreach ($ips as $ip) { $fileContent .= sprintf("\141\x6c\154\x6f\x77\x20\x25\163\x3b", $ip) . PHP_EOL; Bede5: } goto e548a; e548a: C108b: goto dfe60; e0361: $writeFileCommand = new WriteFileCommand(); goto F84fc; F84fc: $writeFileCommand->setFile(self::NGINX_CLOUDFLARE_FILE); goto d988a; d988a: $writeFileCommand->setContent($fileContent); goto a50ea; ce859: } private function reloadNginxService() { goto b5715; add05: f64ad: goto f8afe; b5e98: $reloadServiceCommand = new ServiceReloadCommand(); goto Bb698; b5715: if (!("\144\145\166" != $_ENV["\x41\120\x50\x5f\105\x4e\x56"])) { goto f64ad; } goto A14c3; Bb698: $reloadServiceCommand->setServiceName("\x6e\x67\x69\x6e\170"); goto b35f4; b35f4: $commandExecutor->execute($reloadServiceCommand); goto add05; A14c3: $commandExecutor = new CommandExecutor(); goto b5e98; f8afe: } private function validateIps(array $ips) : void { foreach ($ips as $ip) { goto ce91a; db37a: if (!(false === $isValidIp)) { goto Bd0d7; } goto cd3ac; c78a0: ae285: goto f4a35; e5224: Bd0d7: goto c78a0; ce91a: $isValidIp = $this->validateIp($ip); goto db37a; cd3ac: throw new \Exception(sprintf("\x49\120\x20\x22\x25\x73\x22\40\x69\x73\x20\x6e\x6f\x74\x20\166\x61\x6c\151\144\56", $ip)); goto e5224; f4a35: } Ee9be: } private function validateIp(string $ip) : bool { goto A2083; C5649: $isIpv6 = substr_count($ipAddress, "\72") ? true : false; goto D5fa0; Fca22: $ip = $ipParts[0] ?? ''; goto B185a; de7b6: dca87: goto aff8b; aff8b: if (!filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) { goto c754c; } goto a1425; a0e8e: return $isValidIp; goto De0d3; a1425: $isValidIp = true; goto e0646; e0646: c754c: goto b1c71; Fef33: $isNetmaskValid = false; goto c354d; c354d: Ebd96: goto f06ec; D5fa0: $isValidIp = false; goto bb9c5; A30be: $isNetmaskValid = false; goto e8dbc; f3ea3: goto ea5fd; goto aa040; B185a: $netmask = $ipParts[1] ?? ''; goto C5649; aa040: Fb0fd: goto a9a6c; c71d1: $isValidIp = true; goto Afe3b; Bfb61: eb259: goto a0e8e; E9d7f: $ipParts = explode("\x2f", $ipAddress); goto Fca22; Afe3b: c4911: goto F5819; bcd7b: if (!(true === $isValidIp && false === empty($netmask))) { goto eb259; } goto f8532; F5819: goto e859d; goto de7b6; Cfea0: if (!filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) { goto c4911; } goto c71d1; A2083: $ipAddress = $ip; goto E9d7f; bb9c5: if (true === $isIpv6) { goto dca87; } goto Cfea0; B1635: ea5fd: goto Cbfc8; a9a6c: $isNetmaskValid = $netmask <= 128; goto B1635; Cbfc8: if (!(false === $isNetmaskValid)) { goto a5817; } goto Ce2a2; f8532: $netmask = (int) $netmask; goto A30be; b1c71: e859d: goto bcd7b; e8dbc: if (!($netmask < 0)) { goto Ebd96; } goto Fef33; f06ec: if (true === $isIpv6) { goto Fb0fd; } goto a7cc0; a7cc0: $isNetmaskValid = $netmask <= 32; goto f3ea3; Ce2a2: $isValidIp = false; goto b6c63; b6c63: a5817: goto Bfb61; De0d3: } private function getHttpClient() : HttpClient { goto Ad1df; a10f9: ea05f: goto Aadb1; Ad1df: if (!(true === is_null($this->httpClient))) { goto ea05f; } goto Aaedc; Aaedc: $config = ["\164\151\155\145\x6f\165\164" => self::HTTP_CLIENT_TIMEOUT, "\166\x65\162\x69\146\171" => false]; goto B6d58; Aadb1: return $this->httpClient; goto E3cdc; B6d58: $this->httpClient = new HttpClient($config); goto a10f9; E3cdc: } }
