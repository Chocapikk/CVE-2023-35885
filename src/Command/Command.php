<?php
 namespace App\Command; use Symfony\Component\Console\Command\Command as BaseCommand; use Symfony\Component\Console\Input\InputInterface; use Symfony\Component\Console\Input\InputOption; use Symfony\Component\Console\Output\OutputInterface; use Symfony\Component\Validator\ConstraintViolationList; use App\Service\Logger; use App\Util\Retry; use App\CloudPanel\Instance; use App\Entity\Manager\ConfigManager; abstract class Command extends BaseCommand { protected ?Logger $logger = null; protected ?string $comment = null; private ?ConfigManager $configManager = null; private Instance $instance; protected function validateInput(InputInterface $input) { goto fce3f; a9e5f: Dce78: goto b17db; E8a23: foreach ($inputOptions as $inputOption) { goto B4dc4; eecbe: b7060: goto D4018; Ebed6: Dea24: goto eecbe; C47bc: throw new \Exception(sprintf("\124\150\145\x20\x22\x2d\55\45\163\42\x20\x6f\x70\164\151\157\156\x20\x72\x65\161\165\x69\162\x65\163\x20\x61\40\166\x61\x6c\165\x65\x2e", $inputOption->getName())); goto Ebed6; ffa77: if (!(true === empty($inputOptionValue))) { goto Dea24; } goto C47bc; B4dc4: if (!(true === $inputOption->isValueRequired())) { goto b7060; } goto Cb2c3; Cb2c3: $inputOptionValue = trim($input->getOption($inputOption->getName())); goto ffa77; D4018: f32cc: goto F1a87; F1a87: } goto a9e5f; D5790: $inputOptions = $nativeDefinition->getOptions(); goto a60f3; fce3f: $nativeDefinition = $this->getNativeDefinition(); goto D5790; a60f3: if (!count($inputOptions)) { goto e2277; } goto E8a23; b17db: e2277: goto b70e6; b70e6: } public function setComment(string $comment) { $this->comment = $comment; } public function getComment() : ?string { return $this->comment; } protected function getLogger() : Logger { goto aac5c; de96c: $this->logger = $this->get("\141\160\160\x2e\154\157\x67\147\x65\162"); goto f515e; f515e: Cbb5b: goto B58b3; aac5c: if (!(true === is_null($this->logger))) { goto Cbb5b; } goto de96c; B58b3: return $this->logger; goto Daa3e; Daa3e: } public function setInstance(Instance $instance) : void { $this->instance = $instance; } public function getInstance() : Instance { return $this->instance; } protected function get(string $id) { return $this->getContainer()->get($id); } protected function getContainer() { return $this->getApplication()->getContainer(); } protected function renderConstraints(ConstraintViolationList $constraints, OutputInterface $output) : int { goto C8987; Cdf26: C391f: goto D5fed; Acb2a: foreach ($constraints as $constraint) { goto F1179; F1179: $errorMessage = sprintf("\74\x65\162\162\x6f\x72\76\45\163\72\40\45\x73\74\57\145\162\162\157\162\x3e", $constraint->getPropertyPath(), $constraint->getMessage()); goto d52e1; d52e1: $output->writeln($errorMessage); goto c5b1c; c5b1c: Fb313: goto e9f23; e9f23: } goto Cdf26; C8987: $this->prepareConstraints($constraints); goto Acb2a; D5fed: return self::FAILURE; goto E0c8b; E0c8b: } protected function prepareConstraints(ConstraintViolationList $constraints) : void { } protected function changePropertyPath(string $oldPropertyPath, string $newPropertyPath, ConstraintViolationList $constraints) : void { foreach ($constraints as $constraint) { goto a94c0; a94c0: if (!($oldPropertyPath == $constraint->getPropertyPath())) { goto D7731; } goto cbf59; E53a3: D7731: goto ccd66; ccd66: eb744: goto d6127; cbf59: $reflectionClass = new \ReflectionClass($constraint); goto D1fd7; eb286: $reflectionProperty->setValue($constraint, $newPropertyPath); goto E53a3; D1fd7: $reflectionProperty = $reflectionClass->getProperty("\x70\162\x6f\160\145\162\164\x79\x50\x61\x74\150"); goto a4bcd; a4bcd: $reflectionProperty->setAccessible(true); goto eb286; d6127: } f49dd: } protected function getSystemUserName() : string { goto f9f3e; d5be0: $systemUserName = $systemUserInfo["\156\x61\155\145"] ?? ''; goto Ba7c1; Ba7c1: return $systemUserName; goto Dc143; f9f3e: $systemUserInfo = $this->getSystemUserInfo(); goto d5be0; Dc143: } protected function getSystemUserInfo() : array { $systemUserInfo = posix_getpwuid(posix_getuid()); return $systemUserInfo; } protected function getConfigValue(string $key) : ?string { goto Be384; Be384: $configManager = $this->getConfigManager(); goto C5333; a139d: return $configValue; goto F9f2a; C5333: $configValue = $configManager->get($key); goto a139d; F9f2a: } protected function getConfigManager() : ConfigManager { goto B54f2; B54f2: if (!(true === is_null($this->configManager))) { goto Dd731; } goto ac401; Eb7db: Dd731: goto bf835; ac401: $this->configManager = $this->get("\x41\x70\x70\x5c\x45\156\x74\151\164\x79\x5c\115\x61\x6e\x61\x67\145\x72\x5c\103\x6f\156\146\151\x67\115\x61\x6e\x61\147\x65\x72"); goto Eb7db; bf835: return $this->configManager; goto d9a1e; d9a1e: } public function getGroupName() { goto Aea0e; afccd: $groupName = strstr(strtolower($name), "\x3a", true); goto Ca1d3; Ca1d3: return $groupName; goto Ae6f0; Aea0e: $name = $this->getName(); goto afccd; Ae6f0: } protected function retry(callable $fn, $retries = 2, $delay = 3) { return Retry::retry($fn, $retries, $delay); } }
