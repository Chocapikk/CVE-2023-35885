<?php
 namespace App\Command; use Symfony\Component\Console\Input\InputInterface; use Symfony\Component\Console\Output\OutputInterface; use Symfony\Component\Console\Input\InputOption; use Aws\Ec2\Ec2Client; use Aws\Credentials\Credentials as AwsCredentials; use App\Command\Command as BaseCommand; use App\CloudPanel\Environment as CloudPanelEnvironment; use App\Aws\Instance as AwsInstance; use App\Aws\Ami as AwsAmi; use App\Entity\Notification; use App\Notification\NotificationQueue; class AwsImageCreateCommand extends BaseCommand { private ?Ec2Client $ec2Client = null; protected function configure() : void { goto F5a0d; F5a0d: $this->setName("\141\x77\163\x3a\x69\x6d\141\147\145\72\143\162\145\x61\x74\x65"); goto ffd74; Cf118: $this->addOption("\x66\162\145\161\x75\145\x6e\x63\171", null, InputOption::VALUE_REQUIRED); goto F25dd; ffd74: $this->setDescription("\x63\154\160\x63\164\x6c\40\141\167\x73\72\151\x6d\141\147\x65\72\143\x72\145\141\164\145\x20\x2d\x2d\146\162\145\x71\x75\145\156\143\171\75\63"); goto Cf118; F25dd: } protected function execute(InputInterface $input, OutputInterface $output) : int { try { goto E0ac5; F3c35: $imageCreated = $this->createImage(); goto A4b6c; Fb0da: b8838: goto f1c6e; A4b6c: if (!(true === $imageCreated)) { goto b8838; } goto b27be; b27be: $this->cleanImages(); goto Fb0da; a85ec: $awsAccessKey = $this->getConfigValue("\141\167\x73\x5f\141\143\x63\x65\163\x73\137\x6b\145\x79"); goto e92f8; e92f8: if (!(CloudPanelEnvironment::CLOUD_PROVIDER_AWS == $cloud && true === $awsAutomaticImages && false === empty($awsAccessKey) && $awsImagesFrequency == $frequency)) { goto Cc691; } goto F3c35; Ecc3c: return BaseCommand::SUCCESS; goto A3a43; E022b: $cloud = $this->getConfigValue("\x63\x6c\x6f\x75\144"); goto df69e; df69e: $awsAutomaticImages = (bool) $this->getConfigValue("\141\x77\163\137\x61\165\164\157\155\x61\164\x69\143\137\x69\x6d\x61\x67\145\x73"); goto ae435; E0ac5: $this->validateInput($input); goto e3a15; f1c6e: Cc691: goto Ecc3c; ae435: $awsImagesFrequency = (int) $this->getConfigValue("\141\167\163\x5f\x69\x6d\141\x67\145\163\137\x66\x72\x65\x71\165\145\156\143\171"); goto a85ec; e3a15: $frequency = (int) $input->getOption("\146\x72\x65\x71\x75\145\156\x63\171"); goto E022b; A3a43: } catch (\Exception $e) { goto f161d; Cdb0f: $output->writeln(sprintf("\x3c\145\x72\x72\x6f\162\76\45\x73\x3c\57\x65\162\162\157\x72\x3e", $errorMessage)); goto facb3; f161d: $errorMessage = $e->getMessage(); goto Cdb0f; facb3: return BaseCommand::FAILURE; goto Cef38; Cef38: } } private function createImage() : bool { try { goto B556f; B556f: $instanceUid = $this->getConfigValue("\x69\x6e\163\x74\x61\156\143\x65\x5f\x75\x69\144"); goto e90e2; D9327: $imageName = sprintf("\x25\163\137\x63\154\160\137\45\x73", strtolower($instanceName), $dateTime->getTimestamp()); goto eaa2c; e90e2: $instance = $this->getInstance(); goto d299a; E2a69: return true; goto a80bb; f0136: $awsInstance = new AwsInstance(); goto e4e39; c28a1: $dateTime = new \DateTime(); goto f3d05; eaa2c: Da15c: goto a7d3e; D844a: $result = $ec2Client->describeInstances(["\x49\x6e\163\164\x61\x6e\x63\145\111\144\x73" => [$instanceId]]); goto Fbc6a; Feeec: fefe3: goto D9327; d2f91: $ec2Client = $this->getEc2Client(); goto D844a; f3d05: if (false === empty($instanceName)) { goto fefe3; } goto fd9e9; fd9e9: $imageName = sprintf("\x25\163\137\x63\x6c\x70\137\45\163", $instanceId, $dateTime->getTimestamp()); goto cfe9f; A8478: $instance = $instances[0] ?? []; goto Cc0a0; f7f6f: $this->retry(function () use($instanceUid, $imageId, $ec2Client) { $ec2Client->createTags(["\x52\145\163\157\x75\x72\143\145\x73" => [$imageId], "\124\141\147\x73" => [["\x4b\145\171" => "\x49\156\x73\164\141\x6e\143\145\x55\151\144", "\x56\x61\x6c\165\145" => $instanceUid], ["\113\x65\171" => "\x54\x79\160\x65", "\x56\141\x6c\165\x65" => AwsAmi::TYPE_AUTOMATED], ["\113\145\171" => "\x43\162\145\x61\164\x65\144\102\171", "\126\141\154\x75\x65" => "\x43\154\157\165\x64\x50\x61\x6e\x65\x6c"]]]); }); goto F7524; cfe9f: goto Da15c; goto Feeec; e4e39: $tags = (array) $instance["\x54\x61\x67\163"] ?? []; goto a2551; b6ddd: $instanceName = $awsInstance->getInstanceName(); goto c28a1; c9aad: $imageId = $this->retry(function () use($ec2Client, $imageConfiguration) { goto a7fa5; a7fa5: $result = $ec2Client->createImage($imageConfiguration); goto Ef496; B330d: return $imageId; goto c09b6; Ef496: $imageId = $result["\111\155\141\x67\x65\x49\144"] ?? ''; goto B330d; c09b6: }); goto f7f6f; Fbc6a: $instances = $result["\x52\x65\x73\145\x72\166\141\164\x69\157\156\x73"][0]["\111\x6e\163\x74\x61\156\143\x65\x73"] ?? []; goto A8478; F7524: F104f: goto E2a69; d299a: $instanceId = $instance->getInstanceId(); goto d2f91; Cc0a0: if (!(false == empty($instance))) { goto F104f; } goto f0136; a7d3e: $imageConfiguration = ["\111\156\163\x74\x61\156\x63\145\111\x64" => $instanceId, "\116\141\x6d\x65" => $imageName, "\x4e\157\122\x65\x62\157\x6f\x74" => true]; goto c9aad; a2551: $awsInstance->setTags($tags); goto b6ddd; a80bb: } catch (\Exception $e) { $errorMessage = $e->getMessage(); $this->addNotification("\103\x72\145\x61\164\x69\x6e\147\x20\141\x6e\x20\x41\x57\123\40\x69\x6d\x61\x67\145\40\146\141\x69\x6c\x65\144", $errorMessage); } return false; } private function addNotification(string $subject, string $errorMessage) : void { goto D10cd; D10cd: $notification = new Notification(); goto C2665; B023d: $notification->setSeverity(Notification::SEVERITY_CRITICAL); goto Ebdf8; C2665: $notification->setSubject($subject); goto D6b3b; Ebdf8: NotificationQueue::addNotification($notification); goto Ca9f2; D6b3b: $notification->setMessage($errorMessage); goto B023d; Ca9f2: } private function cleanImages() : void { try { goto ba0d7; ba0d7: $instanceUid = $this->getConfigValue("\x69\156\x73\x74\x61\156\x63\145\x5f\x75\x69\x64"); goto f684a; C6efa: $imageDeleteDateTime->setTimezone(new \DateTimeZone("\x55\x54\x43")); goto e0237; f684a: $awsBackupRetentionPeriod = (int) $this->getConfigValue("\x61\167\163\137\x69\155\141\x67\145\x73\137\162\145\x74\x65\x6e\164\151\157\x6e\137\x70\x65\x72\151\x6f\144"); goto A5e04; e0237: foreach ($images as $image) { goto acb01; dcb80: a63f5: goto D8d7a; Bf51d: f9784: goto Bebac; D490b: C040a: goto Bf51d; acc5b: $this->retry(function () use($ec2Client, $amiId) { $ec2Client->deregisterImage(["\111\155\141\x67\x65\x49\144" => $amiId]); }); goto Ba02d; Ab4d9: if (!(false === is_null($amiId) && false === is_null($imageCreationDate) && $imageCreationDate < $imageDeleteDateTime)) { goto C040a; } goto acc5b; f8624: if (!(false == empty($blockDeviceMappings) && true === is_array($blockDeviceMappings))) { goto C14c4; } goto dc751; Ba02d: $blockDeviceMappings = $image["\x42\x6c\x6f\143\153\x44\145\x76\x69\x63\x65\115\x61\160\x70\151\156\x67\x73"] ?? []; goto f8624; D00d9: $amiId = $image["\111\155\x61\147\x65\111\144"] ?? null; goto Ab4d9; D8d7a: C14c4: goto D490b; dc751: foreach ($blockDeviceMappings as $blockDevice) { goto Bc231; Bc231: $snapshotId = $blockDevice["\105\x62\x73"]["\x53\x6e\x61\160\163\x68\x6f\x74\x49\144"] ?? null; goto C1f3e; E8f0c: e8d84: goto F51e7; F51e7: ff2f7: goto B13be; e91fc: $this->retry(function () use($ec2Client, $snapshotId) { $ec2Client->deleteSnapshot(["\123\156\141\160\163\x68\x6f\164\x49\x64" => $snapshotId]); }); goto E8f0c; C1f3e: if (!(false === is_null($snapshotId))) { goto e8d84; } goto e91fc; B13be: } goto dcb80; A2986: $imageCreationDate->setTimezone(new \DateTimeZone("\125\x54\103")); goto D00d9; acb01: $imageCreationDate = true === isset($image["\x43\162\x65\x61\164\x69\x6f\156\104\x61\x74\145"]) ? new \DateTime($image["\x43\x72\145\141\164\x69\x6f\x6e\x44\141\x74\x65"]) : null; goto A2986; Bebac: } goto d990c; Dd486: $imageDeleteDateTime->modify("\53\65\x20\x6d\x69\156\x75\x74\145\163"); goto C6efa; E85fb: $filters = [["\116\141\x6d\145" => "\164\x61\147\x3a\x49\156\163\x74\141\156\143\145\x55\151\144", "\x56\x61\x6c\x75\x65\163" => [$instanceUid]], ["\116\141\x6d\145" => "\164\141\x67\x3a\x54\171\x70\145", "\126\x61\154\x75\x65\163" => [AwsAmi::TYPE_AUTOMATED]], ["\116\x61\x6d\x65" => "\x73\x74\141\x74\x65", "\126\x61\154\165\145\163" => [AwsAmi::STATE_AVAILABLE, AwsAmi::STATE_FAILED]]]; goto D4ceb; E514d: $imageDeleteDateTime = clone $dateTime; goto b8a1c; D4ceb: $result = $ec2Client->describeImages(["\x46\x69\x6c\164\x65\162\x73" => $filters]); goto cf169; b8a1c: $imageDeleteDateTime->modify(sprintf("\55\45\x73\40\x64\141\171\163", $awsBackupRetentionPeriod)); goto Dd486; cf169: $images = (array) $result->get("\x49\x6d\x61\147\x65\x73"); goto C4618; A5e04: $ec2Client = $this->getEc2Client(); goto E85fb; d990c: c5d3d: goto a662f; C4618: $dateTime = new \DateTime(); goto E514d; a662f: } catch (\Exception $e) { $errorMessage = $e->getMessage(); $this->addNotification("\103\154\145\x61\156\x69\x6e\x67\40\157\x6c\144\x20\x41\127\123\x20\x69\155\141\147\145\x73\x20\146\141\151\x6c\145\144", $errorMessage); } } private function getEc2Client() : Ec2Client { goto C3871; D751f: $secretAccessKey = $this->getConfigValue("\x61\167\x73\x5f\x73\x65\143\162\145\164\x5f\141\x63\x63\145\163\163\x5f\x6b\145\171"); goto F352b; Fe8d5: $this->ec2Client = new Ec2Client(["\166\x65\162\163\151\157\156" => "\154\x61\164\145\163\x74", "\162\145\x67\x69\x6f\156" => $region, "\x63\162\145\144\145\x6e\164\151\x61\x6c\163" => $credentials]); goto Cd036; F352b: $credentials = new AwsCredentials($accessKey, $secretAccessKey); goto Fe8d5; Cdbcc: $region = $instance->getRegion(); goto c1c0f; c1c0f: $accessKey = $this->getConfigValue("\141\167\163\x5f\141\x63\143\145\x73\x73\x5f\153\x65\x79"); goto D751f; C3871: if (!(true === is_null($this->ec2Client))) { goto A6763; } goto Bc854; e3e67: return $this->ec2Client; goto a6a11; Bc854: $instance = $this->getInstance(); goto Cdbcc; Cd036: A6763: goto e3e67; a6a11: } }
