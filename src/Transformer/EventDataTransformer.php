<?php
 namespace App\Transformer; use App\Entity\Event; use App\Entity\User; class EventDataTransformer { private Event $event; private User $user; public function __construct(Event $event, User $user) { $this->event = $event; $this->user = $user; } public function transform() : void { goto c8198; b33ab: $this->event->setEventData($eventData); goto a1573; f2c3f: if (!(false === empty($this->event->getEventData()))) { goto dcc72; } goto dfab1; c27bc: dcc72: goto b33ab; c8198: $eventCreatedAt = $this->event->getCreatedAt(); goto a8d5f; e132e: $eventData = ["\145\166\x65\156\164\x54\151\155\145" => $eventCreatedAtUserTimezone->format("\x4d\x20\x6a\x2c\x20\131\x20\x48\x3a\x69\x3a\x73"), "\165\x73\145\x72\x4e\141\x6d\145" => $this->event->getUserName(), "\145\x76\145\x6e\164\116\141\x6d\145" => $this->event->getEventName(), "\163\x6f\x75\162\143\145\x49\160\x41\x64\144\x72\145\x73\x73" => $this->event->getSourceIpAddress(), "\x75\x73\x65\162\x41\147\x65\x6e\x74" => $this->event->getUserAgent()]; goto f2c3f; a8d5f: $eventCreatedAtUserTimezone = clone $eventCreatedAt; goto ef445; ef445: $eventCreatedAtUserTimezone->setTimezone(new \DateTimeZone($this->user->getTimezone())); goto e132e; dfab1: $eventData = array_merge($eventData, $this->event->getEventData()); goto c27bc; a1573: } }
