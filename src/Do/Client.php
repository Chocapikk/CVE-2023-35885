<?php
 namespace App\Do; use GuzzleHttp\Client as HttpClient; use GuzzleHttp\Psr7\Request; use GuzzleHttp\Psr7\Response; use App\CloudPanel\Do\Instance; use App\Util\Retry; class Client { private const HTTP_CLIENT_TIMEOUT = 10; private const API_ENDPOINT = "\150\x74\x74\160\163\72\57\x2f\141\160\151\56\x64\x69\147\x69\164\141\154\157\143\x65\x61\156\56\143\157\155\57\x76\62\57"; private const META_DATA_ENDPOINT = "\x68\164\164\x70\x3a\x2f\57\61\66\x39\56\62\65\x34\x2e\61\66\x39\56\62\x35\64\x2f\x6d\145\x74\x61\x64\x61\164\x61\x2f\166\x31\57"; private array $dropletData = []; private ?HttpClient $httpClient = null; private ?string $token = null; private Instance $instance; public function setInstance(Instance $instance) : void { $this->instance = $instance; } public function getInstance() : Instance { return $this->instance; } public function getDroplet() : ?Droplet { goto A6020; C281b: $droplet->setTags($dropletTags); goto B6514; fc884: $dropletName = $dropletData["\156\141\x6d\x65"] ?? ''; goto b74dd; e759d: $dropletPublicIpAddress = $dropletData["\156\x65\x74\x77\157\x72\153\163"]["\x76\x34"][0]["\151\160\x5f\x61\x64\144\162\x65\x73\x73"] ?? ''; goto E6583; cd580: $dropletTags = $dropletData["\164\141\147\x73"] ?? []; goto C0846; dc3c1: $droplet->setVCPUs($dropletVCpus); goto a14f4; cd73c: $droplet->setPublicIpAddress($dropletPublicIpAddress); goto C281b; Bf743: $droplet = null; goto d7a95; a47f8: return $droplet; goto eaab8; Ac22f: Aa158: goto a47f8; A6020: $dropletId = $this->instance->getDropletId(); goto Cbfd4; C0846: $dropletVolumeIds = $dropletData["\x76\157\154\165\155\145\x5f\x69\x64\x73"] ?? []; goto e759d; f859a: $droplet->setRegionSlug($dropletRegionSlug); goto cd73c; B987c: $dropletMemory = $dropletData["\x6d\x65\x6d\x6f\x72\171"] ?? 0; goto Cbfa5; C4615: $droplet->setId($dropletId); goto ebed6; ebed6: $droplet->setName($dropletName); goto e0c0f; Bdd4e: $dropletRegionSlug = $dropletData["\162\x65\x67\151\x6f\x6e"]["\163\154\165\147"] ?? ''; goto cd580; E6583: $droplet = new Droplet(); goto C4615; B6514: $droplet->setVolumeIds($dropletVolumeIds); goto Ac22f; D0dcb: $dropletVCpus = $dropletData["\166\143\160\165\163"] ?? 0; goto B987c; a0293: $droplet->setRegionName($dropletRegionName); goto f859a; a14f4: $droplet->setMemory($dropletMemory); goto a0293; b74dd: $dropletStatus = $dropletData["\x73\x74\141\164\x75\163"] ?? ''; goto D0dcb; e0c0f: $droplet->setStatus($dropletStatus); goto dc3c1; d7a95: if (!(false === empty($dropletData))) { goto Aa158; } goto fc884; Cbfd4: $dropletData = $this->getDropletData(); goto Bf743; Cbfa5: $dropletRegionName = $dropletData["\x72\x65\147\151\157\156"]["\156\x61\x6d\x65"] ?? ''; goto Bdd4e; eaab8: } private function getDropletData() : array { goto E601b; C7b4d: $response = $this->retry(function () use($httpClient, $request) { $response = $httpClient->send($request); return $response; }); goto A0d55; c81f2: $request = new Request("\107\105\124", $requestUrl); goto fc392; bb4ab: c7822: goto fddef; fddef: return $this->dropletData; goto F7e10; f3df7: $requestUrl = sprintf("\45\163\57\144\162\x6f\160\x6c\x65\x74\x73\x2f\45\163", rtrim(self::API_ENDPOINT, "\57"), $dropletId); goto c81f2; ab49b: if (!(200 == $responseStatusCode)) { goto d70be; } goto D3ecb; Ddc49: d70be: goto bb4ab; Dd09f: if (!(true === empty($this->dropletData))) { goto c7822; } goto f3df7; D3ecb: $responseData = json_decode((string) $response->getBody(), true); goto Aa94f; E601b: $dropletId = $this->instance->getDropletId(); goto Dd09f; B4920: E0773: goto Ddc49; fc392: $httpClient = $this->getHttpClient(); goto C7b4d; f5fcc: $this->dropletData = $responseData["\144\x72\157\x70\154\x65\x74"]; goto B4920; Aa94f: if (!(true === isset($responseData["\x64\x72\157\x70\x6c\145\164"]) && true === is_array($responseData["\x64\162\x6f\x70\x6c\145\164"]))) { goto E0773; } goto f5fcc; A0d55: $responseStatusCode = $response->getStatusCode(); goto ab49b; F7e10: } public function getVolume($id) : ?Volume { goto cc368; Cbb4a: $volume->setDescription($description); goto b9657; f764c: $response = $this->retry(function () use($httpClient, $request) { $response = $httpClient->send($request); return $response; }); goto D0fe5; cf488: $responseData = json_decode($responseData, true); goto Fef86; b36a0: $request = new Request("\x47\x45\124", $requestUrl); goto B9387; cc368: $volume = null; goto a4d32; Bedd8: $volume->setSize($size); goto b145a; b9657: $volume->setCreatedAt($createdAt); goto Bedd8; bedcf: $responseData = trim((string) $response->getBody()); goto cf488; F3b10: $createdAt = true === isset($doVolume["\143\162\x65\x61\164\145\x64\137\x61\164"]) ? new \DateTime($doVolume["\143\162\145\141\x74\x65\144\x5f\x61\x74"]) : new \DateTime(); goto C912c; E05d7: $volume->setName($name); goto Cbb4a; e67b5: A7307: goto e6c22; abd72: $name = $doVolume["\x6e\x61\155\x65"] ?? ''; goto E0887; e6c22: return $volume; goto Eef5f; D0fe5: $responseStatusCode = $response->getStatusCode(); goto d0f88; Df986: $id = $doVolume["\x69\x64"] ?? ''; goto abd72; C912c: $size = true === isset($doVolume["\163\x69\x7a\145\137\x67\151\147\x61\142\171\164\145\163"]) ? (float) $doVolume["\163\x69\172\x65\137\x67\151\x67\x61\142\171\164\145\x73"] : 0.0; goto cdc30; cdc30: $tags = true === isset($doVolume["\164\141\147\163"]) ? (array) $doVolume["\164\x61\x67\x73"] : []; goto E4ce2; a4d32: $requestUrl = sprintf("\45\x73\x2f\x76\x6f\x6c\165\x6d\145\x73\57\45\163", rtrim(self::API_ENDPOINT, "\57"), $id); goto b36a0; B9387: $httpClient = $this->getHttpClient(); goto f764c; Fef86: if (!(true === is_array($responseData))) { goto c3478; } goto F7e00; E0887: $description = $doVolume["\x64\x65\163\143\x72\151\160\164\x69\157\156"] ?? ''; goto F3b10; b145a: $volume->setTags($tags); goto e3fff; e3fff: c3478: goto e67b5; d0f88: if (!(200 == $responseStatusCode)) { goto A7307; } goto bedcf; E4ce2: $volume = new Volume(); goto A4d50; F7e00: $doVolume = true === isset($responseData["\166\157\154\x75\x6d\x65"]) ? (array) $responseData["\166\157\x6c\165\155\x65"] : []; goto Df986; A4d50: $volume->setId($id); goto E05d7; Eef5f: } public function getDropletSnapshots() : array { goto Aae2e; D89d0: $response = $this->retry(function () use($httpClient, $request) { $response = $httpClient->send($request); return $response; }); goto c1f52; Ec9cd: F5d77: goto c1a7d; cc7ec: $requestUrl = sprintf("\45\163\x2f\163\156\141\x70\163\x68\x6f\x74\x73\x3f\160\x61\147\x65\x3d\61\x26\160\145\x72\x5f\160\x61\x67\145\x3d\x31\60\x30\x30\60\46\x72\145\x73\x6f\x75\162\143\145\x5f\164\171\160\x65\x3d\x64\x72\157\x70\x6c\x65\x74", rtrim(self::API_ENDPOINT, "\57")); goto e4470; c52aa: C8ad4: goto Ab862; ecc19: $responseData = trim((string) $response->getBody()); goto C545b; c1f52: $responseStatusCode = $response->getStatusCode(); goto F3ec6; Ab862: return $snapshots; goto Ac72c; Eacff: $httpClient = $this->getHttpClient(); goto D89d0; C545b: $responseData = json_decode($responseData, true); goto dc6c4; dc6c4: if (!(true === is_array($responseData))) { goto f2850; } goto f269d; Aae2e: $snapshots = []; goto cc7ec; F3ec6: if (!(200 == $responseStatusCode)) { goto C8ad4; } goto ecc19; e4470: $request = new Request("\107\x45\124", $requestUrl); goto Eacff; A6afb: foreach ($doSnapshots as $snapshot) { goto a649f; D9f99: $snapshot->setSize($size); goto B1676; E8ba7: $name = $snapshot["\x6e\141\155\x65"] ?? ''; goto Df1a8; b2a7c: C2f03: goto Beceb; f6a5e: $resourceId = $snapshot["\162\x65\x73\x6f\x75\162\x63\145\x5f\151\x64"] ?? ''; goto E8ba7; b84b6: $snapshot = new DropletSnapshot(); goto B6329; a649f: $id = $snapshot["\x69\144"] ?? ''; goto f6a5e; Cbf7e: $snapshot->setResourceId($resourceId); goto e2978; e2978: $snapshot->setName($name); goto acbe8; F5739: $tags = true === isset($snapshot["\x74\x61\147\x73"]) ? (array) $snapshot["\x74\x61\147\x73"] : []; goto c405b; ce9da: $createdAt = true === isset($snapshot["\143\162\145\x61\x74\x65\144\x5f\141\164"]) ? new \DateTime($snapshot["\x63\x72\x65\141\x74\x65\x64\x5f\x61\x74"]) : new \DateTime(); goto F5739; c405b: $size = true === isset($snapshot["\x73\151\172\x65\137\147\151\147\141\x62\171\164\x65\163"]) ? (float) $snapshot["\x73\x69\172\x65\x5f\147\x69\147\141\142\171\x74\145\163"] : 0.0; goto b84b6; B6329: $snapshot->setId($id); goto Cbf7e; B1676: $snapshot->setTags($tags); goto aeda1; Df1a8: if (!(false === empty($name) && "\x2d\143\x6c\160" == substr($name, -4))) { goto dc602; } goto ce9da; aeda1: $snapshots[] = $snapshot; goto Efdc0; Efdc0: dc602: goto b2a7c; acbe8: $snapshot->setCreatedAt($createdAt); goto D9f99; Beceb: } goto Ec9cd; f269d: $doSnapshots = $responseData["\x73\x6e\141\160\x73\x68\157\x74\x73"] ?? []; goto A6afb; c1a7d: f2850: goto c52aa; Ac72c: } public function getSnapshotsForDroplet() : array { goto F0107; De4b8: D586d: goto E45a2; a7258: $snapshotsForDroplet = []; goto E5582; E5582: $snapshots = $this->getDropletSnapshots(); goto Ad68f; E45a2: return $snapshotsForDroplet; goto eb06d; Ad68f: foreach ($snapshots as $snapshot) { goto B98e6; B98e6: $snapshotDropletId = $snapshot->getResourceId(); goto fad51; E80f2: Ab6b3: goto C85d9; fad51: if (!($snapshotDropletId == $dropletId)) { goto Ab6b3; } goto Fabef; Fabef: $snapshotsForDroplet[] = $snapshot; goto E80f2; C85d9: f4027: goto A3dc9; A3dc9: } goto De4b8; F0107: $dropletId = $this->instance->getDropletId(); goto a7258; eb06d: } public function getDropletSnapshot($id) : ?DropletSnapshot { goto f3834; B1374: foreach ($snapshots as $snapshot) { goto bf531; d7943: goto C818f; goto fed99; fed99: Abcab: goto Aa7a5; ec550: $dropletSnapshot = $snapshot; goto d7943; a781a: if (!($snapshotId == $id)) { goto Abcab; } goto ec550; bf531: $snapshotId = $snapshot->getId(); goto a781a; Aa7a5: Ed125: goto b53f2; b53f2: } goto a5997; d38d8: $snapshots = $this->getDropletSnapshots(); goto B1374; f3834: $dropletSnapshot = null; goto d38d8; c89a5: return $dropletSnapshot; goto D3aa3; a5997: C818f: goto c89a5; D3aa3: } public function deleteDropletSnapshot($id) : Response { goto Ded4a; Ded4a: $requestUrl = sprintf("\45\163\57\163\x6e\141\160\163\150\157\164\163\x2f\45\x73", rtrim(self::API_ENDPOINT, "\x2f"), $id); goto Dbebf; a3980: return $response; goto Cca30; Ba67b: $response = $this->retry(function () use($httpClient, $request) { $response = $httpClient->send($request); return $response; }); goto a3980; Dbebf: $request = new Request("\104\x45\x4c\x45\x54\105", $requestUrl); goto A0cc3; A0cc3: $httpClient = $this->getHttpClient(); goto Ba67b; Cca30: } public function createDropletSnapshot($snapshotName) : Response { goto F380e; F380e: if (!("\55\143\154\x70" != substr($snapshotName, -4))) { goto ba7af; } goto d0e4c; d72ea: $requestUrl = sprintf("\x25\x73\x2f\x64\x72\157\x70\x6c\x65\x74\163\57\x25\x73\57\x61\143\x74\151\157\x6e\x73", rtrim(self::API_ENDPOINT, "\57"), $dropletId); goto f0ec4; dd3ca: $response = $this->retry(function () use($httpClient, $requestUrl, $data) { $response = $httpClient->post($requestUrl, ["\x62\x6f\x64\171" => json_encode($data)]); return $response; }); goto D8c23; D8c23: return $response; goto c6762; f0ec4: $httpClient = $this->getHttpClient(); goto Aa808; Aa808: $data = ["\156\x61\x6d\x65" => $snapshotName, "\164\171\x70\x65" => "\163\x6e\141\x70\163\x68\157\164"]; goto dd3ca; Cee99: ba7af: goto F9495; F9495: $dropletId = $this->instance->getDropletId(); goto d72ea; d0e4c: $snapshotName = sprintf("\x25\163\55\143\x6c\x70", $snapshotName); goto Cee99; c6762: } public function createVolumeSnapshot($id) : void { goto Ed625; b64fa: $dateTime = new \DateTime(); goto f5a06; bb4c1: $httpClient = $this->getHttpClient(); goto d4c2d; f5a06: $volumeName = $volume->getName(); goto d4f3a; Ed625: $volume = $this->getVolume($id); goto Aee49; dc7a3: $requestUrl = sprintf("\x25\163\x2f\x76\157\x6c\x75\155\x65\163\57\45\163\x2f\163\x6e\141\160\163\x68\x6f\164\163", rtrim(self::API_ENDPOINT, "\57"), $id); goto bb4c1; d4c2d: $data = ["\x6e\x61\x6d\x65" => $volumeSnapshotName]; goto C9e9c; c37a2: f425f: goto c65a8; d4f3a: $volumeSnapshotName = sprintf("\x25\x73\55\x25\163\x2d\45\163\x2d\143\x6c\160", $volumeName, $dateTime->format("\131\55\155\55\144"), $dateTime->getTimestamp()); goto dc7a3; Aee49: if (!(false === is_null($volume))) { goto f425f; } goto b64fa; C9e9c: $response = $this->retry(function () use($httpClient, $requestUrl, $data) { $response = $httpClient->post($requestUrl, ["\142\x6f\144\x79" => json_encode($data)]); return $response; }); goto c37a2; c65a8: } public function getVolumeSnapshots($id) : array { goto a5509; Cecea: $requestUrl = sprintf("\45\163\x2f\x76\x6f\x6c\165\x6d\145\163\57\x25\x73\57\163\x6e\141\160\x73\x68\x6f\x74\163\x3f\160\x61\x67\145\75\61\46\160\x65\162\137\160\x61\147\145\75\61\x30\60\60", rtrim(self::API_ENDPOINT, "\57"), $id); goto ff57d; Ab776: return $volumeSnapshots; goto d762f; ff57d: $request = new Request("\x47\x45\124", $requestUrl); goto Eab69; D64bf: $doVolumeSnapshots = $responseData["\163\156\141\x70\x73\x68\x6f\164\163"] ?? []; goto e763c; Afddb: $responseStatusCode = $response->getStatusCode(); goto c2634; b2e27: $response = $this->retry(function () use($httpClient, $request) { $response = $httpClient->send($request); return $response; }); goto Afddb; c2634: if (!(200 == $responseStatusCode)) { goto e4fa8; } goto Ecb3c; B2ce6: e4fa8: goto Ab776; e1817: $responseData = json_decode($responseData, true); goto Fec0a; Eab69: $httpClient = $this->getHttpClient(); goto b2e27; e763c: foreach ($doVolumeSnapshots as $doVolumeSnapshot) { goto A403f; A9494: $volumeSnapshot->setCreatedAt($createdAt); goto fcff6; C4d36: if (!(false === empty($name) && "\55\x63\x6c\x70" == substr($name, -4))) { goto bd380; } goto Aad77; a2097: $volumeSnapshots[] = $volumeSnapshot; goto A522b; A522b: bd380: goto E1c78; E1c78: a3b23: goto aa2c8; fcff6: $volumeSnapshot->setSize($size); goto a2097; bc0bf: $volumeSnapshot->setName($name); goto A9494; A403f: $id = $doVolumeSnapshot["\x69\144"] ?? ''; goto D6547; B64e8: $volumeSnapshot = new VolumeSnapshot(); goto df135; df135: $volumeSnapshot->setId($id); goto bc0bf; D6547: $name = $doVolumeSnapshot["\x6e\x61\155\145"] ?? ''; goto C4d36; Aad77: $createdAt = true === isset($doVolumeSnapshot["\143\162\145\x61\x74\x65\x64\x5f\141\x74"]) ? new \DateTime($doVolumeSnapshot["\x63\x72\145\x61\x74\x65\144\137\x61\x74"]) : new \DateTime(); goto Ac20d; Ac20d: $size = true === isset($doVolumeSnapshot["\x73\x69\172\x65\137\147\151\147\x61\142\x79\164\145\x73"]) ? (float) $doVolumeSnapshot["\x73\151\x7a\145\x5f\147\151\x67\141\x62\171\164\145\x73"] : 0.0; goto B64e8; aa2c8: } goto B0959; B0959: bc5b5: goto ce4b9; a5509: $volumeSnapshots = []; goto Cecea; Ecb3c: $responseData = trim((string) $response->getBody()); goto e1817; ce4b9: F88c9: goto B2ce6; Fec0a: if (!(true === is_array($responseData))) { goto F88c9; } goto D64bf; d762f: } public function deleteVolumeSnapshot($id) : void { goto be01d; f2ba5: $httpClient = $this->getHttpClient(); goto b4717; b4717: $response = $this->retry(function () use($httpClient, $request) { $response = $httpClient->send($request); return $response; }); goto e652a; D5e26: $request = new Request("\x44\x45\x4c\x45\124\105", $requestUrl); goto f2ba5; be01d: $requestUrl = sprintf("\45\x73\57\163\156\141\x70\163\x68\x6f\x74\163\57\45\x73", rtrim(self::API_ENDPOINT, "\x2f"), $id); goto D5e26; e652a: } public function setToken($token) : void { $this->token = $token; } public function getToken() : ?string { return $this->token; } public function unsetHttpClient() { $this->httpClient = null; } private function getHttpClient() : HttpClient { goto C3c8d; C2775: return $this->httpClient; goto F0d91; a2d7e: $config = ["\x74\151\155\145\x6f\x75\164" => self::HTTP_CLIENT_TIMEOUT, "\x76\145\x72\x69\146\171" => false, "\150\145\141\x64\x65\162\163" => ["\x43\157\x6e\164\x65\x6e\164\55\x54\171\160\145" => "\141\x70\x70\154\151\x63\x61\164\x69\157\156\57\152\163\157\156", "\x41\x75\x74\x68\x6f\162\151\x7a\x61\x74\x69\x6f\156" => sprintf("\x42\x65\141\x72\x65\x72\40\x25\163", $token)]]; goto c6e9b; a32b7: $token = $this->getToken(); goto a2d7e; Dc3e3: C285b: goto C2775; C3c8d: if (!(true === is_null($this->httpClient))) { goto C285b; } goto a32b7; c6e9b: $this->httpClient = new HttpClient($config); goto Dc3e3; F0d91: } public function getMetaDataValue($key) : string { try { goto f195d; f195d: $value = ''; goto e2c62; Fbe1f: $response = $this->retry(function () use($httpClient, $request) { $response = $httpClient->send($request); return $response; }); goto eda7d; e2c62: $requestUrl = sprintf("\x25\163\57\45\x73", rtrim(self::META_DATA_ENDPOINT, "\x2f"), $key); goto c70e2; e02f7: $value = trim((string) $response->getBody()); goto B68a0; c70e2: $request = new Request("\x47\x45\x54", $requestUrl); goto afcbf; eab66: if (!(200 == $responseStatusCode)) { goto b4f1f; } goto e02f7; B68a0: b4f1f: goto e3b02; afcbf: $httpClient = $this->getHttpClient(); goto Fbe1f; eda7d: $responseStatusCode = $response->getStatusCode(); goto eab66; e3b02: } catch (\Exception $e) { } return $value; } private function retry(callable $fn, $retries = 1, $delay = 3) { return Retry::retry($fn, $retries, $delay); } }
