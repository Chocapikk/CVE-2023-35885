<?php
 namespace App\Site\Nginx\Vhost; use App\Site\Site; use App\Site\Nginx\Vhost\Processor\Processor; use App\Site\Nginx\Vhost\Processor\RootDirectory as RootDirectoryProcessor; use App\Site\Nginx\Vhost\Processor\ServerName as ServerNameProcessor; use App\Site\Nginx\Vhost\Processor\RedirectServerName as RedirectServerNameProcessor; use App\Site\Nginx\Vhost\Processor\RedirectDomain as RedirectDomainProcessor; use App\Site\Nginx\Vhost\Processor\NginxAccessLog as NginxAccessLogProcessor; use App\Site\Nginx\Vhost\Processor\NginxErrorLog as NginxErrorLogProcessor; use App\Site\Nginx\Vhost\Processor\SslCertificateKey as NginxCertificateKeyProcessor; use App\Site\Nginx\Vhost\Processor\SslCertificate as NginxCertificateProcessor; use App\Site\Nginx\Vhost\Processor\Settings as SettingsProcessor; class Template { protected Site $site; protected ?string $content = null; protected array $placeholders = []; protected array $processors = []; public function __construct(Site $site) { $this->site = $site; $this->init(); } protected function init() : void { goto E54ea; ee5fd: $settingsProcessor = new SettingsProcessor(); goto a125a; d1112: $serverNameProcessor = new ServerNameProcessor(); goto b53e4; f8276: $nginxAccessLogProcessor = new NginxAccessLogProcessor(); goto cf496; a1e30: $this->addProcessor($certificateKeyProcessor); goto B11f6; B11f6: $this->addProcessor($certificateProcessor); goto d8bd2; C076c: $this->addProcessor($nginxErrorLogProcessor); goto a1e30; a5bc0: $this->addProcessor($nginxAccessLogProcessor); goto C076c; f9349: $certificateKeyProcessor = new NginxCertificateKeyProcessor(); goto E220f; cf496: $nginxErrorLogProcessor = new NginxErrorLogProcessor(); goto f9349; a125a: $this->addProcessor($rootDirectoryProcessor); goto C4a6f; e816c: $redirectDomainProcessor = new RedirectDomainProcessor(); goto f8276; daeb6: $this->addProcessor($redirectServerNameProcessor); goto C5636; C4a6f: $this->addProcessor($serverNameProcessor); goto daeb6; E54ea: $rootDirectoryProcessor = new RootDirectoryProcessor(); goto d1112; E220f: $certificateProcessor = new NginxCertificateProcessor(); goto ee5fd; d8bd2: $this->addProcessor($settingsProcessor); goto f70a2; C5636: $this->addProcessor($redirectDomainProcessor); goto a5bc0; b53e4: $redirectServerNameProcessor = new RedirectServerNameProcessor(); goto e816c; f70a2: } public function getSite() : Site { return $this->site; } public function setContent(string $content) : void { $this->content = $content; } public function getContent() : ?string { return $this->content; } public function build() : void { goto f0c90; b4d37: $placeholders = $this->getPlaceholders(); goto d34f5; A7beb: e8af7: goto f5e2b; f0c90: $processors = $this->getProcessors(); goto b4d37; d34f5: foreach ($placeholders as $placeholder) { goto C27aa; d17ed: afb4f: goto Dba0a; B90af: $this->content = $processor->process($this->content); goto F9fbb; C731f: $processor = $processors[$placeholder]; goto E007a; E007a: $processor->setSite($this->site); goto B90af; D26dc: if (!(true === $hasProcessor)) { goto d2967; } goto C731f; C73c9: d2967: goto d17ed; F9fbb: $this->removePlaceholder($placeholder); goto C73c9; C27aa: $hasProcessor = $this->hasProcessor($placeholder); goto D26dc; Dba0a: } goto A7beb; f5e2b: } public function removeEmptyPlaceholders() : void { goto c8394; c8394: $placeholders = $this->getPlaceholders(); goto f528a; E31a6: c7e3a: goto aa8d6; f528a: foreach ($placeholders as $placeholder) { $this->content = str_replace($placeholder, '', $this->content); ffab2: } goto E31a6; aa8d6: } protected function hasProcessor(string $placeholder) : bool { return isset($this->processors[$placeholder]); } protected function getProcessors() : array { return $this->processors; } public function addProcessor(Processor $processor) : void { $this->processors[$processor->getPlaceholder()] = $processor; } public function resetProcessors() : void { $this->processors = []; } public function getPlaceholders() : array { goto Eb162; Aba94: c654c: goto ee4b9; ee4b9: d8830: goto E0076; A0f88: foreach ($placeholders as $placeholder) { goto A05d7; d20a0: $this->addPlaceholder($placeholder); goto F4e7a; D87b5: d7dfe: goto E1633; F4e7a: caebe: goto D87b5; A05d7: $placeholder = trim($placeholder); goto F95f8; F95f8: if (!(false === empty($placeholder))) { goto caebe; } goto d20a0; E1633: } goto Aba94; B42bf: preg_match_all("\x2f\133\x7b\x7b\135\173\x32\x7d\50\133\134\x73\x61\x2d\x7a\101\x2d\x5a\x30\55\71\x5f\x5d\53\x29\133\x7d\x7d\x5d\x7b\62\x7d\57", $this->content, $placeholders); goto C91d6; Eb162: if (!(true === empty($this->placeholders))) { goto b8e14; } goto B42bf; C91d6: if (!(true === isset($placeholders[0]) && count($placeholders[0]))) { goto d8830; } goto bef7f; fdee3: return $this->placeholders; goto E5256; E0076: b8e14: goto fdee3; bef7f: $placeholders = $placeholders[0]; goto A0f88; E5256: } private function addPlaceholder(string $placeholder) : void { $this->placeholders[$placeholder] = $placeholder; } private function removePlaceholder(string $placeholder) : void { goto a3d9c; Bdbea: unset($this->placeholders[$placeholder]); goto E5c0d; E5c0d: a2000: goto a20e1; a3d9c: if (!(true === isset($this->placeholders[$placeholder]))) { goto a2000; } goto Bdbea; a20e1: } }
