<?php
 namespace App\Site\VarnishCache; use GuzzleHttp\Client as HttpClient; use GuzzleHttp\Psr7\Request; use GuzzleHttp\Psr7\Response; use App\Util\Retry; class Client { const HTTP_CLIENT_TIMEOUT = 10; private ?HttpClient $httpClient = null; private ?string $server = null; public function setServer(?string $server) : void { $this->server = $server; } public function getServer() : ?string { return $this->server; } public function purgeUrl(string $url) : void { goto B0fdb; bf088: $this->sendPurgeRequest($requestUrl, $headers); goto Faa6b; c7aaa: C60b4: goto Be27a; Be27a: $host = $parsedUrl["\150\157\x73\x74"]; goto E71b3; Faa6b: b0293: goto B20d7; be9a3: $path = $parsedUrl["\x70\x61\164\150"]; goto E555e; f9268: A0a72: goto F639d; A5cb3: Dfb12: goto a5b20; Db290: parse_str($queryString, $queryParams); goto eba90; Bf562: $requestUrl = sprintf("\45\x73\x3f\45\x73", $requestUrl, $queryString); goto Ee1a8; E555e: $requestUrl = sprintf("\45\163\57\45\163", $requestUrl, "\57" == $path ? '' : ltrim($path, "\x2f")); goto f9268; a7960: goto b0293; goto c7aaa; a724a: if (!(true === isset($parsedUrl["\160\141\164\x68"]))) { goto A0a72; } goto be9a3; Cc16b: $queryString = http_build_query($queryParams); goto Bf562; ac1a7: if (!(false === empty($queryString))) { goto Dfb12; } goto Db290; E71b3: $requestUrl = $server; goto a724a; Ee1a8: b729e: goto A5cb3; F73e8: $parsedUrl = parse_url($url); goto ca13f; F639d: $queryString = parse_url($url, PHP_URL_QUERY); goto ac1a7; B0fdb: $server = $this->getServer(); goto F73e8; eba90: if (!(false === empty($queryParams))) { goto b729e; } goto Cc16b; ca13f: if (true === isset($parsedUrl["\150\157\163\x74"])) { goto C60b4; } goto d1115; a5b20: $headers = ["\110\x6f\x73\164" => $host]; goto bf088; d1115: throw new \Exception(sprintf("\116\x6f\164\40\x61\40\x76\x61\154\x69\x64\40\165\x72\x6c\72\40\45\163", $url)); goto a7960; B20d7: } public function purgeHost(string $host) : void { goto D8363; f57b8: $headers = ["\110\157\x73\x74" => $host]; goto Dab8c; D8363: $server = $this->getServer(); goto f57b8; Dab8c: $this->sendPurgeRequest($server, $headers); goto d87c4; d87c4: } public function purgeTag(string $tag) : void { $this->purgeTags([$tag]); } public function purgeTags(array $tags) : void { goto a2b06; d0290: $this->sendPurgeRequest($server, $headers); goto ee0a0; a2b06: $server = $this->getServer(); goto b51a5; b51a5: $headers = ["\x58\x2d\103\141\143\150\145\x2d\x54\141\147\163" => implode("\54", $tags)]; goto d0290; ee0a0: } private function sendPurgeRequest(string $requestUrl, array $headers) : void { goto C9c8b; ac8b1: $httpClient = $this->getHttpClient(); goto d2e02; C9c8b: $request = new Request("\120\x55\x52\x47\x45", $requestUrl, $headers); goto ac8b1; d2e02: $httpClient->send($request); goto e3a18; e3a18: } private function getHttpClient() : HttpClient { goto f3752; e2cf7: $config = ["\164\151\155\145\x6f\x75\x74" => self::HTTP_CLIENT_TIMEOUT, "\166\x65\162\151\146\x79" => false]; goto ef8cf; cb005: return $this->httpClient; goto Ce66d; f3752: if (!(true === is_null($this->httpClient))) { goto Bd243; } goto e2cf7; Bd08b: Bd243: goto cb005; ef8cf: $this->httpClient = new HttpClient($config); goto Bd08b; Ce66d: } private function retry(callable $fn, $retries = 1, $delay = 3) { return Retry::retry($fn, $retries, $delay); } }
