<?php
 namespace App\Site; use App\System\Command\CopyFileCommand; use App\System\Command\DeleteFileCommand; use App\System\Command\NginxConfigTestCommand; use App\System\CommandExecutor; use App\System\Command\ChownCommand; use App\System\Command\FindChmodCommand; use App\System\Command\WriteFileCommand; use App\System\Command\CreateDirectoryCommand; use App\System\Command\DeleteDirectoryCommand; use App\System\Command\ChangeUserHomeDirectoryCommand; use App\System\Command\CreateUserCommand; use App\System\Command\DeleteUserCommand; use App\System\Command\ChangeUserPasswordCommand; use App\System\Command\CreateSymlinkCommand; use App\System\Command\ServiceReloadCommand; use App\Entity\BasicAuth as BasicAuthEntity; use App\Entity\Certificate as CertificateEntity; use App\Entity\FtpUser as FtpUserEntity; use App\Entity\SshUser as SshUserEntity; use App\Entity\Site as SiteEntity; use App\Site\Ssl\LetsEncrypt\CertificateOrder; use App\Site\Nginx\Exception\InvalidVhostException; use App\Site\Nginx\Vhost\StaticTemplate; use App\Site\Nginx\Vhost\NodejsTemplate; use App\Site\Nginx\Vhost\PhpTemplate; use App\Site\Nginx\Vhost\PythonTemplate; use App\Site\Nginx\Vhost\ReverseProxyTemplate; abstract class Updater { public const NGINX_BASIC_AUTH_DIRECTORY = "\x2f\145\164\143\x2f\156\147\x69\156\170\57\142\x61\163\151\143\x2d\x61\165\164\x68\x2f"; public const NGINX_VHOST_DIRECTORY = "\57\145\164\143\57\156\x67\x69\156\x78\x2f\x73\x69\x74\x65\163\x2d\x65\x6e\141\142\x6c\145\144\57"; public const NGINX_SSL_CERTIFICATES_DIRECTORY = "\x2f\x65\x74\x63\57\156\x67\x69\x6e\x78\57\x73\x73\154\55\x63\145\x72\164\151\146\x69\x63\x61\x74\145\163\57"; public const CRON_DIRECTORY = "\x2f\145\164\143\57\143\162\157\156\56\144\x2f"; protected Site $site; protected CommandExecutor $commandExecutor; public function __construct(Site $site) { $this->site = $site; $this->commandExecutor = new CommandExecutor(); } public function domainSettings() : void { $this->updateNginxVhost(); $this->reloadNginxService(); } public function updateNginxVhost() : void { goto A1402; a86be: $vhostTemplate->removeEmptyPlaceholders(); goto deddb; cf362: $vhostFileContent = $this->site->getVhostTemplate(); goto Db876; de19a: $this->commandExecutor->execute($writeVhostFileCommand); goto B1d06; A1402: $domainName = $this->site->getDomainName(); goto cf362; Af6cd: $vhostTemplate->setContent($vhostFileContent); goto Bf254; Db876: switch ($this->site->getType()) { case SiteEntity::TYPE_PHP: $vhostTemplate = new PhpTemplate($this->site); goto Bd15a; case SiteEntity::TYPE_NODEJS: $vhostTemplate = new NodejsTemplate($this->site); goto Bd15a; case SiteEntity::TYPE_STATIC: $vhostTemplate = new StaticTemplate($this->site); goto Bd15a; case SiteEntity::TYPE_PYTHON: $vhostTemplate = new PythonTemplate($this->site); goto Bd15a; case SiteEntity::TYPE_REVERSE_PROXY: $vhostTemplate = new ReverseProxyTemplate($this->site); goto Bd15a; } goto Ac477; c4205: $writeVhostFileCommand->setContent($vhostContent); goto de19a; Dca13: $writeVhostFileCommand = new WriteFileCommand(); goto c2ecf; f7c95: $vhostTemplate->build(); goto a86be; e1524: Bd15a: goto Af6cd; Bf254: $vhostFile = sprintf("\45\x73\57\45\x73\56\x63\157\x6e\x66", rtrim(self::NGINX_VHOST_DIRECTORY, "\x2f"), $domainName); goto f7c95; Ac477: c43be: goto e1524; deddb: $vhostContent = $vhostTemplate->getContent(); goto Dca13; c2ecf: $writeVhostFileCommand->setFile($vhostFile); goto c4205; B1d06: } public function updateNginxVhostWithRollback() : void { try { goto A7f69; ce1cc: $reloadNginxServiceCommand->setServiceName("\156\147\151\x6e\170"); goto f0beb; e08d0: switch ($this->site->getType()) { case SiteEntity::TYPE_PHP: $vhostTemplate = new PhpTemplate($this->site); goto c58db; case SiteEntity::TYPE_NODEJS: $vhostTemplate = new NodejsTemplate($this->site); goto c58db; case SiteEntity::TYPE_STATIC: $vhostTemplate = new StaticTemplate($this->site); goto c58db; case SiteEntity::TYPE_PYTHON: $vhostTemplate = new PythonTemplate($this->site); goto c58db; case SiteEntity::TYPE_REVERSE_PROXY: $vhostTemplate = new ReverseProxyTemplate($this->site); goto c58db; } goto E32ed; b3e6d: b5cf3: goto d37d9; cd941: $writeVhostFileCommand->setFile($vhostFile); goto c0a67; C494d: $vhostTemplate->removeEmptyPlaceholders(); goto dd4c8; c0a67: $writeVhostFileCommand->setContent($vhostContent); goto b4f9a; Af8c6: if (!("\144\145\x76" != $_ENV["\x41\x50\x50\x5f\x45\116\x56"])) { goto b5cf3; } goto F71e3; dd4c8: $vhostContent = $vhostTemplate->getContent(); goto e4074; db164: $this->commandExecutor->execute($nginxConfigTestCommand); goto Af8c6; Ef438: $deleteVhostBackupFileCommand = new DeleteFileCommand(); goto B67e4; b030d: $vhostTemplate->build(); goto C494d; A7f69: $domainName = $this->site->getDomainName(); goto e786b; d37d9: $this->commandExecutor->execute($deleteVhostBackupFileCommand); goto D280f; D9a7f: $copyVhostBackupFileCommand->setSourceFile($vhostFile); goto E3fe8; b4f03: $this->commandExecutor->execute($writeVhostFileCommand); goto db164; E32ed: e45b7: goto Ef3b6; f0beb: $this->commandExecutor->execute($reloadNginxServiceCommand); goto b3e6d; F71e3: $reloadNginxServiceCommand = new ServiceReloadCommand(); goto ce1cc; e786b: $vhostFileContent = $this->site->getVhostTemplate(); goto e08d0; b4f9a: $nginxConfigTestCommand = new NginxConfigTestCommand(); goto Ef438; bcb06: $writeVhostFileCommand = new WriteFileCommand(); goto cd941; fd491: $vhostTemplate->setContent($vhostFileContent); goto bf3fa; Ebf6c: $copyVhostBackupFileCommand = new CopyFileCommand(); goto D9a7f; B67e4: $deleteVhostBackupFileCommand->setFile($vhostBackupFile); goto d1c6c; Ef3b6: c58db: goto fd491; e4074: $vhostBackupFile = sprintf("\x25\x73\57\45\163\x2e\143\x6f\x6e\x66\x2e\x62\141\153", rtrim(self::NGINX_VHOST_DIRECTORY, "\x2f"), $domainName); goto Ebf6c; bf3fa: $vhostFile = sprintf("\45\x73\57\x25\x73\x2e\x63\157\x6e\146", rtrim(self::NGINX_VHOST_DIRECTORY, "\x2f"), $domainName); goto b030d; d1c6c: $this->commandExecutor->execute($copyVhostBackupFileCommand); goto b4f03; E3fe8: $copyVhostBackupFileCommand->setDestinationFile($vhostBackupFile); goto bcb06; D280f: } catch (\Exception $e) { goto B2f22; f2885: $errorMessage = $nginxConfigTestCommand->getOutput(); goto C05a4; Ce6be: $restoreBackupFileCommand = new CopyFileCommand(); goto f5ccc; b4628: if (!(true === isset($reloadNginxServiceCommand))) { goto be283; } goto bf37c; B2f22: $errorMessage = $e->getMessage(); goto bece1; bf37c: $this->commandExecutor->execute($reloadNginxServiceCommand); goto F40fd; a6958: $this->commandExecutor->execute($deleteVhostBackupFileCommand); goto Bdb34; F40fd: be283: goto a6958; a0398: $restoreBackupFileCommand->setDestinationFile($vhostFile); goto a3c87; a3c87: $this->commandExecutor->execute($restoreBackupFileCommand); goto b4628; C05a4: Aee62: goto Ce6be; bece1: if (!(true === isset($nginxConfigTestCommand))) { goto Aee62; } goto f2885; Bdb34: throw new InvalidVhostException($errorMessage); goto b6a1f; f5ccc: $restoreBackupFileCommand->setSourceFile($vhostBackupFile); goto a0398; b6a1f: } } public function createSshUser(SshUserEntity $sshUserEntity) : void { goto d901a; B9aa4: $createUserCommand->setShell("\57\x62\x69\156\57\x62\141\163\150"); goto e6623; e26b1: $createUserCommand->setGroup($siteUser); goto B9aa4; bff02: $sshDirectoryChmodCommand = new FindChmodCommand(); goto C2540; Aa957: Bdd9e: goto d55f3; Dbf0b: $sshUserPassword = $sshUserEntity->getPassword(); goto f4c18; c0a74: $sshUserName = $sshUserEntity->getUserName(); goto Dbf0b; F47be: $sshDirectoryChmodCommand->setDirectoryChmod(700); goto E2803; df436: $createUserCommand = new CreateUserCommand(); goto Af3c2; E2803: $sshDirectoryChmodCommand->setFileChmod(600); goto C3bf7; b3b30: $skeletonDirectory = realpath(dirname(__FILE__) . "\57\x2e\x2e\57\x2e\56\57\x72\x65\x73\157\165\x72\x63\145\163\x2f\145\x74\143\x2f\x73\x6b\x65\x6c\57\163\x73\x68\55\x75\163\x65\x72\x2f"); goto df436; e6623: $createUserCommand->setSkeletonDirectory($skeletonDirectory); goto a2f27; f4c18: $homeDirectory = sprintf("\57\x68\x6f\155\145\57\45\x73", $sshUserName); goto b3b30; d55f3: $sshDirectory = sprintf("\x2f\150\x6f\155\x65\x2f\x25\x73\x2f\x2e\163\163\x68", $sshUserName); goto bff02; B30c5: $createUserCommand->setPassword($sshUserPassword); goto e26b1; b567b: foreach ($symlinkDirectories as $symlinkDirectory) { goto Af103; Bf180: E2d93: goto Da212; Ba036: if (!("\144\145\166" != $_ENV["\x41\120\x50\x5f\x45\x4e\x56"])) { goto b7ac7; } goto B9081; f31c4: $symlinkCommand = new CreateSymlinkCommand(); goto bd094; Af103: $source = sprintf("\x2f\x68\x6f\155\x65\x2f\45\x73\x2f\45\163", $siteUser, $symlinkDirectory); goto bc7d3; f741f: $symlinkCommand->setSource($source); goto e77da; bc7d3: $destination = sprintf("\x2f\150\x6f\155\x65\x2f\x25\x73\x2f\45\x73", $sshUserName, $symlinkDirectory); goto f31c4; Ebd80: b7ac7: goto Bf180; B9081: $this->commandExecutor->execute($symlinkCommand); goto Ebd80; bd094: $symlinkCommand->setRunAsUser($sshUserName); goto f741f; e77da: $symlinkCommand->setDestination($destination); goto Ba036; Da212: } goto Aa957; C3bf7: $this->commandExecutor->execute($sshDirectoryChmodCommand); goto Ede7e; F9038: $createUserCommand->createHomeDirectory(true); goto dc875; d901a: $site = $sshUserEntity->getSite(); goto ed6ce; Af3c2: $createUserCommand->setUserName($sshUserName); goto B30c5; de8bb: $symlinkDirectories = ["\x62\141\143\x6b\165\x70\x73", "\x68\x74\144\157\x63\163", "\154\x6f\147\163"]; goto b567b; a2f27: $createUserCommand->setHomeDirectory($homeDirectory); goto F9038; dc875: $this->commandExecutor->execute($createUserCommand); goto de8bb; ed6ce: $siteUser = $site->getUser(); goto c0a74; C2540: $sshDirectoryChmodCommand->setFile($sshDirectory); goto F47be; Ede7e: } public function createFtpUser(FtpUserEntity $ftpUserEntity) : void { goto Fb8a7; c329e: $createUserCommand->setUserName($ftpUserName); goto c4048; Eb4bb: $homeDirectory = $ftpUserEntity->getHomeDirectory(); goto b4b50; A93b4: $createUserCommand->setShell("\57\142\151\x6e\x2f\x66\141\x6c\x73\145"); goto F4658; c74a3: $siteUser = $site->getUser(); goto e8c77; E49dc: $createUserCommand->setGroups(["\x66\x74\160\x2d\165\x73\x65\162"]); goto A93b4; A5fcc: $this->commandExecutor->execute($createUserCommand); goto Ee751; b53b6: $ftpUserPassword = $ftpUserEntity->getPassword(); goto Eb4bb; F4658: $createUserCommand->setHomeDirectory($homeDirectory); goto c5848; c5848: $createUserCommand->createHomeDirectory(false); goto A5fcc; Fb8a7: $site = $ftpUserEntity->getSite(); goto c74a3; b4b50: $createUserCommand = new CreateUserCommand(); goto c329e; c4048: $createUserCommand->setPassword($ftpUserPassword); goto ee0f5; ee0f5: $createUserCommand->setGroup($siteUser); goto E49dc; e8c77: $ftpUserName = $ftpUserEntity->getUserName(); goto b53b6; Ee751: } public function deleteUser(string $userName, $removeHomeDirectory = true) : void { goto D82dc; E21a1: $deleteUserCommand->setRemoveHomeDirectory($removeHomeDirectory); goto Ce206; Ce206: $this->commandExecutor->execute($deleteUserCommand); goto Dad2c; D82dc: $deleteUserCommand = new DeleteUserCommand(); goto Ab997; Ab997: $deleteUserCommand->setUserName($userName); goto E21a1; Dad2c: } public function installCertificate(CertificateEntity $certificateEntity) : void { goto a4a11; ae3d4: $writeCertificateFileCommand->setFile($certificateFile); goto c793f; E2ef7: $certificate .= sprintf("\x25\163\45\x73", PHP_EOL, trim($certificateEntity->getCertificateChain())); goto b6356; E084b: $writePrivateKeyFileCommand = new WriteFileCommand(); goto Fdc29; c793f: $writeCertificateFileCommand->setContent($certificate); goto Aad24; e915b: if (!(false === empty($certificateEntity->getCertificateChain()))) { goto b2616; } goto E2ef7; Db072: $certificate = $certificateEntity->getCertificate(); goto e915b; d3ad7: $writePrivateKeyFileCommand->setContent($certificateEntity->getPrivateKey()); goto c3521; Aad24: $this->commandExecutor->execute($writePrivateKeyFileCommand); goto D67d7; Fdc29: $writePrivateKeyFileCommand->setFile($privateKeyFile); goto d3ad7; D67d7: $this->commandExecutor->execute($writeCertificateFileCommand); goto f947d; c3521: $writeCertificateFileCommand = new WriteFileCommand(); goto ae3d4; a4a11: $domainName = $this->site->getDomainName(); goto df2b3; f947d: $this->reloadService("\x6e\147\151\156\170"); goto c0536; e8343: $certificateFile = sprintf("\x25\163\x2f\45\x73\56\x63\x72\164", rtrim(self::NGINX_SSL_CERTIFICATES_DIRECTORY, "\x2f"), $domainName); goto Db072; df2b3: $privateKeyFile = sprintf("\45\163\57\x25\163\x2e\x6b\145\171", rtrim(self::NGINX_SSL_CERTIFICATES_DIRECTORY, "\57"), $domainName); goto e8343; b6356: b2616: goto E084b; c0536: } public function deleteLetsEncryptChallengeDirectory() { goto F9898; F9898: $rootDirectory = $this->getRootDirectory(); goto Fe5f8; Fe5f8: $acemeChallengeDirectory = sprintf("\x25\163\x2f\56\167\145\x6c\x6c\x2d\x6b\x6e\157\x77\156\57", rtrim($rootDirectory, "\x2f")); goto E1f80; E1f80: $deleteAcmeChallengeDirectoryCommand = new DeleteDirectoryCommand(); goto a5ed0; a5ed0: $deleteAcmeChallengeDirectoryCommand->setDirectory($acemeChallengeDirectory); goto A9005; A9005: $this->commandExecutor->execute($deleteAcmeChallengeDirectoryCommand); goto fcd17; fcd17: } public function createBasicAuthFile(BasicAuthEntity $basicAuthEntity) { goto C44e6; Faf76: $writeBasicAuthFileCommand->setContent($basicAuthFileContent); goto Dfd36; c49ec: $basicAuthFileContent = sprintf("\x25\x73\72\45\x73", $basicAuthEntity->getUserName(), crypt($basicAuthEntity->getPassword(), base64_encode($basicAuthEntity->getPassword()))); goto Bcfd6; C44e6: $basicAuthFile = sprintf("\45\x73\57\x25\163", rtrim(self::NGINX_BASIC_AUTH_DIRECTORY, "\57"), $this->site->getDomainName()); goto c49ec; Dfd36: $this->commandExecutor->execute($writeBasicAuthFileCommand); goto Aa889; cc7e9: $writeBasicAuthFileCommand->setFile($basicAuthFile); goto Faf76; Bcfd6: $writeBasicAuthFileCommand = new WriteFileCommand(); goto cc7e9; Aa889: } public function createLetsEncryptChallengeFiles(CertificateOrder $certificateOrder) : void { goto A110c; caf76: $createAcmeChallengeDirectoryCommand = new CreateDirectoryCommand(); goto c8391; a2d45: $chmodWellKnownDirectoryCommand->setFileChmod(770); goto F27ea; A110c: $siteUser = $this->site->getUser(); goto ff16e; Bbda0: $chmodWellKnownDirectoryCommand->setDirectoryChmod(750); goto a2d45; F27ea: $this->commandExecutor->execute($chownWellKnownDirectoryCommandCommand); goto e19c6; abffa: $chownWellKnownDirectoryCommandCommand->setUser($siteUser); goto bd0a2; Bdd28: $this->commandExecutor->execute($createAcmeChallengeDirectoryCommand); goto F6c1d; F6c1d: if (!count($challenges)) { goto Cbb63; } goto c8225; ff16e: $rootDirectory = $this->getRootDirectory(); goto b3244; c8225: foreach ($challenges as $challenge) { goto e8dc7; E62e2: b04e4: goto D08ef; Ec11a: if (!(false === is_null($token) && false === is_null($verificationContent))) { goto b1229; } goto C9cd0; E590a: $challengeWriteFileCommand = new WriteFileCommand(); goto C4028; e8dc7: $token = $challenge["\164\157\153\x65\x6e"] ?? null; goto Dbc81; B0514: $this->commandExecutor->execute($challengeWriteFileCommand); goto e4734; e4734: b1229: goto E62e2; C9cd0: $challengeFile = sprintf("\45\x73\x2f\x25\163", rtrim($acemeChallengeDirectory, "\x2f"), $token); goto E590a; C4028: $challengeWriteFileCommand->setFile($challengeFile); goto c8eaa; Dbc81: $verificationContent = $challenge["\166\145\162\151\x66\x69\x63\x61\x74\x69\157\156\103\157\x6e\x74\145\x6e\x74"] ?? null; goto Ec11a; c8eaa: $challengeWriteFileCommand->setContent($verificationContent); goto B0514; D08ef: } goto d8099; a04c3: $chmodWellKnownDirectoryCommand->setFile($wellKnownDirectory); goto Bbda0; bd0a2: $chownWellKnownDirectoryCommandCommand->setGroup($siteUser); goto Bb3d9; af153: $chownWellKnownDirectoryCommandCommand = new ChownCommand(); goto f9259; d8099: de3df: goto Bdef5; e19c6: $this->commandExecutor->execute($chmodWellKnownDirectoryCommand); goto D81ba; b3244: $wellKnownDirectory = sprintf("\45\163\x2f\56\x77\145\154\x6c\55\x6b\156\x6f\x77\x6e\57", rtrim($rootDirectory, "\x2f")); goto f0ea2; f0ea2: $acemeChallengeDirectory = sprintf("\45\163\57\56\x77\145\x6c\154\x2d\x6b\156\x6f\167\x6e\x2f\x61\x63\x6d\145\55\143\x68\141\x6c\154\x65\156\147\145\x2f", rtrim($rootDirectory, "\57")); goto Fe3d5; c8391: $createAcmeChallengeDirectoryCommand->setDirectory($acemeChallengeDirectory); goto Bdd28; Fe3d5: $challenges = $certificateOrder->getAuthorizationsChallenges(); goto caf76; cd7fd: $chownWellKnownDirectoryCommandCommand->setRecursive(true); goto abffa; Bb3d9: $chmodWellKnownDirectoryCommand = new FindChmodCommand(); goto a04c3; Bdef5: Cbb63: goto af153; f9259: $chownWellKnownDirectoryCommandCommand->setFile($wellKnownDirectory); goto cd7fd; D81ba: } public function updateUserCrontab() : void { goto E3e2c; E6fa6: d1275: goto f8a68; b9c24: if (!count($cronJobs)) { goto d1275; } goto D9124; E3e2c: $siteUser = $this->site->getUser(); goto b7bb7; B584e: $cronJobs = $this->site->getCronJobs(); goto b9c24; f8a68: $crontabContent = implode(PHP_EOL, $crontabEntries); goto Dcc2b; e1eac: $this->commandExecutor->execute($writeCrontabFileCommand); goto B268a; Ece5f: $writeCrontabFileCommand->setContent($crontabContent); goto e1eac; Dcc2b: $writeCrontabFileCommand = new WriteFileCommand(); goto A1036; a333b: $crontabEntries = ["\x4d\101\x49\114\124\117\75\42\42"]; goto B584e; E1396: Ef625: goto E6fa6; b7bb7: $crontabFile = sprintf("\45\163\x2f\45\163", rtrim(self::CRON_DIRECTORY, "\57"), $siteUser); goto a333b; A1036: $writeCrontabFileCommand->setFile($crontabFile); goto Ece5f; D9124: foreach ($cronJobs as $cronJob) { $crontabEntries[] = $cronJob->getCrontabExpression(); b84f1: } goto E1396; B268a: } public function purgePageSpeedCache() : void { goto D2ebe; D2ebe: $siteUser = $this->site->getUser(); goto Ef931; E4232: $purgePageSpeedCacheFilesCommand->setDirectory($cacheDirectory); goto f71cd; f71cd: $this->commandExecutor->execute($purgePageSpeedCacheFilesCommand, 300); goto C48b9; Fe134: $purgePageSpeedCacheFilesCommand = new DeleteDirectoryCommand(); goto E4232; Ef931: $cacheDirectory = sprintf("\57\150\157\x6d\x65\x2f\45\163\x2f\x74\155\x70\57\x70\x61\147\x65\163\160\x65\x65\144\137\x63\141\143\x68\145\57\52", $siteUser); goto Fe134; C48b9: } public function updateUserSShKeys(string $userName, $sshKeys) : void { goto Aee1e; b3c97: $writeAuthorizedKeysFileCommand->setContent($sshKeys); goto a38fd; Cbdc2: $writeAuthorizedKeysFileCommand->setFile($authorizedKeysFile); goto b3c97; Aee1e: $authorizedKeysFile = sprintf("\57\x68\x6f\x6d\145\x2f\x25\x73\x2f\56\x73\163\x68\57\141\165\164\150\x6f\x72\x69\172\145\x64\x5f\x6b\145\171\163", $userName); goto d8c61; a38fd: $this->commandExecutor->execute($writeAuthorizedKeysFileCommand); goto ce22e; d8c61: $writeAuthorizedKeysFileCommand = new WriteFileCommand(); goto Cbdc2; ce22e: } public function changeUserHomeDirectory(string $userName, string $homeDirectory) : void { goto d7865; Da3c7: $changeUserHomeDirectoryCommand->setUserName($userName); goto Cacd1; d7865: $changeUserHomeDirectoryCommand = new ChangeUserHomeDirectoryCommand(); goto Da3c7; bd202: $this->commandExecutor->execute($changeUserHomeDirectoryCommand); goto ff1e3; Cacd1: $changeUserHomeDirectoryCommand->setHomeDirectory($homeDirectory); goto bd202; ff1e3: } public function changeUserPassword(string $userName, string $password) : void { goto b4d52; c9a8e: $changeUserPasswordCommand->setPassword($password); goto C2ecd; C2ecd: $this->commandExecutor->execute($changeUserPasswordCommand); goto B35a1; b4d52: $changeUserPasswordCommand = new ChangeUserPasswordCommand(); goto E42b5; E42b5: $changeUserPasswordCommand->setUserName($userName); goto c9a8e; B35a1: } protected function getRootDirectory() : string { goto Db2c8; Db2c8: $siteUser = $this->site->getUser(); goto c5dc3; c5dc3: $rootDirectory = $this->site->getRootDirectory(); goto F457e; F457e: $rootDirectory = sprintf("\x2f\150\x6f\155\145\x2f\x25\x73\57\x68\164\x64\x6f\x63\x73\57\45\163", $siteUser, $rootDirectory); goto ebca0; ebca0: return $rootDirectory; goto c0e50; c0e50: } public function reloadNginxService() : void { $this->reloadService("\156\x67\x69\x6e\170"); } public function reloadService($serviceName) { goto B1de4; B1de4: if (!("\144\x65\166" != $_ENV["\x41\x50\120\x5f\105\116\126"])) { goto Ad978; } goto deead; deead: $reloadServiceCommand = new ServiceReloadCommand(); goto e657e; e657e: $reloadServiceCommand->setServiceName($serviceName); goto a6384; a6384: $this->commandExecutor->execute($reloadServiceCommand); goto Ec7d0; Ec7d0: Ad978: goto F9a68; F9a68: } }
