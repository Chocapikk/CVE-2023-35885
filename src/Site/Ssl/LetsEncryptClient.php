<?php
 namespace App\Site\Ssl; use GuzzleHttp\Client as HttpClient; use GuzzleHttp\Psr7\Request; use GuzzleHttp\Psr7\Response; use App\Site\Ssl\Util\Base64SafeEncoder; use App\Site\Ssl\LetsEncrypt\CertificateOrder; use App\Site\Ssl\PrivateKey; use App\Site\Ssl\KeyParser; use App\Site\Ssl\DataSigner; use App\Site\Ssl\Certificate; use App\Util\Retry; class LetsEncryptClient { const HTTP_CLIENT_TIMEOUT = 15; const HTTP_CLIENT_USER_AGENT = "\103\154\157\x75\144\120\141\x6e\x65\x6c"; const ACTION_NEW_ACCOUNT = "\x6e\x65\167\101\143\143\x6f\165\x6e\x74"; const ACTION_NEW_NONCE = "\x6e\x65\167\116\x6f\x6e\143\x65"; const ACTION_NEW_ORDER = "\156\x65\x77\117\x72\144\145\x72"; private $endpoints = ["\x70\162\x6f\144\x75\143\x74\x69\x6f\156" => ["\x6e\145\x77\101\143\143\157\165\156\164" => "\x68\164\164\x70\x73\x3a\x2f\x2f\x61\x63\155\x65\x2d\x76\x30\62\56\141\160\151\x2e\154\145\x74\163\145\156\x63\x72\x79\x70\x74\x2e\157\162\x67\57\x61\143\x6d\x65\57\x6e\145\x77\x2d\x61\143\143\x74", "\x6e\145\x77\116\157\156\143\x65" => "\150\164\x74\160\163\72\57\57\141\143\x6d\x65\55\166\60\x32\x2e\141\160\x69\56\x6c\x65\x74\163\145\x6e\x63\162\171\160\164\x2e\157\x72\x67\57\x61\x63\155\x65\x2f\x6e\x65\167\x2d\x6e\157\156\143\145", "\x6e\x65\x77\x41\x75\x74\x68\x7a" => "\150\164\164\160\163\72\x2f\57\141\143\155\x65\55\166\x30\x32\56\141\x70\x69\x2e\154\x65\x74\163\x65\156\x63\x72\x79\160\164\x2e\x6f\x72\x67\57\141\x63\x6d\145\57\x6e\x65\167\55\x61\165\164\x68\x7a", "\156\x65\167\x4f\162\144\x65\x72" => "\150\164\x74\160\x73\72\x2f\x2f\141\x63\x6d\145\x2d\x76\60\x32\x2e\x61\x70\151\56\154\x65\164\163\x65\x6e\x63\x72\171\160\164\56\x6f\x72\147\57\x61\x63\x6d\x65\57\x6e\x65\167\55\x6f\x72\144\145\162", "\162\x65\x76\157\153\x65\103\145\x72\164" => "\x68\x74\x74\x70\x73\72\x2f\57\x61\x63\155\145\x2d\166\x30\62\x2e\141\x70\151\56\x6c\145\x74\x73\x65\156\143\162\x79\x70\x74\56\x6f\162\x67\57\141\143\x6d\x65\57\162\x65\x76\157\x6b\x65\55\143\145\162\164", "\153\145\171\103\150\141\156\147\145" => "\x68\x74\x74\160\x73\x3a\57\x2f\x61\x63\x6d\145\x2d\x76\60\62\56\x61\160\x69\x2e\x6c\x65\164\x73\145\x6e\x63\x72\171\x70\x74\x2e\x6f\x72\147\57\141\x63\155\x65\x2f\153\x65\171\x2d\143\150\x61\x6e\x67\145"], "\163\x74\x61\x67\x69\x6e\147" => ["\156\145\167\x41\x63\143\x6f\x75\x6e\x74" => "\150\x74\x74\x70\163\x3a\57\57\141\x63\155\x65\x2d\x73\164\x61\147\151\x6e\147\x2d\x76\60\62\x2e\x61\160\x69\x2e\154\x65\164\x73\145\x6e\143\x72\x79\160\x74\x2e\157\162\147\x2f\141\x63\155\145\57\156\145\167\x2d\x61\x63\x63\x74", "\x6e\145\x77\x4e\x6f\x6e\143\x65" => "\150\164\164\x70\163\72\57\x2f\x61\143\x6d\145\x2d\163\164\x61\x67\x69\x6e\x67\x2d\166\x30\62\x2e\141\x70\151\x2e\x6c\x65\164\163\145\x6e\143\x72\171\x70\x74\x2e\x6f\162\x67\57\x61\143\x6d\145\x2f\x6e\x65\167\55\x6e\157\x6e\143\145", "\x6e\145\x77\101\165\x74\x68\172" => "\x68\164\164\160\163\x3a\x2f\57\141\143\x6d\x65\x2d\163\164\x61\x67\x69\156\x67\x2d\x76\60\62\x2e\141\160\x69\56\x6c\145\x74\163\x65\x6e\143\x72\171\x70\164\56\x6f\162\147\x2f\x61\143\155\145\x2f\156\145\167\55\x61\165\164\x68\172", "\x6e\145\167\x4f\x72\144\145\162" => "\150\x74\x74\x70\163\72\57\x2f\x61\x63\155\145\55\163\164\141\147\x69\156\147\x2d\x76\x30\62\x2e\141\x70\x69\x2e\154\x65\164\163\145\156\143\x72\x79\160\164\56\157\162\x67\x2f\141\x63\155\x65\57\x6e\145\x77\55\x6f\162\144\x65\162", "\x72\145\x76\157\153\x65\x43\145\x72\x74" => "\x68\x74\164\x70\x73\x3a\x2f\57\141\143\155\145\55\163\164\141\147\x69\x6e\x67\x2d\x76\60\62\x2e\141\x70\x69\56\x6c\145\x74\x73\x65\x6e\x63\x72\x79\160\164\56\x6f\x72\147\x2f\x61\143\155\x65\x2f\x72\145\x76\157\153\x65\55\x63\x65\x72\x74", "\153\x65\x79\103\x68\x61\156\x67\x65" => "\x68\x74\164\x70\163\72\57\57\x61\143\x6d\145\55\163\x74\x61\147\x69\x6e\147\x2d\166\60\62\56\141\x70\x69\x2e\154\145\x74\163\145\x6e\143\162\171\x70\164\x2e\x6f\x72\x67\57\141\143\155\x65\x2f\x6b\145\171\55\x63\150\x61\x6e\147\145"]]; private ?string $accountEndpoint = null; private ?HttpClient $httpClient = null; private PrivateKey $privateKey; private Base64SafeEncoder $base64Encoder; private KeyParser $keyParser; private DataSigner $dataSigner; private bool $dryRun = false; public function __construct(PrivateKey $privateKey) { goto Cf8ff; C0e81: $this->httpClient = $this->getHttpClient(); goto A1f67; Cf8ff: $this->privateKey = $privateKey; goto C0e81; A1f67: $this->base64Encoder = new Base64SafeEncoder(); goto A0261; A0261: $this->keyParser = new KeyParser(); goto a0ce7; a0ce7: $this->dataSigner = new DataSigner(); goto c2eea; c2eea: } public function setDryRun(bool $flag) : void { $this->dryRun = $flag; } private function getHttpClient() : ?HttpClient { goto Fa52f; Fa52f: if (!(true === is_null($this->httpClient))) { goto c194f; } goto Cacc1; Cacc1: $config = ["\x74\151\x6d\x65\157\x75\164" => self::HTTP_CLIENT_TIMEOUT, "\166\x65\x72\x69\x66\171" => false, "\x68\145\141\144\145\162\x73" => ["\x55\163\x65\x72\x2d\x41\x67\x65\x6e\x74" => self::HTTP_CLIENT_USER_AGENT]]; goto B922b; e43e0: return $this->httpClient; goto B7fa9; B922b: $this->httpClient = new HttpClient($config); goto d4470; d4470: c194f: goto e43e0; B7fa9: } public function registerAccount() { try { goto b225f; B8dbb: $status = $responseData["\x73\164\x61\x74\x75\163"] ?? null; goto Ef6e3; C2a77: $accountEndpoint = null; goto D2e49; Eee56: $signedData = $this->signData($endpoint, ["\x74\x65\162\155\x73\x4f\x66\123\145\x72\x76\x69\143\x65\101\147\162\x65\x65\144" => true]); goto A12c2; Ef6e3: if ("\x76\141\x6c\x69\x64" == $status) { goto ac795; } goto F56b4; d877e: if (true === $this->isResponseSuccessful($response)) { goto F3790; } goto B7a4a; b225f: $endpoint = $this->getEndpoint(self::ACTION_NEW_ACCOUNT); goto Eee56; D2e49: $status = null; goto d877e; A12c2: $request = $this->createRequest("\x50\117\x53\x54", $endpoint, $signedData); goto D3a51; F290e: $responseData = $this->getJsonResponse($response); goto Aa194; Ba09e: b867d: goto F01af; D3a51: $response = $this->sendRequest($request); goto C2a77; C2aea: goto a55da; goto E1e8a; Dbe01: $responseData = $this->getJsonResponse($response); goto B8dbb; C4342: ac795: goto Ac595; b5caa: throw new \Exception(sprintf("\x41\143\x63\x6f\x75\x6e\164\40\163\x74\x61\x74\x75\x73\x20\151\163\40\x6e\x6f\164\x20\x76\x61\x6c\x69\x64\54\x20\163\164\141\164\x75\x73\x3a\x20\x25\163", $status)); goto F3d11; F56b4: throw new \Exception(sprintf("\x41\x63\143\x6f\x75\x6e\164\40\x73\164\x61\x74\x75\x73\40\151\163\x20\156\x6f\x74\40\166\141\154\x69\144\x2c\40\x73\164\x61\x74\165\163\72\x20\45\x73", $status)); goto Bde3f; f3cec: return $responseData; goto F10a9; F3d11: B877f: goto Ba09e; fd8a2: if (!("\166\141\154\151\144" != $status)) { goto B877f; } goto b5caa; Dfa72: $response = $this->retry(function () use($accountEndpoint) { goto b5967; E225a: return $response; goto A4b9f; b5967: $signedKidData = $this->signKidData($accountEndpoint, $accountEndpoint); goto cf430; d8ac3: $response = $this->httpClient->send($request); goto E225a; cf430: $request = $this->createRequest("\120\x4f\x53\x54", $accountEndpoint, $signedKidData); goto d8ac3; A4b9f: }); goto Deb61; B7a4a: $this->throwActionException("\122\145\x67\x69\163\x74\x65\x72\x41\143\x63\x6f\165\156\164\x20\162\x65\x73\x70\157\x6e\x73\145\40\167\141\163\40\156\x6f\x74\x20\x73\x75\143\143\145\163\163\x66\165\x6c", $response); goto C2aea; F01af: a30ca: goto a15c4; E1e8a: F3790: goto Dbe01; Ac595: $accountEndpoint = $this->getAccountEndpoint(); goto Dfa72; F10a9: a55da: goto D33b9; Aa194: $status = $responseData["\x73\x74\141\x74\165\x73"] ?? null; goto fd8a2; Deb61: if (!(true === $this->isResponseSuccessful($response))) { goto b867d; } goto F290e; Bde3f: goto a30ca; goto C4342; a15c4: $responseData = ["\x61\143\143\157\x75\156\x74" => $accountEndpoint, "\163\x74\141\x74\165\x73" => $status]; goto f3cec; D33b9: } catch (\Exception $e) { $exceptionMessage = sprintf("\101\156\x20\x65\162\x72\x6f\162\40\157\x63\143\165\162\162\145\144\x20\167\150\x69\x6c\x65\40\162\x65\x67\x69\163\x74\x65\x72\151\x6e\x67\x20\x61\156\x20\141\x63\143\x6f\x75\156\x74\54\x20\x65\x72\x72\157\162\x20\155\145\163\x73\x61\147\x65\x3a\x20\x25\163", $e->getMessage()); throw new \Exception($exceptionMessage); } } private function getEndpoint($action) { goto D7493; D7493: $endpoints = false === $this->dryRun ? $this->endpoints["\160\x72\157\144\x75\143\x74\151\x6f\156"] : $this->endpoints["\x73\x74\141\147\x69\x6e\147"]; goto E208d; E208d: $requestUrl = $endpoints[$action] ?? ''; goto d983e; d983e: return $requestUrl; goto db116; db116: } private function createRequest($method, $endpoint, $data = null) { goto D3960; cb651: $request = $request->withBody(\GuzzleHttp\Psr7\Utils::streamFor(json_encode($data))); goto f7a11; cfcb4: if (!("\x50\117\x53\124" === $method && true === is_array($data))) { goto f8bbf; } goto Adf3e; b91c9: return $request; goto c2b61; f7a11: f8bbf: goto b91c9; C45e0: $request = $request->withHeader("\x41\143\143\x65\160\164", "\141\x70\160\154\151\143\x61\x74\x69\x6f\x6e\57\x6a\x73\157\156\54\x61\160\x70\154\151\x63\141\164\151\157\x6e\x2f\x6a\x6f\x73\145\53\x6a\163\x6f\x6e"); goto cfcb4; D3960: $request = new Request($method, $endpoint); goto C45e0; Adf3e: $request = $request->withHeader("\103\x6f\x6e\x74\x65\x6e\x74\55\124\171\x70\145", "\141\160\160\154\151\x63\x61\x74\x69\x6f\x6e\x2f\152\157\163\145\x2b\152\x73\x6f\156"); goto cb651; c2b61: } private function isResponseSuccessful(Response $response) { goto da33c; C4206: $successfulStatusCodes = [200, 201]; goto bb57e; A54c1: Cc5ff: goto acee1; acee1: return $isResponseSuccessful; goto a8cc5; fb9c6: $isResponseSuccessful = true; goto A54c1; da33c: $isResponseSuccessful = false; goto eed4c; eed4c: $responseStatusCode = $response->getStatusCode(); goto C4206; bb57e: if (!(true === in_array($responseStatusCode, $successfulStatusCodes))) { goto Cc5ff; } goto fb9c6; a8cc5: } private function throwActionException($message, Response $response) { goto Adda8; ce4d0: throw new \Exception($exceptionMessage); goto C98b8; Adda8: $responseStatusCode = $response->getStatusCode(); goto Cc01f; Cc01f: $exceptionMessage = sprintf("\x73\164\141\164\x75\163\x20\143\157\x64\145\x3a\x20\45\163\x2c\40\145\x72\162\157\162\x20\155\145\163\x73\x61\x67\145\x3a\x20\x25\x73", $responseStatusCode, $message); goto ce4d0; C98b8: } private function getNonce() { goto C8fd7; d4c1e: goto D397d; goto Aa826; Bcb53: $request = $this->createRequest("\x48\105\x41\x44", $endpoint); goto c3d47; A9287: throw new \Exception("\125\156\141\142\154\x65\40\164\x6f\40\162\145\x74\162\x69\145\166\145\x20\156\157\156\x63\145"); goto d4c1e; Dccc6: D397d: goto C03c5; Aa826: acfb5: goto e26de; f3e74: return $replayNonce; goto Dccc6; C8fd7: $endpoint = $this->getEndpoint(self::ACTION_NEW_NONCE); goto Bcb53; e7f90: if (true === $this->isResponseSuccessful($response) && true === $response->hasHeader("\x52\145\x70\x6c\x61\x79\x2d\116\157\156\x63\x65") && false === empty($response->getHeaderLine("\122\x65\x70\154\x61\x79\x2d\x4e\157\156\x63\x65"))) { goto acfb5; } goto A9287; c3d47: $response = $this->sendRequest($request); goto e7f90; e26de: $replayNonce = $response->getHeaderLine("\x52\145\x70\154\141\171\x2d\116\x6f\x6e\x63\x65"); goto f3e74; C03c5: } private function signData($endpoint, $data) { goto bfc0b; B2570: $protected = $this->base64Encoder->encode(json_encode($protected, JSON_UNESCAPED_SLASHES)); goto fdb33; ed896: $signature = $this->base64Encoder->encode($this->dataSigner->signData($protected . "\x2e" . $payload, $this->privateKey)); goto dbb37; fdb33: $payload = $this->base64Encoder->encode(json_encode($data, JSON_UNESCAPED_SLASHES)); goto ed896; bfc0b: $jwk = $this->getJwk(); goto be335; A0906: $protected = ["\x61\154\147" => "\x52\x53\x32\65\x36", "\x6a\167\x6b" => $jwk, "\156\x6f\x6e\143\x65" => $nonce, "\x75\x72\x6c" => $endpoint]; goto B2570; F5229: return $signedData; goto eef91; be335: $nonce = $this->getNonce(); goto A0906; dbb37: $signedData = ["\160\x72\157\x74\x65\143\164\x65\x64" => $protected, "\160\x61\x79\154\157\141\x64" => $payload, "\163\151\147\x6e\x61\164\x75\x72\x65" => $signature]; goto F5229; eef91: } private function getJwk() { goto B94bc; F5086: return $jwk; goto a12ef; B94bc: $parsedKey = $this->keyParser->parse($this->privateKey); goto c8287; c8287: $jwk = ["\x65" => $this->base64Encoder->encode($parsedKey->getDetail("\145")), "\153\164\171" => "\122\x53\101", "\156" => $this->base64Encoder->encode($parsedKey->getDetail("\156"))]; goto F5086; a12ef: } private function getJwkThumbprint() { goto bc275; d2821: $jwkThumbprint = hash("\163\150\x61\x32\65\x36", json_encode($jwk), true); goto Dca0a; bc275: $jwk = $this->getJwk(); goto d2821; Dca0a: return $jwkThumbprint; goto ae83d; ae83d: } private function signKidData($endpoint, $account, array $data = []) { goto c2dc9; Cd224: $protected = $this->base64Encoder->encode(json_encode($protected, JSON_UNESCAPED_SLASHES)); goto Be709; Bb3d2: return $signedData; goto D81c5; fa1c4: $payload = $this->base64Encoder->encode(json_encode($data, JSON_UNESCAPED_SLASHES)); goto C3bf9; A8623: $signedData = ["\x70\162\x6f\x74\145\x63\x74\145\x64" => $protected, "\160\141\x79\x6c\157\141\144" => $payload, "\163\151\x67\x6e\141\164\165\x72\145" => $signature]; goto Bb3d2; C3bf9: goto D6fdd; goto Ae86f; Ae86f: b6799: goto e2b7b; e2b7b: $payload = $this->base64Encoder->encode("\x7b\x7d"); goto d0f51; C8351: $protected = ["\x61\154\x67" => "\122\x53\x32\65\x36", "\153\151\x64" => $account, "\156\x6f\156\x63\x65" => $nonce, "\x75\x72\154" => $endpoint]; goto becb1; becb1: if (true === empty($data)) { goto b6799; } goto fa1c4; Be709: $signature = $this->base64Encoder->encode($this->dataSigner->signData($protected . "\56" . $payload, $this->privateKey, OPENSSL_ALGO_SHA256, "\x44\105\x52")); goto A8623; c2dc9: $nonce = $this->getNonce(); goto C8351; d0f51: D6fdd: goto Cd224; D81c5: } public function getAccountEndpoint() { goto Fac36; A6b08: ef1e1: goto c213f; B3ff9: a3e7e: goto e96fc; cbac3: $response = $this->retry(function () use($endpoint) { goto d3694; Be647: $response = $this->httpClient->send($request); goto Cc2f4; e15fb: $request = $this->createRequest("\120\x4f\x53\x54", $endpoint, $signedData); goto Be647; d3694: $signedData = $this->signData($endpoint, ["\x6f\x6e\x6c\x79\122\145\x74\x75\162\x6e\105\170\151\x73\164\151\x6e\x67" => true]); goto e15fb; Cc2f4: return $response; goto E3a80; E3a80: }); goto A2eaa; f1358: throw new \Exception("\125\x6e\141\142\x6c\145\x20\x74\x6f\x20\162\x65\164\x72\x69\145\x76\145\40\x61\x63\x63\157\x75\x6e\x74\x20\x65\156\144\160\157\151\156\x74"); goto E90f6; Ced4b: b4964: goto B3ff9; c213f: $this->accountEndpoint = $response->getHeaderLine("\x4c\x6f\143\x61\x74\x69\x6f\156"); goto Ced4b; C9faf: $endpoint = $this->getEndpoint(self::ACTION_NEW_ACCOUNT); goto cbac3; E90f6: goto b4964; goto A6b08; e96fc: return $this->accountEndpoint; goto d90fc; A2eaa: if (true === $this->isResponseSuccessful($response) && false === empty($response->getHeaderLine("\x4c\157\x63\141\x74\151\x6f\x6e"))) { goto ef1e1; } goto f1358; Fac36: if (!(true === is_null($this->accountEndpoint))) { goto a3e7e; } goto C9faf; d90fc: } public function requestOrder(array $domains) { try { goto D8bc8; dce6c: $orderEndpoint = null; goto e85a0; B0179: throw new \Exception("\x6e\145\x77\x20\141\143\143\157\x75\156\x74\40\162\x65\161\x75\145\163\x74\40\167\141\163\x20\x6e\x6f\164\40\x73\x75\143\143\x65\x73\x73\x66\x75\x6c"); goto C2c21; D8bc8: $data = ["\x69\x64\145\x6e\x74\151\146\151\x65\x72\x73" => array_map(function ($domain) { return ["\x74\171\x70\x65" => "\x64\x6e\x73", "\x76\x61\x6c\x75\x65" => $domain]; }, array_values($domains))]; goto A0783; ad0e1: $response = $this->retry(function () use($accountEndpoint, $newOrderEndpoint, $data) { goto db56e; F08bd: return $response; goto bc0d2; db56e: $signedKidData = $this->signKidData($newOrderEndpoint, $accountEndpoint, $data); goto E346a; E346a: $request = $this->createRequest("\x50\x4f\123\124", $newOrderEndpoint, $signedKidData); goto A58f8; A58f8: $response = $this->httpClient->send($request); goto F08bd; bc0d2: }); goto dce6c; c8cf0: $responseData = $this->getJsonResponse($response); goto D891d; E53ff: return $certificateOrder; goto C7466; ba5c4: if (true === $this->isResponseSuccessful($response)) { goto fa9f7; } goto B0179; d7dc1: Dab21: goto b8ec8; e85a0: $authorizationEndpoints = []; goto ba5c4; dc2f1: $authorizationsChallenges = []; goto Eb288; fff9c: if (false === empty($authorizationEndpoints)) { goto f95c0; } goto a53f1; D795a: $authorizationEndpoints = $responseData["\141\x75\x74\150\x6f\x72\x69\x7a\x61\164\x69\x6f\x6e\x73"]; goto cb40f; f2224: D2754: goto Acc87; f3630: $newOrderEndpoint = $this->getEndpoint(self::ACTION_NEW_ORDER); goto ad0e1; A0783: $accountEndpoint = $this->getAccountEndpoint(); goto f3630; Eb288: foreach ($authorizationEndpoints as $authorizationEndpoint) { goto e27fe; a09c5: C4e2c: goto Ef517; Afe60: ef398: goto d2573; d0496: throw new \Exception(sprintf("\x61\x75\x74\x68\x6f\162\x69\172\x61\x74\x69\157\x6e\40\162\x65\161\x75\x65\163\x74\40\146\141\x69\x6c\x65\144\40\x74\x6f\x20\145\156\x64\160\x6f\x69\156\x74\72\x20\x25\x73\40", $authorizationEndpoint)); goto f16e5; D6c10: $domain = $authorizationsResponseData["\151\x64\145\x6e\164\151\146\x69\x65\162"]["\166\141\x6c\x75\x65"] ?? null; goto aa651; Fa975: $authorizationsResponseData = $this->getJsonResponse($authorizationResponse); goto D6c10; f46f0: goto A06a8; goto a09c5; ccd9f: foreach ($challenges as $domainChallenge) { goto ac538; f66f2: if (!($challengeType == "\150\x74\164\160\x2d\x30\61")) { goto cb656; } goto D76eb; B97ee: $verificationContent = sprintf("\45\163\56\45\x73", $token, $this->base64Encoder->encode($this->getJwkThumbprint())); goto E19da; D4075: $token = $domainChallenge["\164\x6f\x6b\145\156"] ?? ''; goto C24f6; E19da: $challenge = ["\x73\164\141\164\x75\x73" => $status, "\x75\x72\154" => $url, "\x74\x6f\153\145\156" => $token, "\166\145\162\x69\x66\151\x63\x61\164\151\157\156\125\162\x6c" => $verificationUrl, "\x76\145\162\x69\146\151\x63\x61\164\151\x6f\x6e\103\x6f\156\164\145\156\164" => $verificationContent]; goto Edd4d; Edd4d: goto ce84b; goto D29c9; ac538: $challengeType = $domainChallenge["\164\171\160\145"] ?? ''; goto f66f2; D76eb: $status = $domainChallenge["\x73\164\x61\x74\x75\163"] ?? ''; goto Dfd8b; Def83: a3f74: goto Bea01; C24f6: $verificationUrl = sprintf("\x68\x74\x74\x70\x3a\57\x2f\x25\x73\57\56\167\x65\x6c\x6c\55\x6b\x6e\157\167\x6e\57\141\143\x6d\x65\x2d\143\150\141\154\x6c\x65\x6e\x67\145\57\45\x73", $domain, $token); goto B97ee; D29c9: cb656: goto Def83; Dfd8b: $url = $domainChallenge["\165\162\154"] ?? ''; goto D4075; Bea01: } goto d77de; d450a: A06a8: goto Afe60; D55d0: dbb1e: goto c61d3; d2573: F9011: goto C41f2; decc7: if (!count($challenges)) { goto dbb1e; } goto ccd9f; e27fe: $request = $this->createRequest("\x47\105\124", $authorizationEndpoint); goto c65c3; d77de: ce84b: goto D55d0; Ef517: $authorizationsChallenges[$domain] = $challenge; goto d450a; c65c3: $authorizationResponse = $this->sendRequest($request); goto Da3f6; Dfdfe: bd5ce: goto Fa975; Bb70f: $challenges = $authorizationsResponseData["\143\150\141\x6c\x6c\145\156\x67\145\163"] ? (array) $authorizationsResponseData["\x63\150\141\x6c\x6c\x65\156\x67\145\x73"] : []; goto fa843; c61d3: if (false === empty($challenge)) { goto C4e2c; } goto B810f; Da3f6: if (true === $this->isResponseSuccessful($authorizationResponse)) { goto bd5ce; } goto d0496; C41f2: acb37: goto ded85; f16e5: goto F9011; goto Dfdfe; aa651: if (!(false === empty($domain))) { goto ef398; } goto Bb70f; fa843: $challenge = []; goto decc7; B810f: throw new \Exception(sprintf("\x4e\157\x20\143\150\x61\x6c\x6c\x65\x6e\x67\145\x73\40\x72\x65\x74\x75\162\x6e\x65\x64\40\146\157\162\40\144\157\x6d\141\151\x6e\x3a\40\45\163", $domain)); goto f46f0; ded85: } goto f2224; C61ef: A73d7: goto fff9c; F6b9b: fa9f7: goto c8cf0; C7466: Cf1c2: goto d7dc1; cb40f: $orderEndpoint = $response->getHeaderLine("\114\157\143\x61\164\151\157\156"); goto C61ef; D891d: if (!(true === isset($responseData["\x61\165\x74\x68\157\162\x69\172\141\164\151\x6f\x6e\163"]) && true === is_array($responseData["\141\165\164\x68\x6f\x72\x69\x7a\x61\164\151\157\x6e\x73"]))) { goto A73d7; } goto D795a; F4a92: f95c0: goto dc2f1; Acc87: $certificateOrder = new CertificateOrder($orderEndpoint, $authorizationsChallenges); goto E53ff; C2c21: goto Dab21; goto F6b9b; ca461: goto Cf1c2; goto F4a92; a53f1: throw new \Exception("\156\157\40\141\165\164\150\x6f\x72\151\172\x61\x74\151\157\156\163\40\162\145\164\165\162\x6e\x65\x64"); goto ca461; b8ec8: } catch (\Exception $e) { $exceptionMessage = sprintf("\101\156\x20\145\162\162\157\x72\x20\x6f\143\x63\165\x72\162\145\x64\40\167\150\x69\154\145\x20\162\145\x71\165\x65\x73\x74\x69\156\x67\40\x61\x6e\40\157\162\144\145\162\x2c\x20\145\x72\162\157\162\40\x6d\145\163\x73\141\147\x65\x3a\x20\45\x73", $e->getMessage()); throw new \Exception($exceptionMessage); } } public function validateDomains(CertificateOrder $certificateOrder) { goto E5883; d09cf: foreach ($authorizationsChallenges as $domain => $authorizationsChallenge) { try { $this->validateDomain($authorizationsChallenge); } catch (\Exception $e) { $errorMessage = sprintf("\104\x6f\x6d\141\151\x6e\x20\x63\x6f\x75\x6c\144\40\156\x6f\164\40\x62\x65\40\166\141\154\151\144\141\x74\x65\144\54\40\x65\162\162\x6f\x72\40\x6d\x65\163\x73\x61\147\x65\x3a\40\45\x73", $e->getMessage()); $authorizationChallengeErrors[$domain] = $errorMessage; } f46bd: } goto c7e73; E5883: $authorizationsChallenges = $certificateOrder->getAuthorizationsChallenges(); goto Cadfb; a80d6: return $authorizationChallengeErrors; goto ca072; c7e73: d09f1: goto a80d6; Cadfb: $authorizationChallengeErrors = []; goto d09cf; ca072: } private function validateDomain(array $challenge, $timeout = 90) { goto E8b36; F1b5f: $response = $this->sendRequest($request); goto Be7e2; A26da: $responseData = $this->getJsonResponse($response); goto dccd9; c5263: $status = null; goto Fbfe5; dccd9: $status = $responseData["\163\164\141\x74\x75\163"] ?? null; goto B75d7; Ef2df: goto b4903; goto A03da; B65d2: if (!(time() <= $endTime && (true === is_null($status) || "\x70\x65\x6e\x64\x69\x6e\147" == $status))) { goto a9794; } goto C7ffa; c9430: $request = $this->createRequest("\x47\105\124", $challengeUrl); goto F1b5f; db8c6: $responseData = $this->getJsonResponse($response); goto B9e85; B75d7: if (!(true === is_null($status) || "\160\x65\156\x64\x69\156\x67" == $status)) { goto A080d; } goto C44d5; A7f2e: $challengeUrl = $challenge["\x75\x72\x6c"]; goto b4c68; eb655: ead8e: goto aa40c; F8391: $errorType = $responseData["\145\x72\162\157\162"]["\164\171\x70\145"] ?? ''; goto A298b; B5c3b: b4903: goto acac4; B9e85: $status = $responseData["\163\x74\x61\x74\165\163"] ?? null; goto f7f63; b1b77: throw new \Exception(sprintf("\x72\x65\161\x75\x65\163\x74\x20\164\x6f\x20\143\150\x61\154\x6c\x65\156\x67\145\40\165\162\x6c\40\x22\x25\x73\x22\40\146\x61\x69\154\145\x64", $challengeUrl)); goto Ef2df; fbe0b: if (!(true === $this->isResponseSuccessful($response))) { goto e173b; } goto db8c6; a7ff1: F6d63: goto Abd06; B5128: $response = $this->sendRequest($request); goto c5263; C7ffa: sleep(1); goto c9430; Bdd38: $status = $responseData["\x73\x74\141\x74\x75\163"] ?? null; goto a7ff1; C44d5: $response = $this->retry(function () use($challengeUrl, $accountEndpoint) { goto c7307; c7307: $signedKidData = $this->signKidData($challengeUrl, $accountEndpoint); goto Cf3c8; Cf3c8: $request = $this->createRequest("\120\x4f\123\x54", $challengeUrl, $signedKidData); goto c13b5; c13b5: $response = $this->httpClient->send($request); goto aeb2c; aeb2c: return $response; goto e2d82; e2d82: }); goto fbe0b; E8b36: $endTime = time() + $timeout; goto A7f2e; Bd01e: $responseData = $this->getJsonResponse($response); goto Bdd38; f8f7a: bbe11: goto B65d2; b4c68: $accountEndpoint = $this->getAccountEndpoint(); goto Ccf1d; A03da: cc416: goto A26da; Fbfe5: if (true === $this->isResponseSuccessful($response)) { goto cc416; } goto b1b77; a5cde: a9794: goto c9c92; Be7e2: if (!(true === $this->isResponseSuccessful($response))) { goto F6d63; } goto Bd01e; Ed836: throw new \Exception(sprintf("\145\x72\162\157\162\x20\x74\171\160\145\72\x20\x25\x73\x2c\x20\145\x72\162\x6f\x72\x20\144\145\x74\141\x69\x6c\x3a\40\x25\x73", $errorType, $errorDetail)); goto A7760; Ccf1d: $request = $this->createRequest("\x47\x45\x54", $challengeUrl); goto B5128; Abd06: goto bbe11; goto a5cde; Cba99: throw new \Exception(sprintf("\x76\x61\x6c\151\144\x61\x74\151\157\x6e\x20\164\151\x6d\145\144\x20\157\x75\164\40\141\x66\164\x65\x72\x20\45\163\40\163\145\143\157\156\x64\163", $timeout)); goto eb655; c9c92: if (!(true === is_null($status) || "\x70\x65\156\x64\151\x6e\147" == $status)) { goto ead8e; } goto Cba99; aa40c: if (!(true === is_null($status) || "\166\x61\x6c\151\144" != $status)) { goto f255c; } goto F8391; Ef785: A080d: goto f8f7a; f7f63: e173b: goto Ef785; A7760: f255c: goto B5c3b; A298b: $errorDetail = $responseData["\145\162\x72\x6f\162"]["\x64\x65\x74\x61\x69\154"] ?? ''; goto Ed836; acac4: } public function finalizeOrder(CertificateOrder $order, PrivateKey $privateKey, $csr, $timeout = 90) { try { goto D3bdb; C0ed6: $csrContent = trim(str_replace($humanText, '', $csr)); goto Ee0bd; f8671: $response = $this->retry(function () use($finalizeUrl, $accountEndpoint, $csrContent) { goto C0cbe; D8279: $request = $this->createRequest("\120\117\x53\124", $finalizeUrl, $signedKidData); goto D3eb1; C0cbe: $signedKidData = $this->signKidData($finalizeUrl, $accountEndpoint, ["\x63\x73\x72" => $csrContent]); goto D8279; D3eb1: $response = $this->httpClient->send($request); goto ef1dd; ef1dd: return $response; goto a3623; a3623: }); goto D877d; Fdcb3: $accountEndpoint = $this->getAccountEndpoint(); goto D3840; Dc76e: $certificate->setCertificateChain(trim($certificateChain)); goto f1d79; Bf3a9: if (!(true === $this->isResponseSuccessful($response))) { goto b3554; } goto C8a81; c3a19: $orderEndpoint = $order->getOrderEndpoint(); goto Fdcb3; ea3ec: $certificateUrl = $responseData["\x63\145\x72\x74\151\x66\151\143\141\164\145"] ?? null; goto A669a; cc99a: b9c4f: goto cd087; dd446: $status = null; goto cc651; D8b43: $response = $this->retry(function () use($orderEndpoint, $accountEndpoint) { goto f74f7; C1abd: return $response; goto d3109; bdedd: $request = $this->createRequest("\x47\x45\x54", $orderEndpoint, $signedKidData); goto B1db1; f74f7: $signedKidData = $this->signKidData($orderEndpoint, $accountEndpoint); goto bdedd; B1db1: $response = $this->httpClient->send($request); goto C1abd; d3109: }); goto Bf3a9; d2ddd: $certificateUrl = $responseData["\143\145\162\x74\x69\146\151\143\141\164\145"] ?? null; goto A69b6; C8a81: $responseData = $this->getJsonResponse($response); goto E930c; f7441: C656c: goto cae96; Edfda: if (!(true === in_array($status, ["\160\x65\x6e\x64\x69\156\x67", "\162\145\141\x64\171"]) && false === empty($finalizeUrl))) { goto eefbe; } goto B9084; Ee0bd: $csrContent = trim($this->base64Encoder->encode(base64_decode($csrContent))); goto f8671; b249f: goto C656c; goto d36b7; bc8c4: goto b9c4f; goto f3f52; D877d: if (!(true === $this->isResponseSuccessful($response))) { goto dc302; } goto B5f57; c0bcc: if (!(false === empty($certificateChain))) { goto Ce0a9; } goto Dc76e; c238c: $certificate = new Certificate(); goto da768; d07e9: $certificate->setPrivateKey(trim($privateKey->getPEM())); goto d39b2; C5acc: $fullCertificate = explode("\xa\12", $fullCertificate); goto C9417; cc651: $certificateUrl = null; goto E6157; d39b2: $certificate->setCertificate(trim($mainCertificate)); goto c0bcc; f3f52: Ec961: goto b5de1; d1cba: c9c93: goto fa617; B0e6e: return $certificate; goto cc99a; B5f57: $responseData = $this->getJsonResponse($response); goto f87cc; A0b4c: if (!(time() <= $endTime && (false === isset($status) || true === in_array($status, ["\x70\x65\x6e\x64\151\x6e\x67", "\x70\x72\157\x63\x65\163\163\151\156\x67", "\x72\145\x61\x64\171"])))) { goto adf98; } goto dc031; E6157: if (true === $this->isResponseSuccessful($response)) { goto De0b2; } goto c7ef2; fa617: $request = $this->createRequest("\107\105\124", $certificateUrl); goto E9168; D3840: $response = $this->retry(function () use($orderEndpoint, $accountEndpoint) { goto b5797; a630d: $response = $this->httpClient->send($request); goto d72cf; d72cf: return $response; goto c5096; b5797: $signedKidData = $this->signKidData($orderEndpoint, $accountEndpoint); goto d1ca7; d1ca7: $request = $this->createRequest("\107\105\x54", $orderEndpoint, $signedKidData); goto a630d; c5096: }); goto dd446; E9168: $response = $this->sendRequest($request); goto B3b77; B9084: $humanText = ["\x2d\55\55\55\x2d\x42\x45\107\x49\116\x20\x43\x45\x52\124\111\106\x49\x43\x41\x54\105\x20\x52\105\121\x55\x45\x53\124\55\x2d\55\x2d\55", "\55\x2d\x2d\55\55\105\x4e\x44\x20\x43\x45\122\124\x49\106\x49\103\x41\x54\105\40\122\105\121\125\105\123\124\x2d\55\x2d\x2d\x2d"]; goto C0ed6; D0a71: dc302: goto Df5ae; Fd1ee: $status = $responseData["\163\x74\x61\x74\x75\x73"] ?? null; goto E62c5; A8ef5: $responseData = $this->getJsonResponse($response); goto Fd1ee; E930c: $status = $responseData["\x73\x74\141\164\165\163"] ?? null; goto d2ddd; Df5ae: if (!("\x76\x61\x6c\151\144" !== $status)) { goto c9c93; } goto E1022; A69b6: b3554: goto abf55; A669a: E1355: goto A0b4c; E1022: throw new \Exception("\157\162\x64\145\162\40\x68\141\x73\x20\156\157\x74\x20\x62\145\145\156\40\166\x61\x6c\151\144\x61\164\x65\x64"); goto d1cba; dc031: sleep(1); goto D8b43; d36b7: De0b2: goto A8ef5; B3b77: if (true === $this->isResponseSuccessful($response)) { goto Ec961; } goto Bec61; C9417: $mainCertificate = array_shift($fullCertificate); goto cfbe2; f87cc: $status = $responseData["\163\x74\141\x74\165\163"] ?? null; goto ea3ec; E62c5: $finalizeUrl = $responseData["\146\x69\156\141\154\x69\x7a\x65"]; goto Edfda; d77ad: adf98: goto D0a71; da768: $certificate->setCsr(trim($csr)); goto d07e9; cd087: eefbe: goto f7441; abf55: goto E1355; goto d77ad; f1d79: Ce0a9: goto B0e6e; D3bdb: $endTime = time() + $timeout; goto c3a19; Bec61: throw new \Exception("\x6e\x6f\x74\x20\141\x62\x6c\x65\x20\x74\157\x20\147\x65\164\x20\164\x68\145\40\143\145\162\164\x69\x66\151\x63\141\164\145"); goto bc8c4; cfbe2: $certificateChain = implode("\134\x6e\134\156", $fullCertificate); goto c238c; b5de1: $fullCertificate = (string) $response->getBody(); goto C5acc; c7ef2: throw new \Exception("\156\157\40\x72\145\x73\x70\157\x6e\163\x65\x20\162\x65\x74\165\x72\156\145\x64"); goto b249f; cae96: } catch (\Exception $e) { $exceptionMessage = sprintf("\x41\156\x20\x65\162\162\x6f\x72\40\157\143\x63\165\162\162\145\144\x20\167\150\x69\x6c\x65\40\146\x69\x6e\x61\x6c\x69\x7a\151\x6e\x67\x20\164\x68\145\40\x6f\162\x64\x65\x72\x2c\x20\145\162\162\157\162\x20\x6d\145\x73\163\x61\147\x65\x3a\40\x25\163", $e->getMessage()); throw new \Exception($exceptionMessage); } } private function sendRequest(Request $request) { $response = $this->retry(function () use($request) { $response = $this->httpClient->send($request); return $response; }); return $response; } private function getJsonResponse(Response $response) { $jsonResponse = json_decode((string) $response->getBody(), true); return $jsonResponse; } private function retry(callable $fn, $retries = 2, $delay = 3) { return Retry::retry($fn, $retries, $delay); } }
