<?php
 namespace App\Security; use Symfony\Component\HttpFoundation\JsonResponse; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\Security\Core\Authentication\Token\TokenInterface; use Symfony\Component\Security\Core\Exception\AuthenticationException; use Symfony\Component\Security\Core\Exception\CustomUserMessageAuthenticationException; use Symfony\Component\Security\Http\Authenticator\AbstractAuthenticator; use Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge; use Symfony\Component\Security\Http\Authenticator\Passport\Passport; use Symfony\Component\Security\Http\Authenticator\Passport\SelfValidatingPassport; use Symfony\Component\HttpKernel\KernelInterface; use App\Repository\ApiTokenRepository; use App\Entity\User; class ApiTokenAuthenticator extends AbstractAuthenticator { private static array $whitelistedIps = ["\61\x37\62\x2e\x31\x37\x2e\60\56\61", "\61\x32\67\x2e\60\x2e\60\x2e\61"]; private ApiTokenRepository $apiTokenRepository; private KernelInterface $kernel; public function __construct(ApiTokenRepository $apiTokenRepository, KernelInterface $kernel) { $this->apiTokenRepository = $apiTokenRepository; $this->kernel = $kernel; } public function supports(Request $request) : ?bool { return $request->headers->has("\x41\x75\x74\150\157\162\x69\172\141\164\x69\157\x6e") && 0 === strpos($request->headers->get("\x41\x75\164\150\x6f\162\151\172\141\164\x69\x6f\x6e"), "\102\145\x61\x72\x65\x72\x20"); } public function authenticate(Request $request) : Passport { goto C2325; c7007: throw new CustomUserMessageAuthenticationException("\x4e\157\40\x41\120\x49\x20\x74\x6f\153\x65\x6e\x20\160\x72\157\166\151\x64\145\x64"); goto a044e; Cad60: $passport = new SelfValidatingPassport(new UserBadge($apiToken, function () { goto E6e86; C563c: return $user; goto fe0b2; ba01a: $user->setUserName("\x61\x70\151"); goto C563c; E6e86: $user = new User(); goto ba01a; fe0b2: })); goto f8baf; f8baf: goto b8b12; goto f441f; A216c: $passport = new SelfValidatingPassport(new UserBadge("\141\160\x69", function () { goto Bc6e7; f965c: return $user; goto B54f1; a1c08: $user->setUserName("\141\x70\x69"); goto f965c; Bc6e7: $user = new User(); goto a1c08; B54f1: })); goto F8057; f441f: D0891: goto A216c; A170f: if (true === in_array($clientIP, self::$whitelistedIps)) { goto D0891; } goto c79c0; D2a60: if (!(null === $apiToken)) { goto f6fa5; } goto c7007; c79c0: $apiToken = $this->getApiToken($request); goto D2a60; E0f5c: return $passport; goto bcf7b; C2325: $clientIP = $request->getClientIp(); goto A170f; B7d3d: fd4a2: goto Cad60; bbb5a: $apiTokenEntity = $this->apiTokenRepository->findOneBy(["\x74\157\x6b\145\156" => $apiToken]); goto E38e1; F8057: b8b12: goto E0f5c; ec5b4: throw new CustomUserMessageAuthenticationException("\125\x6e\x61\165\164\150\x6f\162\151\x7a\x65\x64"); goto B7d3d; E38e1: if (!(true === is_null($apiTokenEntity))) { goto fd4a2; } goto ec5b4; a044e: f6fa5: goto bbb5a; bcf7b: } public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName) : ?Response { return null; } public function onAuthenticationFailure(Request $request, AuthenticationException $exception) : ?Response { $data = ["\x6d\x65\x73\x73\x61\147\x65" => strtr($exception->getMessageKey(), $exception->getMessageData())]; return new JsonResponse($data, Response::HTTP_UNAUTHORIZED); } private function getApiToken(Request $request) { $apiToken = substr($request->headers->get("\101\x75\x74\x68\x6f\x72\151\x7a\x61\x74\x69\157\156"), 7); return $apiToken; } }
